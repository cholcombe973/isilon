/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, query, Error};

pub struct FsaResultsApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + 'static> FsaResultsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> FsaResultsApiClient<C> {
        FsaResultsApiClient {
            configuration: configuration,
        }
    }
}

pub trait FsaResultsApi {
    fn get_histogram_stat_by(
        &self,
        id: &str,
        stat: &str,
    ) -> Box<dyn Future<Item = crate::models::HistogramStatBy, Error = Error>>;
    fn get_histogram_stat_by_breakout(
        &self,
        histogram_stat_by_breakout: &str,
        id: &str,
        stat: &str,
        directory_filter: &str,
        attribute_filter: &str,
        node_pool_filter: &str,
        disk_pool_filter: &str,
        tier_filter: &str,
        comp_report: i32,
        log_size_filter: i32,
        phys_size_filter: i32,
        limit: i32,
        path_ext_filter: &str,
        ctime_filter: i32,
        atime_filter: i32,
    ) -> Box<dyn Future<Item = crate::models::HistogramStatBy, Error = Error>>;
    fn get_result_directories(
        &self,
        id: &str,
        sort: &str,
        path: &str,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultDirectories, Error = Error>>;
    fn get_result_directory(
        &self,
        result_directory_id: i32,
        id: &str,
        sort: &str,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultDirectories, Error = Error>>;
    fn get_result_histogram(
        &self,
        id: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultHistogram, Error = Error>>;
    fn get_result_histogram_stat(
        &self,
        result_histogram_stat: &str,
        id: &str,
        directory_filter: &str,
        attribute_filter: &str,
        node_pool_filter: &str,
        disk_pool_filter: &str,
        tier_filter: &str,
        comp_report: i32,
        log_size_filter: i32,
        phys_size_filter: i32,
        path_ext_filter: &str,
        ctime_filter: i32,
        atime_filter: i32,
    ) -> Box<dyn Future<Item = crate::models::ResultHistogram, Error = Error>>;
    fn get_result_top_dir(
        &self,
        result_top_dir_id: &str,
        id: &str,
        sort: &str,
        start: i32,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopDirs, Error = Error>>;
    fn get_result_top_dirs(
        &self,
        id: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopDirs, Error = Error>>;
    fn get_result_top_file(
        &self,
        result_top_file_id: &str,
        id: &str,
        sort: &str,
        start: i32,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopFiles, Error = Error>>;
    fn get_result_top_files(
        &self,
        id: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopFiles, Error = Error>>;
}

impl<C: hyper::client::connect::Connect + 'static> FsaResultsApi for FsaResultsApiClient<C> {
    fn get_histogram_stat_by(
        &self,
        id: &str,
        stat: &str,
    ) -> Box<dyn Future<Item = crate::models::HistogramStatBy, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/histogram/{Stat}/by",
            self.configuration.base_path,
            Id = id,
            Stat = stat
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_histogram_stat_by_breakout(
        &self,
        histogram_stat_by_breakout: &str,
        id: &str,
        stat: &str,
        directory_filter: &str,
        attribute_filter: &str,
        node_pool_filter: &str,
        disk_pool_filter: &str,
        tier_filter: &str,
        comp_report: i32,
        log_size_filter: i32,
        phys_size_filter: i32,
        limit: i32,
        path_ext_filter: &str,
        ctime_filter: i32,
        atime_filter: i32,
    ) -> Box<dyn Future<Item = crate::models::HistogramStatBy, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("directory_filter", &directory_filter.to_string())
            .append_pair("attribute_filter", &attribute_filter.to_string())
            .append_pair("node_pool_filter", &node_pool_filter.to_string())
            .append_pair("disk_pool_filter", &disk_pool_filter.to_string())
            .append_pair("tier_filter", &tier_filter.to_string())
            .append_pair("comp_report", &comp_report.to_string())
            .append_pair("log_size_filter", &log_size_filter.to_string())
            .append_pair("phys_size_filter", &phys_size_filter.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("path_ext_filter", &path_ext_filter.to_string())
            .append_pair("ctime_filter", &ctime_filter.to_string())
            .append_pair("atime_filter", &atime_filter.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/histogram/{Stat}/by/{HistogramStatByBreakout}?{}",
            self.configuration.base_path,
            q,
            HistogramStatByBreakout = histogram_stat_by_breakout,
            Id = id,
            Stat = stat
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_directories(
        &self,
        id: &str,
        sort: &str,
        path: &str,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultDirectories, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("path", &path.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("comp_report", &comp_report.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/directories?{}",
            self.configuration.base_path,
            q,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_directory(
        &self,
        result_directory_id: i32,
        id: &str,
        sort: &str,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultDirectories, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("comp_report", &comp_report.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/directories/{ResultDirectoryId}?{}",
            self.configuration.base_path,
            q,
            ResultDirectoryId = result_directory_id,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_histogram(
        &self,
        id: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultHistogram, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/histogram",
            self.configuration.base_path,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_histogram_stat(
        &self,
        result_histogram_stat: &str,
        id: &str,
        directory_filter: &str,
        attribute_filter: &str,
        node_pool_filter: &str,
        disk_pool_filter: &str,
        tier_filter: &str,
        comp_report: i32,
        log_size_filter: i32,
        phys_size_filter: i32,
        path_ext_filter: &str,
        ctime_filter: i32,
        atime_filter: i32,
    ) -> Box<dyn Future<Item = crate::models::ResultHistogram, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("directory_filter", &directory_filter.to_string())
            .append_pair("attribute_filter", &attribute_filter.to_string())
            .append_pair("node_pool_filter", &node_pool_filter.to_string())
            .append_pair("disk_pool_filter", &disk_pool_filter.to_string())
            .append_pair("tier_filter", &tier_filter.to_string())
            .append_pair("comp_report", &comp_report.to_string())
            .append_pair("log_size_filter", &log_size_filter.to_string())
            .append_pair("phys_size_filter", &phys_size_filter.to_string())
            .append_pair("path_ext_filter", &path_ext_filter.to_string())
            .append_pair("ctime_filter", &ctime_filter.to_string())
            .append_pair("atime_filter", &atime_filter.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/histogram/{ResultHistogramStat}?{}",
            self.configuration.base_path,
            q,
            ResultHistogramStat = result_histogram_stat,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_top_dir(
        &self,
        result_top_dir_id: &str,
        id: &str,
        sort: &str,
        start: i32,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopDirs, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("start", &start.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("comp_report", &comp_report.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/top-dirs/{ResultTopDirId}?{}",
            self.configuration.base_path,
            q,
            ResultTopDirId = result_top_dir_id,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_top_dirs(
        &self,
        id: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopDirs, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/top-dirs",
            self.configuration.base_path,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_top_file(
        &self,
        result_top_file_id: &str,
        id: &str,
        sort: &str,
        start: i32,
        limit: i32,
        comp_report: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopFiles, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("start", &start.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("comp_report", &comp_report.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/top-files/{ResultTopFileId}?{}",
            self.configuration.base_path,
            q,
            ResultTopFileId = result_top_file_id,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_result_top_files(
        &self,
        id: &str,
    ) -> Box<dyn Future<Item = crate::models::ResultTopFiles, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/fsa/results/{Id}/top-files",
            self.configuration.base_path,
            Id = id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }
}
