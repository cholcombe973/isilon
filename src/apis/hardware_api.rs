/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct HardwareApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> HardwareApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> HardwareApiClient<C> {
        HardwareApiClient {
            configuration: configuration,
        }
    }
}

pub trait HardwareApi {
    fn create_hardware_tape_name(&self, hardware_tape_name: ::models::Empty, hardware_tape_name2: &str, lnn: &str, port: i32, timeout: f32, reconcile: bool) -> Box<Future<Item = ::models::CreateHardwareTapeNameResponse, Error = Error>>;
    fn delete_hardware_tape_name(&self, hardware_tape_name: &str) -> Box<Future<Item = (), Error = Error>>;
    fn get_hardware_fcport(&self, hardware_fcport_id: i32, lnn: &str) -> Box<Future<Item = ::models::HardwareFcports, Error = Error>>;
    fn get_hardware_fcports(&self, lnn: &str, limit: i32, resume: &str) -> Box<Future<Item = ::models::HardwareFcports, Error = Error>>;
    fn get_hardware_tapes(&self, node: &str, resume: &str, devname: &str, limit: i32, activepath: &str, _type: &str) -> Box<Future<Item = ::models::HardwareTapes, Error = Error>>;
    fn update_hardware_fcport(&self, hardware_fcport: ::models::HardwareFcport, hardware_fcport_id: i32, lnn: &str) -> Box<Future<Item = (), Error = Error>>;
    fn update_hardware_tape_name(&self, hardware_tape_name_params: ::models::HardwareTapeNameParams, hardware_tape_name: &str) -> Box<Future<Item = (), Error = Error>>;
}


impl<C: hyper::client::Connect>HardwareApi for HardwareApiClient<C> {
    fn create_hardware_tape_name(&self, hardware_tape_name: ::models::Empty, hardware_tape_name2: &str, lnn: &str, port: i32, timeout: f32, reconcile: bool) -> Box<Future<Item = ::models::CreateHardwareTapeNameResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("lnn", &lnn.to_string())
            .append_pair("port", &port.to_string())
            .append_pair("timeout", &timeout.to_string())
            .append_pair("reconcile", &reconcile.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/hardware/tape/{HardwareTapeName}{}", configuration.base_path, query, HardwareTapeName=hardware_tape_name2);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&hardware_tape_name).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateHardwareTapeNameResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn delete_hardware_tape_name(&self, hardware_tape_name: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/3/hardware/tape/{HardwareTapeName}", configuration.base_path, HardwareTapeName=hardware_tape_name);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn get_hardware_fcport(&self, hardware_fcport_id: i32, lnn: &str) -> Box<Future<Item = ::models::HardwareFcports, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("lnn", &lnn.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/hardware/fcports/{HardwareFcportId}{}", configuration.base_path, query, HardwareFcportId=hardware_fcport_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::HardwareFcports, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_hardware_fcports(&self, lnn: &str, limit: i32, resume: &str) -> Box<Future<Item = ::models::HardwareFcports, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("lnn", &lnn.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/hardware/fcports{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::HardwareFcports, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_hardware_tapes(&self, node: &str, resume: &str, devname: &str, limit: i32, activepath: &str, _type: &str) -> Box<Future<Item = ::models::HardwareTapes, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("node", &node.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("devname", &devname.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("activepath", &activepath.to_string())
            .append_pair("type", &_type.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/hardware/tapes{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::HardwareTapes, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn update_hardware_fcport(&self, hardware_fcport: ::models::HardwareFcport, hardware_fcport_id: i32, lnn: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("lnn", &lnn.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/hardware/fcports/{HardwareFcportId}{}", configuration.base_path, query, HardwareFcportId=hardware_fcport_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&hardware_fcport).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn update_hardware_tape_name(&self, hardware_tape_name_params: ::models::HardwareTapeNameParams, hardware_tape_name: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!("{}/platform/3/hardware/tape/{HardwareTapeName}", configuration.base_path, HardwareTapeName=hardware_tape_name);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&hardware_tape_name_params).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

}
