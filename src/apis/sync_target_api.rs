/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct SyncTargetApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SyncTargetApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SyncTargetApiClient<C> {
        SyncTargetApiClient {
            configuration: configuration,
        }
    }
}

pub trait SyncTargetApi {
    fn create_policies_policy_cancel_item(&self, policies_policy_cancel_item: ::models::Empty, policy: &str) -> Box<Future<Item = ::models::CreateResponse, Error = Error>>;
    fn get_reports_report_subreport(&self, reports_report_subreport_id: &str, rid: &str) -> Box<Future<Item = ::models::ReportsReportSubreports, Error = Error>>;
    fn get_reports_report_subreports(&self, rid: &str, sort: &str, resume: &str, newer_than: i32, state: &str, limit: i32, dir: &str) -> Box<Future<Item = ::models::ReportsReportSubreportsExtended, Error = Error>>;
}


impl<C: hyper::client::Connect>SyncTargetApi for SyncTargetApiClient<C> {
    fn create_policies_policy_cancel_item(&self, policies_policy_cancel_item: ::models::Empty, policy: &str) -> Box<Future<Item = ::models::CreateResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/1/sync/target/policies/{Policy}/cancel", configuration.base_path, Policy=policy);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&policies_policy_cancel_item).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_reports_report_subreport(&self, reports_report_subreport_id: &str, rid: &str) -> Box<Future<Item = ::models::ReportsReportSubreports, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/4/sync/target/reports/{Rid}/subreports/{ReportsReportSubreportId}", configuration.base_path, ReportsReportSubreportId=reports_report_subreport_id, Rid=rid);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::ReportsReportSubreports, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_reports_report_subreports(&self, rid: &str, sort: &str, resume: &str, newer_than: i32, state: &str, limit: i32, dir: &str) -> Box<Future<Item = ::models::ReportsReportSubreportsExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("newer_than", &newer_than.to_string())
            .append_pair("state", &state.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!("{}/platform/4/sync/target/reports/{Rid}/subreports{}", configuration.base_path, query, Rid=rid);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::ReportsReportSubreportsExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

}
