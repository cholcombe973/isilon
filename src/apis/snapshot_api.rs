/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct SnapshotApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SnapshotApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SnapshotApiClient<C> {
        SnapshotApiClient {
            configuration: configuration,
        }
    }
}

pub trait SnapshotApi {
    fn create_snapshot_alias(&self, snapshot_alias: ::models::SnapshotAliasCreateParams) -> Box<Future<Item = ::models::CreateSnapshotAliasResponse, Error = Error>>;
    fn create_snapshot_changelist(&self, snapshot_changelist: ::models::SnapshotChangelists) -> Box<Future<Item = ::models::CreateSnapshotChangelistResponse, Error = Error>>;
    fn create_snapshot_repstate(&self, snapshot_repstate: ::models::SnapshotRepstates) -> Box<Future<Item = ::models::CreateSnapshotRepstateResponse, Error = Error>>;
    fn create_snapshot_schedule(&self, snapshot_schedule: ::models::SnapshotScheduleCreateParams) -> Box<Future<Item = ::models::CreateSnapshotScheduleResponse, Error = Error>>;
    fn create_snapshot_snapshot(&self, snapshot_snapshot: ::models::SnapshotSnapshotCreateParams) -> Box<Future<Item = ::models::SnapshotSnapshotExtended, Error = Error>>;
    fn delete_snapshot_alias(&self, snapshot_alias_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_aliases(&self, ) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_changelist(&self, snapshot_changelist_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_repstate(&self, snapshot_repstate_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_schedule(&self, snapshot_schedule_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_schedules(&self, ) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_snapshot(&self, snapshot_snapshot_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn delete_snapshot_snapshots(&self, _type: &str, schedule: &str) -> Box<Future<Item = (), Error = Error>>;
    fn get_snapshot_alias(&self, snapshot_alias_id: &str) -> Box<Future<Item = ::models::SnapshotAliases, Error = Error>>;
    fn get_snapshot_changelist(&self, snapshot_changelist_id: &str, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotChangelists, Error = Error>>;
    fn get_snapshot_license(&self, ) -> Box<Future<Item = ::models::LicenseLicense, Error = Error>>;
    fn get_snapshot_pending(&self, limit: i32, begin: i32, schedule: &str, end: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotPending, Error = Error>>;
    fn get_snapshot_repstate(&self, snapshot_repstate_id: &str, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotRepstates, Error = Error>>;
    fn get_snapshot_schedule(&self, snapshot_schedule_id: &str) -> Box<Future<Item = ::models::SnapshotSchedules, Error = Error>>;
    fn get_snapshot_settings(&self, ) -> Box<Future<Item = ::models::SnapshotSettings, Error = Error>>;
    fn get_snapshot_snapshot(&self, snapshot_snapshot_id: &str) -> Box<Future<Item = ::models::SnapshotSnapshots, Error = Error>>;
    fn get_snapshot_snapshots_summary(&self, ) -> Box<Future<Item = ::models::SnapshotSnapshotsSummary, Error = Error>>;
    fn list_snapshot_aliases(&self, sort: &str, limit: i32, dir: &str, resume: &str) -> Box<Future<Item = ::models::SnapshotAliasesExtended, Error = Error>>;
    fn list_snapshot_changelists(&self, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotChangelistsExtended, Error = Error>>;
    fn list_snapshot_repstates(&self, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotRepstatesExtended, Error = Error>>;
    fn list_snapshot_schedules(&self, sort: &str, limit: i32, dir: &str, resume: &str) -> Box<Future<Item = ::models::SnapshotSchedulesExtended, Error = Error>>;
    fn list_snapshot_snapshots(&self, sort: &str, schedule: &str, resume: &str, state: &str, limit: i32, _type: &str, dir: &str) -> Box<Future<Item = ::models::SnapshotSnapshotsExtended, Error = Error>>;
    fn update_snapshot_alias(&self, snapshot_alias: ::models::SnapshotAlias, snapshot_alias_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn update_snapshot_schedule(&self, snapshot_schedule: ::models::SnapshotSchedule, snapshot_schedule_id: &str) -> Box<Future<Item = (), Error = Error>>;
    fn update_snapshot_settings(&self, snapshot_settings: ::models::SnapshotSettingsExtended) -> Box<Future<Item = (), Error = Error>>;
    fn update_snapshot_snapshot(&self, snapshot_snapshot: ::models::SnapshotSnapshot, snapshot_snapshot_id: &str) -> Box<Future<Item = (), Error = Error>>;
}


impl<C: hyper::client::Connect>SnapshotApi for SnapshotApiClient<C> {
    fn create_snapshot_alias(&self, snapshot_alias: ::models::SnapshotAliasCreateParams) -> Box<Future<Item = ::models::CreateSnapshotAliasResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/1/snapshot/aliases", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_alias).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateSnapshotAliasResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_snapshot_changelist(&self, snapshot_changelist: ::models::SnapshotChangelists) -> Box<Future<Item = ::models::CreateSnapshotChangelistResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/1/snapshot/changelists", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_changelist).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateSnapshotChangelistResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_snapshot_repstate(&self, snapshot_repstate: ::models::SnapshotRepstates) -> Box<Future<Item = ::models::CreateSnapshotRepstateResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/1/snapshot/repstates", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_repstate).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateSnapshotRepstateResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_snapshot_schedule(&self, snapshot_schedule: ::models::SnapshotScheduleCreateParams) -> Box<Future<Item = ::models::CreateSnapshotScheduleResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/3/snapshot/schedules", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_schedule).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateSnapshotScheduleResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_snapshot_snapshot(&self, snapshot_snapshot: ::models::SnapshotSnapshotCreateParams) -> Box<Future<Item = ::models::SnapshotSnapshotExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/1/snapshot/snapshots", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_snapshot).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSnapshotExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn delete_snapshot_alias(&self, snapshot_alias_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/1/snapshot/aliases/{SnapshotAliasId}", configuration.base_path, SnapshotAliasId=snapshot_alias_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_aliases(&self, ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/1/snapshot/aliases", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_changelist(&self, snapshot_changelist_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/1/snapshot/changelists/{SnapshotChangelistId}", configuration.base_path, SnapshotChangelistId=snapshot_changelist_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_repstate(&self, snapshot_repstate_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/1/snapshot/repstates/{SnapshotRepstateId}", configuration.base_path, SnapshotRepstateId=snapshot_repstate_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_schedule(&self, snapshot_schedule_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/3/snapshot/schedules/{SnapshotScheduleId}", configuration.base_path, SnapshotScheduleId=snapshot_schedule_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_schedules(&self, ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/3/snapshot/schedules", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_snapshot(&self, snapshot_snapshot_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/1/snapshot/snapshots/{SnapshotSnapshotId}", configuration.base_path, SnapshotSnapshotId=snapshot_snapshot_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_snapshot_snapshots(&self, _type: &str, schedule: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("type", &_type.to_string())
            .append_pair("schedule", &schedule.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/snapshots{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn get_snapshot_alias(&self, snapshot_alias_id: &str) -> Box<Future<Item = ::models::SnapshotAliases, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/1/snapshot/aliases/{SnapshotAliasId}", configuration.base_path, SnapshotAliasId=snapshot_alias_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotAliases, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_changelist(&self, snapshot_changelist_id: &str, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotChangelists, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("limit", &limit.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/changelists/{SnapshotChangelistId}{}", configuration.base_path, query, SnapshotChangelistId=snapshot_changelist_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotChangelists, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_license(&self, ) -> Box<Future<Item = ::models::LicenseLicense, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/5/snapshot/license", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::LicenseLicense, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_pending(&self, limit: i32, begin: i32, schedule: &str, end: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotPending, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("limit", &limit.to_string())
            .append_pair("begin", &begin.to_string())
            .append_pair("schedule", &schedule.to_string())
            .append_pair("end", &end.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/pending{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotPending, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_repstate(&self, snapshot_repstate_id: &str, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotRepstates, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("limit", &limit.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/repstates/{SnapshotRepstateId}{}", configuration.base_path, query, SnapshotRepstateId=snapshot_repstate_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotRepstates, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_schedule(&self, snapshot_schedule_id: &str) -> Box<Future<Item = ::models::SnapshotSchedules, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/3/snapshot/schedules/{SnapshotScheduleId}", configuration.base_path, SnapshotScheduleId=snapshot_schedule_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSchedules, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_settings(&self, ) -> Box<Future<Item = ::models::SnapshotSettings, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/1/snapshot/settings", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSettings, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_snapshot(&self, snapshot_snapshot_id: &str) -> Box<Future<Item = ::models::SnapshotSnapshots, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/1/snapshot/snapshots/{SnapshotSnapshotId}", configuration.base_path, SnapshotSnapshotId=snapshot_snapshot_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSnapshots, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_snapshot_snapshots_summary(&self, ) -> Box<Future<Item = ::models::SnapshotSnapshotsSummary, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/1/snapshot/snapshots-summary", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSnapshotsSummary, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn list_snapshot_aliases(&self, sort: &str, limit: i32, dir: &str, resume: &str) -> Box<Future<Item = ::models::SnapshotAliasesExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/aliases{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotAliasesExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn list_snapshot_changelists(&self, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotChangelistsExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("limit", &limit.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/changelists{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotChangelistsExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn list_snapshot_repstates(&self, limit: i32, resume: &str) -> Box<Future<Item = ::models::SnapshotRepstatesExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("limit", &limit.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/repstates{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotRepstatesExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn list_snapshot_schedules(&self, sort: &str, limit: i32, dir: &str, resume: &str) -> Box<Future<Item = ::models::SnapshotSchedulesExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/snapshot/schedules{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSchedulesExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn list_snapshot_snapshots(&self, sort: &str, schedule: &str, resume: &str, state: &str, limit: i32, _type: &str, dir: &str) -> Box<Future<Item = ::models::SnapshotSnapshotsExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("schedule", &schedule.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("state", &state.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("type", &_type.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/snapshot/snapshots{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::SnapshotSnapshotsExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn update_snapshot_alias(&self, snapshot_alias: ::models::SnapshotAlias, snapshot_alias_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!("{}/platform/1/snapshot/aliases/{SnapshotAliasId}", configuration.base_path, SnapshotAliasId=snapshot_alias_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_alias).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn update_snapshot_schedule(&self, snapshot_schedule: ::models::SnapshotSchedule, snapshot_schedule_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!("{}/platform/3/snapshot/schedules/{SnapshotScheduleId}", configuration.base_path, SnapshotScheduleId=snapshot_schedule_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_schedule).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn update_snapshot_settings(&self, snapshot_settings: ::models::SnapshotSettingsExtended) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!("{}/platform/1/snapshot/settings", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_settings).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn update_snapshot_snapshot(&self, snapshot_snapshot: ::models::SnapshotSnapshot, snapshot_snapshot_id: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!("{}/platform/1/snapshot/snapshots/{SnapshotSnapshotId}", configuration.base_path, SnapshotSnapshotId=snapshot_snapshot_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&snapshot_snapshot).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

}
