/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct NetworkGroupnetsSubnetsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> NetworkGroupnetsSubnetsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> NetworkGroupnetsSubnetsApiClient<C> {
        NetworkGroupnetsSubnetsApiClient {
            configuration: configuration,
        }
    }
}

pub trait NetworkGroupnetsSubnetsApi {
    fn create_pools_pool_rebalance_ip(&self, pools_pool_rebalance_ip: ::models::Empty, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::Empty, Error = Error>>;
    fn create_pools_pool_rule(&self, pools_pool_rule: ::models::PoolsPoolRuleCreateParams, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::CreateResponse, Error = Error>>;
    fn create_pools_pool_sc_resume_node(&self, pools_pool_sc_resume_node: ::models::PoolsPoolScResumeNode, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::Empty, Error = Error>>;
    fn create_pools_pool_sc_suspend_node(&self, pools_pool_sc_suspend_node: ::models::PoolsPoolScResumeNode, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::Empty, Error = Error>>;
    fn delete_pools_pool_rule(&self, pools_pool_rule_id: &str, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = (), Error = Error>>;
    fn get_pools_pool_interfaces(&self, groupnet: &str, subnet: &str, pool: &str, sort: &str, resume: &str, limit: i32, dir: &str, lnns: &str) -> Box<Future<Item = ::models::PoolsPoolInterfaces, Error = Error>>;
    fn get_pools_pool_rule(&self, pools_pool_rule_id: &str, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::PoolsPoolRules, Error = Error>>;
    fn list_pools_pool_rules(&self, groupnet: &str, subnet: &str, pool: &str, sort: &str, limit: i32, dir: &str, resume: &str) -> Box<Future<Item = ::models::PoolsPoolRulesExtended, Error = Error>>;
    fn update_pools_pool_rule(&self, pools_pool_rule: ::models::PoolsPoolRule, pools_pool_rule_id: &str, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = (), Error = Error>>;
}


impl<C: hyper::client::Connect>NetworkGroupnetsSubnetsApi for NetworkGroupnetsSubnetsApiClient<C> {
    fn create_pools_pool_rebalance_ip(&self, pools_pool_rebalance_ip: ::models::Empty, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::Empty, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rebalance-ips", configuration.base_path, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&pools_pool_rebalance_ip).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::Empty, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_pools_pool_rule(&self, pools_pool_rule: ::models::PoolsPoolRuleCreateParams, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::CreateResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules", configuration.base_path, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&pools_pool_rule).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::CreateResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_pools_pool_sc_resume_node(&self, pools_pool_sc_resume_node: ::models::PoolsPoolScResumeNode, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::Empty, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-resume-nodes", configuration.base_path, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&pools_pool_sc_resume_node).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::Empty, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn create_pools_pool_sc_suspend_node(&self, pools_pool_sc_suspend_node: ::models::PoolsPoolScResumeNode, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::Empty, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-suspend-nodes", configuration.base_path, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&pools_pool_sc_suspend_node).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::Empty, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn delete_pools_pool_rule(&self, pools_pool_rule_id: &str, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}", configuration.base_path, PoolsPoolRuleId=pools_pool_rule_id, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn get_pools_pool_interfaces(&self, groupnet: &str, subnet: &str, pool: &str, sort: &str, resume: &str, limit: i32, dir: &str, lnns: &str) -> Box<Future<Item = ::models::PoolsPoolInterfaces, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("lnns", &lnns.to_string())
            .finish();
        let uri_str = format!("{}/platform/4/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/interfaces{}", configuration.base_path, query, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::PoolsPoolInterfaces, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_pools_pool_rule(&self, pools_pool_rule_id: &str, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = ::models::PoolsPoolRules, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}", configuration.base_path, PoolsPoolRuleId=pools_pool_rule_id, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::PoolsPoolRules, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn list_pools_pool_rules(&self, groupnet: &str, subnet: &str, pool: &str, sort: &str, limit: i32, dir: &str, resume: &str) -> Box<Future<Item = ::models::PoolsPoolRulesExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules{}", configuration.base_path, query, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::PoolsPoolRulesExtended, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn update_pools_pool_rule(&self, pools_pool_rule: ::models::PoolsPoolRule, pools_pool_rule_id: &str, groupnet: &str, subnet: &str, pool: &str) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!("{}/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}", configuration.base_path, PoolsPoolRuleId=pools_pool_rule_id, Groupnet=groupnet, Subnet=subnet, Pool=pool);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());


        let serialized = serde_json::to_string(&pools_pool_rule).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|_| futures::future::ok(()))
        )
    }

}
