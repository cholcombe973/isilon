/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, put, query, Error};

pub struct CloudApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> CloudApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CloudApiClient<C> {
        CloudApiClient {
            configuration: configuration,
        }
    }
}

pub trait CloudApi {
    fn create_cloud_access_item(
        &self,
        cloud_access_item: crate::models::CloudAccessItem,
    ) -> Box<dyn Future<Item = crate::models::Empty, Error = Error>>;
    fn create_cloud_account(
        &self,
        cloud_account: crate::models::CloudAccountCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudAccountResponse, Error = Error>>;
    fn create_cloud_job(
        &self,
        cloud_job: crate::models::CloudJobCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudJobResponse, Error = Error>>;
    fn create_cloud_pool(
        &self,
        cloud_pool: crate::models::CloudPoolCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudPoolResponse, Error = Error>>;
    fn create_cloud_proxy(
        &self,
        cloud_proxy: crate::models::CloudProxyCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudProxyResponse, Error = Error>>;
    fn create_settings_encryption_key_item(
        &self,
        settings_encryption_key_item: crate::models::Empty,
    ) -> Box<dyn Future<Item = crate::models::Empty, Error = Error>>;
    fn create_settings_reporting_eula_item(
        &self,
        settings_reporting_eula_item: crate::models::SettingsReportingEulaItem,
    ) -> Box<dyn Future<Item = crate::models::SettingsReportingEulaItem, Error = Error>>;
    fn delete_cloud_access_guid(
        &self,
        cloud_access_guid: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_cloud_account(
        &self,
        cloud_account_id: &str,
        acknowledge_force_delete: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_cloud_pool(
        &self,
        cloud_pool_id: &str,
        acknowledge_force_delete: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_cloud_proxy(&self, cloud_proxy_id: &str)
        -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_settings_reporting_eula(&self) -> Box<dyn Future<Item = (), Error = Error>>;
    fn get_cloud_access_guid(
        &self,
        cloud_access_guid: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccess, Error = Error>>;
    fn get_cloud_account(
        &self,
        cloud_account_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccounts, Error = Error>>;
    fn get_cloud_job(
        &self,
        cloud_job_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudJobs, Error = Error>>;
    fn get_cloud_jobs_file(
        &self,
        cloud_jobs_file_id: &str,
        sort: &str,
        resume: &str,
        batch: bool,
        limit: i32,
        page: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudJobsFiles, Error = Error>>;
    fn get_cloud_pool(
        &self,
        cloud_pool_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudPools, Error = Error>>;
    fn get_cloud_proxy(
        &self,
        cloud_proxy_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudProxies, Error = Error>>;
    fn get_cloud_settings(
        &self,
    ) -> Box<dyn Future<Item = crate::models::CloudSettings, Error = Error>>;
    fn list_cloud_access(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccessExtended, Error = Error>>;
    fn list_cloud_accounts(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccountsExtended, Error = Error>>;
    fn list_cloud_jobs(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudJobsExtended, Error = Error>>;
    fn list_cloud_pools(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudPoolsExtended, Error = Error>>;
    fn list_cloud_proxies(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudProxiesExtended, Error = Error>>;
    fn list_settings_reporting_eula(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsReportingEulaItem, Error = Error>>;
    fn update_cloud_account(
        &self,
        cloud_account: crate::models::CloudAccount,
        cloud_account_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_cloud_job(
        &self,
        cloud_job: crate::models::CloudJob,
        cloud_job_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_cloud_pool(
        &self,
        cloud_pool: crate::models::CloudPool,
        cloud_pool_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_cloud_proxy(
        &self,
        cloud_proxy: crate::models::CloudProxy,
        cloud_proxy_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_cloud_settings(
        &self,
        cloud_settings: crate::models::CloudSettingsSettings,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
}

impl<C: hyper::client::connect::Connect + 'static> CloudApi for CloudApiClient<C> {
    fn create_cloud_access_item(
        &self,
        cloud_access_item: crate::models::CloudAccessItem,
    ) -> Box<dyn Future<Item = crate::models::Empty, Error = Error>> {
        let uri_str = format!("{}/platform/3/cloud/access", self.configuration.base_path);

        query(
            self.configuration.borrow(),
            &uri_str,
            &cloud_access_item,
            hyper::Method::POST,
        )
    }

    fn create_cloud_account(
        &self,
        cloud_account: crate::models::CloudAccountCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudAccountResponse, Error = Error>> {
        let uri_str = format!("{}/platform/4/cloud/accounts", self.configuration.base_path);

        query(
            self.configuration.borrow(),
            &uri_str,
            &cloud_account,
            hyper::Method::POST,
        )
    }

    fn create_cloud_job(
        &self,
        cloud_job: crate::models::CloudJobCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudJobResponse, Error = Error>> {
        let uri_str = format!("{}/platform/3/cloud/jobs", self.configuration.base_path);

        query(
            self.configuration.borrow(),
            &uri_str,
            &cloud_job,
            hyper::Method::POST,
        )
    }

    fn create_cloud_pool(
        &self,
        cloud_pool: crate::models::CloudPoolCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudPoolResponse, Error = Error>> {
        let uri_str = format!("{}/platform/3/cloud/pools", self.configuration.base_path);

        query(
            self.configuration.borrow(),
            &uri_str,
            &cloud_pool,
            hyper::Method::POST,
        )
    }

    fn create_cloud_proxy(
        &self,
        cloud_proxy: crate::models::CloudProxyCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateCloudProxyResponse, Error = Error>> {
        let uri_str = format!("{}/platform/4/cloud/proxies", self.configuration.base_path);

        query(
            self.configuration.borrow(),
            &uri_str,
            &cloud_proxy,
            hyper::Method::POST,
        )
    }

    fn create_settings_encryption_key_item(
        &self,
        settings_encryption_key_item: crate::models::Empty,
    ) -> Box<dyn Future<Item = crate::models::Empty, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/settings/encryption-key",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &settings_encryption_key_item,
            hyper::Method::POST,
        )
    }

    fn create_settings_reporting_eula_item(
        &self,
        settings_reporting_eula_item: crate::models::SettingsReportingEulaItem,
    ) -> Box<dyn Future<Item = crate::models::SettingsReportingEulaItem, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/settings/reporting-eula",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &settings_reporting_eula_item,
            hyper::Method::POST,
        )
    }

    fn delete_cloud_access_guid(
        &self,
        cloud_access_guid: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/access/{CloudAccessGuid}",
            self.configuration.base_path,
            CloudAccessGuid = cloud_access_guid
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_cloud_account(
        &self,
        cloud_account_id: &str,
        acknowledge_force_delete: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair(
                "acknowledge_force_delete",
                &acknowledge_force_delete.to_string(),
            )
            .finish();
        let uri_str = format!(
            "{}/platform/4/cloud/accounts/{CloudAccountId}?{}",
            self.configuration.base_path,
            q,
            CloudAccountId = cloud_account_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_cloud_pool(
        &self,
        cloud_pool_id: &str,
        acknowledge_force_delete: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair(
                "acknowledge_force_delete",
                &acknowledge_force_delete.to_string(),
            )
            .finish();
        let uri_str = format!(
            "{}/platform/3/cloud/pools/{CloudPoolId}?{}",
            self.configuration.base_path,
            q,
            CloudPoolId = cloud_pool_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_cloud_proxy(
        &self,
        cloud_proxy_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/4/cloud/proxies/{CloudProxyId}",
            self.configuration.base_path,
            CloudProxyId = cloud_proxy_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_settings_reporting_eula(&self) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/settings/reporting-eula",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn get_cloud_access_guid(
        &self,
        cloud_access_guid: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccess, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/access/{CloudAccessGuid}",
            self.configuration.base_path,
            CloudAccessGuid = cloud_access_guid
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cloud_account(
        &self,
        cloud_account_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccounts, Error = Error>> {
        let uri_str = format!(
            "{}/platform/4/cloud/accounts/{CloudAccountId}",
            self.configuration.base_path,
            CloudAccountId = cloud_account_id
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cloud_job(
        &self,
        cloud_job_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudJobs, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/jobs/{CloudJobId}",
            self.configuration.base_path,
            CloudJobId = cloud_job_id
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cloud_jobs_file(
        &self,
        cloud_jobs_file_id: &str,
        sort: &str,
        resume: &str,
        batch: bool,
        limit: i32,
        page: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudJobsFiles, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("batch", &batch.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("page", &page.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/cloud/jobs-files/{CloudJobsFileId}?{}",
            self.configuration.base_path,
            q,
            CloudJobsFileId = cloud_jobs_file_id
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cloud_pool(
        &self,
        cloud_pool_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudPools, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/pools/{CloudPoolId}",
            self.configuration.base_path,
            CloudPoolId = cloud_pool_id
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cloud_proxy(
        &self,
        cloud_proxy_id: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudProxies, Error = Error>> {
        let uri_str = format!(
            "{}/platform/4/cloud/proxies/{CloudProxyId}",
            self.configuration.base_path,
            CloudProxyId = cloud_proxy_id
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cloud_settings(
        &self,
    ) -> Box<dyn Future<Item = crate::models::CloudSettings, Error = Error>> {
        let uri_str = format!("{}/platform/3/cloud/settings", self.configuration.base_path);

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_cloud_access(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccessExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/cloud/access?{}",
            self.configuration.base_path, q
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_cloud_accounts(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudAccountsExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/cloud/accounts?{}",
            self.configuration.base_path, q
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_cloud_jobs(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudJobsExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/cloud/jobs?{}",
            self.configuration.base_path, q
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_cloud_pools(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudPoolsExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/cloud/pools?{}",
            self.configuration.base_path, q
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_cloud_proxies(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
    ) -> Box<dyn Future<Item = crate::models::CloudProxiesExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/cloud/proxies?{}",
            self.configuration.base_path, q
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_settings_reporting_eula(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsReportingEulaItem, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/cloud/settings/reporting-eula",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn update_cloud_account(
        &self,
        cloud_account: crate::models::CloudAccount,
        cloud_account_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/4/cloud/accounts/{CloudAccountId}",
            self.configuration.base_path,
            CloudAccountId = cloud_account_id
        );
        put(self.configuration.borrow(), &uri, &cloud_account)
    }

    fn update_cloud_job(
        &self,
        cloud_job: crate::models::CloudJob,
        cloud_job_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/3/cloud/jobs/{CloudJobId}",
            self.configuration.base_path,
            CloudJobId = cloud_job_id
        );
        put(self.configuration.borrow(), &uri, &cloud_job)
    }

    fn update_cloud_pool(
        &self,
        cloud_pool: crate::models::CloudPool,
        cloud_pool_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/3/cloud/pools/{CloudPoolId}",
            self.configuration.base_path,
            CloudPoolId = cloud_pool_id
        );
        put(self.configuration.borrow(), &uri, &cloud_pool)
    }

    fn update_cloud_proxy(
        &self,
        cloud_proxy: crate::models::CloudProxy,
        cloud_proxy_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/4/cloud/proxies/{CloudProxyId}",
            self.configuration.base_path,
            CloudProxyId = cloud_proxy_id
        );
        put(self.configuration.borrow(), &uri, &cloud_proxy)
    }

    fn update_cloud_settings(
        &self,
        cloud_settings: crate::models::CloudSettingsSettings,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!("{}/platform/3/cloud/settings", self.configuration.base_path);
        put(self.configuration.borrow(), &uri, &cloud_settings)
    }
}
