/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, query, Error};

pub struct HardeningApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> HardeningApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> HardeningApiClient<C> {
        HardeningApiClient {
            configuration: configuration,
        }
    }
}

pub trait HardeningApi {
    fn create_hardening_apply_item(
        &self,
        hardening_apply_item: crate::models::HardeningApplyItem,
    ) -> Result<crate::models::CreateHardeningApplyItemResponse, Error>;
    fn create_hardening_resolve_item(
        &self,
        hardening_resolve_item: crate::models::HardeningResolveItem,
        accept: bool,
    ) -> Result<crate::models::CreateHardeningResolveItemResponse, Error>;
    fn create_hardening_revert_item(
        &self,
        hardening_revert_item: crate::models::Empty,
        force: bool,
    ) -> Result<crate::models::CreateHardeningRevertItemResponse, Error>;
    fn get_hardening_state(
        &self,
    ) -> Result<crate::models::HardeningState, Error>;
    fn get_hardening_status(
        &self,
    ) -> Result<crate::models::HardeningStatus, Error>;
}

impl<C: hyper::client::connect::Connect + 'static + std::marker::Sync + std::marker::Send + Clone> HardeningApi for HardeningApiClient<C> {
    fn create_hardening_apply_item(
        &self,
        hardening_apply_item: crate::models::HardeningApplyItem,
    ) -> Result<crate::models::CreateHardeningApplyItemResponse, Error>
    {
        let uri_str = format!(
            "{}/platform/3/hardening/apply",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &hardening_apply_item,
            hyper::Method::POST,
        )
    }

    fn create_hardening_resolve_item(
        &self,
        hardening_resolve_item: crate::models::HardeningResolveItem,
        accept: bool,
    ) -> Result<crate::models::CreateHardeningResolveItemResponse, Error>
    {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("accept", &accept.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/hardening/resolve?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &hardening_resolve_item,
            hyper::Method::POST,
        )
    }

    fn create_hardening_revert_item(
        &self,
        hardening_revert_item: crate::models::Empty,
        force: bool,
    ) -> Result<crate::models::CreateHardeningRevertItemResponse, Error>
    {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/hardening/revert?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &hardening_revert_item,
            hyper::Method::POST,
        )
    }

    fn get_hardening_state(
        &self,
    ) -> Result<crate::models::HardeningState, Error> {
        let uri_str = format!(
            "{}/platform/3/hardening/state",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_hardening_status(
        &self,
    ) -> Result<crate::models::HardeningStatus, Error> {
        let uri_str = format!(
            "{}/platform/3/hardening/status",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }
}
