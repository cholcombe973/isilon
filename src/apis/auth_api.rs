/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, put, query, Error};

pub struct AuthApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> AuthApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuthApiClient<C> {
        AuthApiClient {
            configuration: configuration,
        }
    }
}

pub trait AuthApi {
    fn create_auth_cache_item(
        &self,
        auth_cache_item: crate::models::AuthCacheItem,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_auth_group(
        &self,
        auth_group: crate::models::AuthGroupCreateParams,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_auth_refresh_item(
        &self,
        auth_refresh_item: crate::models::Empty,
    ) -> Box<dyn Future<Item = crate::models::CreateAuthRefreshItemResponse, Error = Error>>;
    fn create_auth_role(
        &self,
        auth_role: crate::models::AuthRoleCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_auth_user(
        &self,
        auth_user: crate::models::AuthUserCreateParams,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_mapping_identity(
        &self,
        mapping_identity: crate::models::MappingIdentityCreateParams,
        var_2way: bool,
        zone: &str,
        replace: bool,
    ) -> Box<dyn Future<Item = crate::models::Empty, Error = Error>>;
    fn create_mapping_identity_0(
        &self,
        mapping_identity: crate::models::Empty,
        mapping_identity_id: &str,
        _type: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingIdentities, Error = Error>>;
    fn create_providers_ads_item(
        &self,
        providers_ads_item: crate::models::ProvidersAdsItem,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_providers_file_item(
        &self,
        providers_file_item: crate::models::ProvidersFileItem,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_providers_krb5_item(
        &self,
        providers_krb5_item: crate::models::ProvidersKrb5Item,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_providers_ldap_item(
        &self,
        providers_ldap_item: crate::models::ProvidersLdapItem,
        force: bool,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_providers_nis_item(
        &self,
        providers_nis_item: crate::models::ProvidersNisItem,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_settings_krb5_domain(
        &self,
        settings_krb5_domain: crate::models::SettingsKrb5DomainCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn create_settings_krb5_realm(
        &self,
        settings_krb5_realm: crate::models::SettingsKrb5RealmCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>>;
    fn delete_auth_group(
        &self,
        auth_group_id: &str,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_auth_groups(
        &self,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_auth_role(&self, auth_role_id: &str) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_auth_user(
        &self,
        auth_user_id: &str,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_auth_users(
        &self,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_mapping_identities(
        &self,
        filter: &str,
        zone: &str,
        remove: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_mapping_identity(
        &self,
        mapping_identity_id: &str,
        zone: &str,
        var_2way: bool,
        target: &str,
        remove: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_providers_ads_by_id(
        &self,
        providers_ads_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_providers_file_by_id(
        &self,
        providers_file_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_providers_krb5_by_id(
        &self,
        providers_krb5_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_providers_ldap_by_id(
        &self,
        providers_ldap_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_providers_local_by_id(
        &self,
        providers_local_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_providers_nis_by_id(
        &self,
        providers_nis_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_settings_krb5_domain(
        &self,
        settings_krb5_domain_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn delete_settings_krb5_realm(
        &self,
        settings_krb5_realm_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn get_auth_access_user(
        &self,
        auth_access_user: &str,
        path: &str,
        share: &str,
        zone: &str,
        numeric: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthAccess, Error = Error>>;
    fn get_auth_group(
        &self,
        auth_group_id: &str,
        cached: bool,
        resolve_names: bool,
        query_member_of: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthGroups, Error = Error>>;
    fn get_auth_id(&self) -> Box<dyn Future<Item = crate::models::AuthId, Error = Error>>;
    fn get_auth_ldap_template(
        &self,
        auth_ldap_template_id: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthLdapTemplates, Error = Error>>;
    fn get_auth_ldap_templates(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthLdapTemplatesExtended, Error = Error>>;
    fn get_auth_log_level(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthLogLevel, Error = Error>>;
    fn get_auth_netgroup(
        &self,
        auth_netgroup_id: &str,
        ignore_errors: bool,
        recursive: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthNetgroups, Error = Error>>;
    fn get_auth_privileges(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthPrivileges, Error = Error>>;
    fn get_auth_role(
        &self,
        auth_role_id: &str,
        resolve_names: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthRoles, Error = Error>>;
    fn get_auth_shells(&self) -> Box<dyn Future<Item = crate::models::AuthShells, Error = Error>>;
    fn get_auth_user(
        &self,
        auth_user_id: &str,
        cached: bool,
        resolve_names: bool,
        query_member_of: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthUsers, Error = Error>>;
    fn get_auth_wellknown(
        &self,
        auth_wellknown_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthWellknowns, Error = Error>>;
    fn get_auth_wellknowns(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthWellknowns, Error = Error>>;
    fn get_mapping_dump(
        &self,
        nocreate: bool,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingDump, Error = Error>>;
    fn get_mapping_identity(
        &self,
        mapping_identity_id: &str,
        nocreate: bool,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingIdentities, Error = Error>>;
    fn get_mapping_users_lookup(
        &self,
        primary_gid: i32,
        uid: i32,
        zone: &str,
        gid: Vec<i32>,
        user: &str,
        kerberos_principal: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingUsersLookup, Error = Error>>;
    fn get_mapping_users_rules(
        &self,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingUsersRules, Error = Error>>;
    fn get_providers_ads_by_id(
        &self,
        providers_ads_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersAds, Error = Error>>;
    fn get_providers_file_by_id(
        &self,
        providers_file_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersFile, Error = Error>>;
    fn get_providers_krb5_by_id(
        &self,
        providers_krb5_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersKrb5, Error = Error>>;
    fn get_providers_ldap_by_id(
        &self,
        providers_ldap_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLdap, Error = Error>>;
    fn get_providers_local(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLocal, Error = Error>>;
    fn get_providers_local_by_id(
        &self,
        providers_local_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLocal, Error = Error>>;
    fn get_providers_nis_by_id(
        &self,
        providers_nis_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersNis, Error = Error>>;
    fn get_providers_summary(
        &self,
        groupnet: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersSummary, Error = Error>>;
    fn get_settings_acls(
        &self,
        preset: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsAcls, Error = Error>>;
    fn get_settings_global(
        &self,
        scope: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsGlobal, Error = Error>>;
    fn get_settings_krb5_defaults(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Defaults, Error = Error>>;
    fn get_settings_krb5_domain(
        &self,
        settings_krb5_domain_id: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Domains, Error = Error>>;
    fn get_settings_krb5_realm(
        &self,
        settings_krb5_realm_id: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Realms, Error = Error>>;
    fn get_settings_mapping(
        &self,
        scope: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsMapping, Error = Error>>;
    fn list_auth_groups(
        &self,
        domain: &str,
        zone: &str,
        resume: &str,
        cached: bool,
        resolve_names: bool,
        filter: &str,
        limit: i32,
        provider: &str,
        query_member_of: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthGroupsExtended, Error = Error>>;
    fn list_auth_roles(
        &self,
        sort: &str,
        resolve_names: bool,
        limit: i32,
        dir: &str,
        resume: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthRolesExtended, Error = Error>>;
    fn list_auth_users(
        &self,
        domain: &str,
        zone: &str,
        resume: &str,
        cached: bool,
        resolve_names: bool,
        filter: &str,
        limit: i32,
        provider: &str,
        query_member_of: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthUsersExtended, Error = Error>>;
    fn list_providers_ads(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersAdsExtended, Error = Error>>;
    fn list_providers_file(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersFile, Error = Error>>;
    fn list_providers_krb5(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersKrb5Extended, Error = Error>>;
    fn list_providers_ldap(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLdap, Error = Error>>;
    fn list_providers_nis(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersNisExtended, Error = Error>>;
    fn list_settings_krb5_domains(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Domains, Error = Error>>;
    fn list_settings_krb5_realms(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Realms, Error = Error>>;
    fn update_auth_group(
        &self,
        auth_group: crate::models::AuthGroup,
        auth_group_id: &str,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_auth_log_level(
        &self,
        auth_log_level: crate::models::AuthLogLevelExtended,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_auth_role(
        &self,
        auth_role: crate::models::AuthRole,
        auth_role_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_auth_user(
        &self,
        auth_user: crate::models::AuthUser,
        auth_user_id: &str,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_mapping_import(
        &self,
        mapping_import: crate::models::MappingImport,
        zone: &str,
        replace: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_mapping_users_rules(
        &self,
        mapping_users_rules: crate::models::MappingUsersRulesExtended,
        zone: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_providers_ads_by_id(
        &self,
        providers_ads_id_params: crate::models::ProvidersAdsIdParams,
        providers_ads_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_providers_file_by_id(
        &self,
        providers_file_id_params: crate::models::ProvidersFileIdParams,
        providers_file_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_providers_krb5_by_id(
        &self,
        providers_krb5_id_params: crate::models::ProvidersKrb5IdParams,
        providers_krb5_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_providers_ldap_by_id(
        &self,
        providers_ldap_id_params: crate::models::ProvidersLdapIdParams,
        providers_ldap_id: &str,
        force: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_providers_local_by_id(
        &self,
        providers_local_id_params: crate::models::ProvidersLocalIdParams,
        providers_local_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_providers_nis_by_id(
        &self,
        providers_nis_id_params: crate::models::ProvidersNisIdParams,
        providers_nis_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_settings_acls(
        &self,
        settings_acls: crate::models::SettingsAclsExtended,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_settings_global(
        &self,
        settings_global: crate::models::SettingsGlobalGlobalSettings,
        zone: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_settings_krb5_defaults(
        &self,
        settings_krb5_defaults: crate::models::SettingsKrb5DefaultsKrb5Settings,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_settings_krb5_domain(
        &self,
        settings_krb5_domain: crate::models::SettingsKrb5Domain,
        settings_krb5_domain_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_settings_krb5_realm(
        &self,
        settings_krb5_realm: crate::models::SettingsKrb5Realm,
        settings_krb5_realm_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
    fn update_settings_mapping(
        &self,
        settings_mapping: crate::models::SettingsMappingMappingSettings,
        zone: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>>;
}

impl<C: hyper::client::connect::Connect + 'static> AuthApi for AuthApiClient<C> {
    fn create_auth_cache_item(
        &self,
        auth_cache_item: crate::models::AuthCacheItem,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/auth/cache?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &auth_cache_item,
            hyper::Method::POST,
        )
    }

    fn create_auth_group(
        &self,
        auth_group: crate::models::AuthGroupCreateParams,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/groups?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &auth_group,
            hyper::Method::POST,
        )
    }

    fn create_auth_refresh_item(
        &self,
        auth_refresh_item: crate::models::Empty,
    ) -> Box<dyn Future<Item = crate::models::CreateAuthRefreshItemResponse, Error = Error>> {
        let uri_str = format!("{}/platform/3/auth/refresh", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &auth_refresh_item,
            hyper::Method::POST,
        )
    }

    fn create_auth_role(
        &self,
        auth_role: crate::models::AuthRoleCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!("{}/platform/1/auth/roles", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &auth_role,
            hyper::Method::POST,
        )
    }

    fn create_auth_user(
        &self,
        auth_user: crate::models::AuthUserCreateParams,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/users?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &auth_user,
            hyper::Method::POST,
        )
    }

    fn create_mapping_identity(
        &self,
        mapping_identity: crate::models::MappingIdentityCreateParams,
        var_2way: bool,
        zone: &str,
        replace: bool,
    ) -> Box<dyn Future<Item = crate::models::Empty, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("2way", &var_2way.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("replace", &replace.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/identities?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &mapping_identity,
            hyper::Method::POST,
        )
    }

    fn create_mapping_identity_0(
        &self,
        mapping_identity: crate::models::Empty,
        mapping_identity_id: &str,
        _type: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingIdentities, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("type", &_type.to_string())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/identities/{MappingIdentityId}?{}",
            self.configuration.base_path,
            q,
            MappingIdentityId = mapping_identity_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &mapping_identity,
            hyper::Method::POST,
        )
    }

    fn create_providers_ads_item(
        &self,
        providers_ads_item: crate::models::ProvidersAdsItem,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/auth/providers/ads",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &providers_ads_item,
            hyper::Method::POST,
        )
    }

    fn create_providers_file_item(
        &self,
        providers_file_item: crate::models::ProvidersFileItem,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/providers/file",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &providers_file_item,
            hyper::Method::POST,
        )
    }

    fn create_providers_krb5_item(
        &self,
        providers_krb5_item: crate::models::ProvidersKrb5Item,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/auth/providers/krb5",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &providers_krb5_item,
            hyper::Method::POST,
        )
    }

    fn create_providers_ldap_item(
        &self,
        providers_ldap_item: crate::models::ProvidersLdapItem,
        force: bool,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/auth/providers/ldap?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &providers_ldap_item,
            hyper::Method::POST,
        )
    }

    fn create_providers_nis_item(
        &self,
        providers_nis_item: crate::models::ProvidersNisItem,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/auth/providers/nis",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &providers_nis_item,
            hyper::Method::POST,
        )
    }

    fn create_settings_krb5_domain(
        &self,
        settings_krb5_domain: crate::models::SettingsKrb5DomainCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/domains",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &settings_krb5_domain,
            hyper::Method::POST,
        )
    }

    fn create_settings_krb5_realm(
        &self,
        settings_krb5_realm: crate::models::SettingsKrb5RealmCreateParams,
    ) -> Box<dyn Future<Item = crate::models::CreateResponse, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/realms",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &settings_krb5_realm,
            hyper::Method::POST,
        )
    }

    fn delete_auth_group(
        &self,
        auth_group_id: &str,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("cached", &cached.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/groups/{AuthGroupId}?{}",
            self.configuration.base_path,
            q,
            AuthGroupId = auth_group_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_auth_groups(
        &self,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("cached", &cached.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/groups?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_auth_role(&self, auth_role_id: &str) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/roles/{AuthRoleId}",
            self.configuration.base_path,
            AuthRoleId = auth_role_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_auth_user(
        &self,
        auth_user_id: &str,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("cached", &cached.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/users/{AuthUserId}?{}",
            self.configuration.base_path,
            q,
            AuthUserId = auth_user_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_auth_users(
        &self,
        cached: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("cached", &cached.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/users?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_mapping_identities(
        &self,
        filter: &str,
        zone: &str,
        remove: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("filter", &filter.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("remove", &remove.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/identities?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_mapping_identity(
        &self,
        mapping_identity_id: &str,
        zone: &str,
        var_2way: bool,
        target: &str,
        remove: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .append_pair("2way", &var_2way.to_string())
            .append_pair("target", &target.to_string())
            .append_pair("remove", &remove.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/identities/{MappingIdentityId}?{}",
            self.configuration.base_path,
            q,
            MappingIdentityId = mapping_identity_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_providers_ads_by_id(
        &self,
        providers_ads_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/auth/providers/ads/{ProvidersAdsId}",
            self.configuration.base_path,
            ProvidersAdsId = providers_ads_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_providers_file_by_id(
        &self,
        providers_file_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/providers/file/{ProvidersFileId}",
            self.configuration.base_path,
            ProvidersFileId = providers_file_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_providers_krb5_by_id(
        &self,
        providers_krb5_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/auth/providers/krb5/{ProvidersKrb5Id}",
            self.configuration.base_path,
            ProvidersKrb5Id = providers_krb5_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_providers_ldap_by_id(
        &self,
        providers_ldap_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/4/auth/providers/ldap/{ProvidersLdapId}",
            self.configuration.base_path,
            ProvidersLdapId = providers_ldap_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_providers_local_by_id(
        &self,
        providers_local_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/providers/local/{ProvidersLocalId}",
            self.configuration.base_path,
            ProvidersLocalId = providers_local_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_providers_nis_by_id(
        &self,
        providers_nis_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/3/auth/providers/nis/{ProvidersNisId}",
            self.configuration.base_path,
            ProvidersNisId = providers_nis_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_settings_krb5_domain(
        &self,
        settings_krb5_domain_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}",
            self.configuration.base_path,
            SettingsKrb5DomainId = settings_krb5_domain_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_settings_krb5_realm(
        &self,
        settings_krb5_realm_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}",
            self.configuration.base_path,
            SettingsKrb5RealmId = settings_krb5_realm_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn get_auth_access_user(
        &self,
        auth_access_user: &str,
        path: &str,
        share: &str,
        zone: &str,
        numeric: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthAccess, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("path", &path.to_string())
            .append_pair("share", &share.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("numeric", &numeric.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/access/{AuthAccessUser}?{}",
            self.configuration.base_path,
            q,
            AuthAccessUser = auth_access_user
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_group(
        &self,
        auth_group_id: &str,
        cached: bool,
        resolve_names: bool,
        query_member_of: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthGroups, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("cached", &cached.to_string())
            .append_pair("resolve_names", &resolve_names.to_string())
            .append_pair("query_member_of", &query_member_of.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/groups/{AuthGroupId}?{}",
            self.configuration.base_path,
            q,
            AuthGroupId = auth_group_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_id(&self) -> Box<dyn Future<Item = crate::models::AuthId, Error = Error>> {
        let uri_str = format!("{}/platform/1/auth/id", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_ldap_template(
        &self,
        auth_ldap_template_id: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthLdapTemplates, Error = Error>> {
        let uri_str = format!(
            "{}/platform/4/auth/ldap-templates/{AuthLdapTemplateId}",
            self.configuration.base_path,
            AuthLdapTemplateId = auth_ldap_template_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_ldap_templates(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthLdapTemplatesExtended, Error = Error>> {
        let uri_str = format!(
            "{}/platform/4/auth/ldap-templates",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_log_level(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthLogLevel, Error = Error>> {
        let uri_str = format!("{}/platform/3/auth/log-level", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_netgroup(
        &self,
        auth_netgroup_id: &str,
        ignore_errors: bool,
        recursive: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthNetgroups, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("ignore_errors", &ignore_errors.to_string())
            .append_pair("recursive", &recursive.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/netgroups/{AuthNetgroupId}?{}",
            self.configuration.base_path,
            q,
            AuthNetgroupId = auth_netgroup_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_privileges(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthPrivileges, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/privileges",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_role(
        &self,
        auth_role_id: &str,
        resolve_names: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthRoles, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("resolve_names", &resolve_names.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/roles/{AuthRoleId}?{}",
            self.configuration.base_path,
            q,
            AuthRoleId = auth_role_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_shells(&self) -> Box<dyn Future<Item = crate::models::AuthShells, Error = Error>> {
        let uri_str = format!("{}/platform/1/auth/shells", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_user(
        &self,
        auth_user_id: &str,
        cached: bool,
        resolve_names: bool,
        query_member_of: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthUsers, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("cached", &cached.to_string())
            .append_pair("resolve_names", &resolve_names.to_string())
            .append_pair("query_member_of", &query_member_of.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/users/{AuthUserId}?{}",
            self.configuration.base_path,
            q,
            AuthUserId = auth_user_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_wellknown(
        &self,
        auth_wellknown_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthWellknowns, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/wellknowns/{AuthWellknownId}?{}",
            self.configuration.base_path,
            q,
            AuthWellknownId = auth_wellknown_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_auth_wellknowns(
        &self,
    ) -> Box<dyn Future<Item = crate::models::AuthWellknowns, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/wellknowns",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_mapping_dump(
        &self,
        nocreate: bool,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingDump, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("nocreate", &nocreate.to_string())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/mapping/dump?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_mapping_identity(
        &self,
        mapping_identity_id: &str,
        nocreate: bool,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingIdentities, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("nocreate", &nocreate.to_string())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/identities/{MappingIdentityId}?{}",
            self.configuration.base_path,
            q,
            MappingIdentityId = mapping_identity_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_mapping_users_lookup(
        &self,
        primary_gid: i32,
        uid: i32,
        zone: &str,
        gid: Vec<i32>,
        user: &str,
        kerberos_principal: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingUsersLookup, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("primary_gid", &primary_gid.to_string())
            .append_pair("uid", &uid.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair(
                "gid",
                &gid.iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )
            .append_pair("user", &user.to_string())
            .append_pair("kerberos_principal", &kerberos_principal.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/users/lookup?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_mapping_users_rules(
        &self,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::MappingUsersRules, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/mapping/users/rules?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_ads_by_id(
        &self,
        providers_ads_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersAds, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/ads/{ProvidersAdsId}?{}",
            self.configuration.base_path,
            q,
            ProvidersAdsId = providers_ads_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_file_by_id(
        &self,
        providers_file_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersFile, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/providers/file/{ProvidersFileId}?{}",
            self.configuration.base_path,
            q,
            ProvidersFileId = providers_file_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_krb5_by_id(
        &self,
        providers_krb5_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersKrb5, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/krb5/{ProvidersKrb5Id}?{}",
            self.configuration.base_path,
            q,
            ProvidersKrb5Id = providers_krb5_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_ldap_by_id(
        &self,
        providers_ldap_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLdap, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/auth/providers/ldap/{ProvidersLdapId}?{}",
            self.configuration.base_path,
            q,
            ProvidersLdapId = providers_ldap_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_local(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLocal, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/providers/local?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_local_by_id(
        &self,
        providers_local_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLocal, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/providers/local/{ProvidersLocalId}?{}",
            self.configuration.base_path,
            q,
            ProvidersLocalId = providers_local_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_nis_by_id(
        &self,
        providers_nis_id: &str,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersNis, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/nis/{ProvidersNisId}?{}",
            self.configuration.base_path,
            q,
            ProvidersNisId = providers_nis_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_providers_summary(
        &self,
        groupnet: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersSummary, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("groupnet", &groupnet.to_string())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/summary?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_acls(
        &self,
        preset: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsAcls, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("preset", &preset.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/settings/acls?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_global(
        &self,
        scope: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsGlobal, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/settings/global?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_krb5_defaults(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Defaults, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/defaults",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_krb5_domain(
        &self,
        settings_krb5_domain_id: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Domains, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}",
            self.configuration.base_path,
            SettingsKrb5DomainId = settings_krb5_domain_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_krb5_realm(
        &self,
        settings_krb5_realm_id: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Realms, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}",
            self.configuration.base_path,
            SettingsKrb5RealmId = settings_krb5_realm_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_mapping(
        &self,
        scope: &str,
        zone: &str,
    ) -> Box<dyn Future<Item = crate::models::SettingsMapping, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/settings/mapping?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_auth_groups(
        &self,
        domain: &str,
        zone: &str,
        resume: &str,
        cached: bool,
        resolve_names: bool,
        filter: &str,
        limit: i32,
        provider: &str,
        query_member_of: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthGroupsExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("domain", &domain.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("cached", &cached.to_string())
            .append_pair("resolve_names", &resolve_names.to_string())
            .append_pair("filter", &filter.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("provider", &provider.to_string())
            .append_pair("query_member_of", &query_member_of.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/groups?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_auth_roles(
        &self,
        sort: &str,
        resolve_names: bool,
        limit: i32,
        dir: &str,
        resume: &str,
    ) -> Box<dyn Future<Item = crate::models::AuthRolesExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("resolve_names", &resolve_names.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/roles?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_auth_users(
        &self,
        domain: &str,
        zone: &str,
        resume: &str,
        cached: bool,
        resolve_names: bool,
        filter: &str,
        limit: i32,
        provider: &str,
        query_member_of: bool,
    ) -> Box<dyn Future<Item = crate::models::AuthUsersExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("domain", &domain.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("cached", &cached.to_string())
            .append_pair("resolve_names", &resolve_names.to_string())
            .append_pair("filter", &filter.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("provider", &provider.to_string())
            .append_pair("query_member_of", &query_member_of.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/users?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_providers_ads(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersAdsExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/ads?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_providers_file(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersFile, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/auth/providers/file?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_providers_krb5(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersKrb5Extended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/krb5?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_providers_ldap(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersLdap, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/auth/providers/ldap?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_providers_nis(
        &self,
        scope: &str,
    ) -> Box<dyn Future<Item = crate::models::ProvidersNisExtended, Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/auth/providers/nis?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_settings_krb5_domains(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Domains, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/domains",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_settings_krb5_realms(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SettingsKrb5Realms, Error = Error>> {
        let uri_str = format!(
            "{}/platform/1/auth/settings/krb5/realms",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn update_auth_group(
        &self,
        auth_group: crate::models::AuthGroup,
        auth_group_id: &str,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri = format!(
            "{}/platform/1/auth/groups/{AuthGroupId}?{}",
            self.configuration.base_path,
            q,
            AuthGroupId = auth_group_id
        );
        put(self.configuration.borrow(), &uri, &auth_group)
    }

    fn update_auth_log_level(
        &self,
        auth_log_level: crate::models::AuthLogLevelExtended,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!("{}/platform/3/auth/log-level", self.configuration.base_path);
        put(self.configuration.borrow(), &uri, &auth_log_level)
    }

    fn update_auth_role(
        &self,
        auth_role: crate::models::AuthRole,
        auth_role_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/1/auth/roles/{AuthRoleId}",
            self.configuration.base_path,
            AuthRoleId = auth_role_id
        );
        put(self.configuration.borrow(), &uri, &auth_role)
    }

    fn update_auth_user(
        &self,
        auth_user: crate::models::AuthUser,
        auth_user_id: &str,
        force: bool,
        zone: &str,
        provider: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .append_pair("zone", &zone.to_string())
            .append_pair("provider", &provider.to_string())
            .finish();
        let uri = format!(
            "{}/platform/1/auth/users/{AuthUserId}?{}",
            self.configuration.base_path,
            q,
            AuthUserId = auth_user_id
        );
        put(self.configuration.borrow(), &uri, &auth_user)
    }

    fn update_mapping_import(
        &self,
        mapping_import: crate::models::MappingImport,
        zone: &str,
        replace: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .append_pair("replace", &replace.to_string())
            .finish();
        let uri = format!(
            "{}/platform/3/auth/mapping/import?{}",
            self.configuration.base_path, q
        );
        put(self.configuration.borrow(), &uri, &mapping_import)
    }

    fn update_mapping_users_rules(
        &self,
        mapping_users_rules: crate::models::MappingUsersRulesExtended,
        zone: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri = format!(
            "{}/platform/1/auth/mapping/users/rules?{}",
            self.configuration.base_path, q
        );
        put(self.configuration.borrow(), &uri, &mapping_users_rules)
    }

    fn update_providers_ads_by_id(
        &self,
        providers_ads_id_params: crate::models::ProvidersAdsIdParams,
        providers_ads_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/3/auth/providers/ads/{ProvidersAdsId}",
            self.configuration.base_path,
            ProvidersAdsId = providers_ads_id
        );
        put(self.configuration.borrow(), &uri, &providers_ads_id_params)
    }

    fn update_providers_file_by_id(
        &self,
        providers_file_id_params: crate::models::ProvidersFileIdParams,
        providers_file_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/1/auth/providers/file/{ProvidersFileId}",
            self.configuration.base_path,
            ProvidersFileId = providers_file_id
        );
        put(self.configuration.borrow(), &uri, &providers_file_id_params)
    }

    fn update_providers_krb5_by_id(
        &self,
        providers_krb5_id_params: crate::models::ProvidersKrb5IdParams,
        providers_krb5_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/3/auth/providers/krb5/{ProvidersKrb5Id}",
            self.configuration.base_path,
            ProvidersKrb5Id = providers_krb5_id
        );
        put(self.configuration.borrow(), &uri, &providers_krb5_id_params)
    }

    fn update_providers_ldap_by_id(
        &self,
        providers_ldap_id_params: crate::models::ProvidersLdapIdParams,
        providers_ldap_id: &str,
        force: bool,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("force", &force.to_string())
            .finish();
        let uri = format!(
            "{}/platform/4/auth/providers/ldap/{ProvidersLdapId}?{}",
            self.configuration.base_path,
            q,
            ProvidersLdapId = providers_ldap_id
        );
        put(self.configuration.borrow(), &uri, &providers_ldap_id_params)
    }

    fn update_providers_local_by_id(
        &self,
        providers_local_id_params: crate::models::ProvidersLocalIdParams,
        providers_local_id: &str,
    ) -> Box<dyn Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/1/auth/providers/local/{ProvidersLocalId}",
            self.configuration.base_path,
            ProvidersLocalId = providers_local_id
        );
        put(
            self.configuration.borrow(),
            &uri,
            &providers_local_id_params,
        )
    }

    fn update_providers_nis_by_id(
        &self,
        providers_nis_id_params: crate::models::ProvidersNisIdParams,
        providers_nis_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/3/auth/providers/nis/{ProvidersNisId}",
            self.configuration.base_path,
            ProvidersNisId = providers_nis_id
        );
        put(self.configuration.borrow(), &uri, &providers_nis_id_params)
    }

    fn update_settings_acls(
        &self,
        settings_acls: crate::models::SettingsAclsExtended,
    ) -> Box<Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/3/auth/settings/acls",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri, &settings_acls)
    }

    fn update_settings_global(
        &self,
        settings_global: crate::models::SettingsGlobalGlobalSettings,
        zone: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri = format!(
            "{}/platform/1/auth/settings/global?{}",
            self.configuration.base_path, q
        );
        put(self.configuration.borrow(), &uri, &settings_global)
    }

    fn update_settings_krb5_defaults(
        &self,
        settings_krb5_defaults: crate::models::SettingsKrb5DefaultsKrb5Settings,
    ) -> Box<Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/1/auth/settings/krb5/defaults",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri, &settings_krb5_defaults)
    }

    fn update_settings_krb5_domain(
        &self,
        settings_krb5_domain: crate::models::SettingsKrb5Domain,
        settings_krb5_domain_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}",
            self.configuration.base_path,
            SettingsKrb5DomainId = settings_krb5_domain_id
        );
        put(self.configuration.borrow(), &uri, &settings_krb5_domain)
    }

    fn update_settings_krb5_realm(
        &self,
        settings_krb5_realm: crate::models::SettingsKrb5Realm,
        settings_krb5_realm_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let uri = format!(
            "{}/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}",
            self.configuration.base_path,
            SettingsKrb5RealmId = settings_krb5_realm_id
        );
        put(self.configuration.borrow(), &uri, &settings_krb5_realm)
    }

    fn update_settings_mapping(
        &self,
        settings_mapping: crate::models::SettingsMappingMappingSettings,
        zone: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri = format!(
            "{}/platform/1/auth/settings/mapping?{}",
            self.configuration.base_path, q
        );
        put(self.configuration.borrow(), &uri, &settings_mapping)
    }
}
