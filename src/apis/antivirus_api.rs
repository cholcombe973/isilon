/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, put, query, Error};

pub struct AntivirusApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> AntivirusApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AntivirusApiClient<C> {
        AntivirusApiClient {
            configuration: configuration,
        }
    }
}

pub trait AntivirusApi {
    fn create_antivirus_policy(
        &self,
        antivirus_policy: crate::models::AntivirusPolicyCreateParams,
    ) -> Result<crate::models::CreateResponse, Error>;
    fn create_antivirus_scan_item(
        &self,
        antivirus_scan_item: crate::models::AntivirusScanItem,
    ) -> Result<crate::models::CreateAntivirusScanItemResponse, Error>;
    fn create_antivirus_server(
        &self,
        antivirus_server: crate::models::AntivirusServerCreateParams,
    ) -> Result<crate::models::CreateResponse, Error>;
    fn delete_antivirus_policies(&self) -> Result<(), Error>;
    fn delete_antivirus_policy(
        &self,
        antivirus_policy_id: &str,
    ) -> Result<(), Error>;
    fn delete_antivirus_server(
        &self,
        antivirus_server_id: &str,
    ) -> Result<(), Error>;
    fn delete_antivirus_servers(&self) -> Result<(), Error>;
    fn delete_reports_scan(
        &self,
        reports_scan_id: &str,
    ) -> Result<(), Error>;
    fn delete_reports_scans(&self, age: i32) -> Result<(), Error>;
    fn get_antivirus_policy(
        &self,
        antivirus_policy_id: &str,
    ) -> Result<crate::models::AntivirusPolicies, Error>;
    fn get_antivirus_quarantine_path(
        &self,
        antivirus_quarantine_path: &str,
    ) -> Result<crate::models::AntivirusQuarantine, Error>;
    fn get_antivirus_server(
        &self,
        antivirus_server_id: &str,
    ) -> Result<crate::models::AntivirusServers, Error>;
    fn get_antivirus_settings(
        &self,
    ) -> Result<crate::models::AntivirusSettings, Error>;
    fn get_reports_scan(
        &self,
        reports_scan_id: &str,
    ) -> Result<crate::models::ReportsScans, Error>;
    fn get_reports_scans(
        &self,
        sort: &str,
        status: &str,
        resume: &str,
        limit: i32,
        dir: &str,
        policy_id: &str,
    ) -> Result<crate::models::ReportsScansExtended, Error>;
    fn get_reports_threat(
        &self,
        reports_threat_id: &str,
    ) -> Result<crate::models::ReportsThreats, Error>;
    fn get_reports_threats(
        &self,
        sort: &str,
        scan_id: &str,
        resume: &str,
        limit: i32,
        file: &str,
        remediation: &str,
        dir: &str,
    ) -> Result<crate::models::ReportsThreatsExtended, Error>;
    fn list_antivirus_policies(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
        resume: &str,
    ) -> Result<crate::models::AntivirusPoliciesExtended, Error>;
    fn list_antivirus_servers(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
        resume: &str,
    ) -> Result<crate::models::AntivirusServersExtended, Error>;
    fn update_antivirus_policy(
        &self,
        antivirus_policy: crate::models::AntivirusPolicy,
        antivirus_policy_id: &str,
    ) -> Result<(), Error>;
    fn update_antivirus_quarantine_path(
        &self,
        antivirus_quarantine_path_params: crate::models::AntivirusQuarantinePathParams,
        antivirus_quarantine_path: &str,
    ) -> Result<(), Error>;
    fn update_antivirus_server(
        &self,
        antivirus_server: crate::models::AntivirusServer,
        antivirus_server_id: &str,
    ) -> Result<(), Error>;
    fn update_antivirus_settings(
        &self,
        antivirus_settings: crate::models::AntivirusSettingsSettings,
    ) -> Result<(), Error>;
}

impl<C: hyper::client::connect::Connect + 'static + std::marker::Sync + std::marker::Send + Clone> AntivirusApi for AntivirusApiClient<C> {
    fn create_antivirus_policy(
        &self,
        antivirus_policy: crate::models::AntivirusPolicyCreateParams,
    ) -> Result<crate::models::CreateResponse, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/policies",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &antivirus_policy,
            hyper::Method::POST,
        )
    }

    fn create_antivirus_scan_item(
        &self,
        antivirus_scan_item: crate::models::AntivirusScanItem,
    ) -> Result<crate::models::CreateAntivirusScanItemResponse, Error> {
        let uri_str = format!("{}/platform/3/antivirus/scan", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &antivirus_scan_item,
            hyper::Method::POST,
        )
    }

    fn create_antivirus_server(
        &self,
        antivirus_server: crate::models::AntivirusServerCreateParams,
    ) -> Result<crate::models::CreateResponse, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/servers",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &antivirus_server,
            hyper::Method::POST,
        )
    }

    fn delete_antivirus_policies(&self) -> Result<(), Error>{
        let uri_str = format!(
            "{}/platform/3/antivirus/policies",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_antivirus_policy(
        &self,
        antivirus_policy_id: &str,
    ) -> Result<(), Error>{
        let uri_str = format!(
            "{}/platform/3/antivirus/policies/{AntivirusPolicyId}",
            self.configuration.base_path,
            AntivirusPolicyId = antivirus_policy_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_antivirus_server(
        &self,
        antivirus_server_id: &str,
    ) -> Result<(), Error>{
        let uri_str = format!(
            "{}/platform/3/antivirus/servers/{AntivirusServerId}",
            self.configuration.base_path,
            AntivirusServerId = antivirus_server_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_antivirus_servers(&self) -> Result<(), Error>{
        let uri_str = format!(
            "{}/platform/3/antivirus/servers",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_reports_scan(
        &self,
        reports_scan_id: &str,
    ) -> Result<(), Error>{
        let uri_str = format!(
            "{}/platform/3/antivirus/reports/scans/{ReportsScanId}",
            self.configuration.base_path,
            ReportsScanId = reports_scan_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_reports_scans(&self, age: i32) -> Result<(), Error>{
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("age", &age.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/antivirus/reports/scans?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn get_antivirus_policy(
        &self,
        antivirus_policy_id: &str,
    ) -> Result<crate::models::AntivirusPolicies, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/policies/{AntivirusPolicyId}",
            self.configuration.base_path,
            AntivirusPolicyId = antivirus_policy_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_antivirus_quarantine_path(
        &self,
        antivirus_quarantine_path: &str,
    ) -> Result<crate::models::AntivirusQuarantine, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}",
            self.configuration.base_path,
            AntivirusQuarantinePath = antivirus_quarantine_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_antivirus_server(
        &self,
        antivirus_server_id: &str,
    ) -> Result<crate::models::AntivirusServers, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/servers/{AntivirusServerId}",
            self.configuration.base_path,
            AntivirusServerId = antivirus_server_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_antivirus_settings(
        &self,
    ) -> Result<crate::models::AntivirusSettings, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/settings",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_reports_scan(
        &self,
        reports_scan_id: &str,
    ) -> Result<crate::models::ReportsScans, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/reports/scans/{ReportsScanId}",
            self.configuration.base_path,
            ReportsScanId = reports_scan_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_reports_scans(
        &self,
        sort: &str,
        status: &str,
        resume: &str,
        limit: i32,
        dir: &str,
        policy_id: &str,
    ) -> Result<crate::models::ReportsScansExtended, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("status", &status.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("policy_id", &policy_id.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/antivirus/reports/scans?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_reports_threat(
        &self,
        reports_threat_id: &str,
    ) -> Result<crate::models::ReportsThreats, Error> {
        let uri_str = format!(
            "{}/platform/3/antivirus/reports/threats/{ReportsThreatId}",
            self.configuration.base_path,
            ReportsThreatId = reports_threat_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_reports_threats(
        &self,
        sort: &str,
        scan_id: &str,
        resume: &str,
        limit: i32,
        file: &str,
        remediation: &str,
        dir: &str,
    ) -> Result<crate::models::ReportsThreatsExtended, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("scan_id", &scan_id.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("file", &file.to_string())
            .append_pair("remediation", &remediation.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/antivirus/reports/threats?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_antivirus_policies(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
        resume: &str,
    ) -> Result<crate::models::AntivirusPoliciesExtended, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/antivirus/policies?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_antivirus_servers(
        &self,
        sort: &str,
        limit: i32,
        dir: &str,
        resume: &str,
    ) -> Result<crate::models::AntivirusServersExtended, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .append_pair("resume", &resume.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/antivirus/servers?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn update_antivirus_policy(
        &self,
        antivirus_policy: crate::models::AntivirusPolicy,
        antivirus_policy_id: &str,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/antivirus/policies/{AntivirusPolicyId}",
            self.configuration.base_path,
            AntivirusPolicyId = antivirus_policy_id
        );
        put(self.configuration.borrow(), &uri, &antivirus_policy)
    }

    fn update_antivirus_quarantine_path(
        &self,
        antivirus_quarantine_path_params: crate::models::AntivirusQuarantinePathParams,
        antivirus_quarantine_path: &str,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}",
            self.configuration.base_path,
            AntivirusQuarantinePath = antivirus_quarantine_path
        );
        put(
            self.configuration.borrow(),
            &uri,
            &antivirus_quarantine_path_params,
        )
    }

    fn update_antivirus_server(
        &self,
        antivirus_server: crate::models::AntivirusServer,
        antivirus_server_id: &str,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/antivirus/servers/{AntivirusServerId}",
            self.configuration.base_path,
            AntivirusServerId = antivirus_server_id
        );
        put(self.configuration.borrow(), &uri, &antivirus_server)
    }

    fn update_antivirus_settings(
        &self,
        antivirus_settings: crate::models::AntivirusSettingsSettings,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/antivirus/settings",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri, &antivirus_settings)
    }
}
