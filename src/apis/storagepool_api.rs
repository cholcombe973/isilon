/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, put, query, Error};

pub struct StoragepoolApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> StoragepoolApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> StoragepoolApiClient<C> {
        StoragepoolApiClient {
            configuration: configuration,
        }
    }
}

pub trait StoragepoolApi {
    fn create_compatibilities_class_active_item(
        &self,
        compatibilities_class_active_item: crate::models::CompatibilitiesClassActiveItem,
        assess: bool,
    ) -> Result<crate::models::CreateCompatibilitiesClassActiveItemResponse, Error>;
    fn create_compatibilities_ssd_active_item(
        &self,
        compatibilities_ssd_active_item: crate::models::CompatibilitiesSsdActiveItem,
        assess: bool,
    ) -> Result<crate::models::CreateCompatibilitiesClassActiveItemResponse, Error>;
    fn create_storagepool_nodepool(
        &self,
        storagepool_nodepool: crate::models::StoragepoolNodepoolCreateParams,
    ) -> Result<crate::models::CreateStoragepoolTierResponse, Error>;
    fn create_storagepool_tier(
        &self,
        storagepool_tier: crate::models::StoragepoolTierCreateParams,
    ) -> Result<crate::models::CreateStoragepoolTierResponse, Error>;
    fn delete_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
        assess: bool,
    ) -> Result<(), Error>;
    fn delete_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Result<(), Error>;
    fn delete_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Result<(), Error>;
    fn delete_storagepool_nodepools(&self) -> Result<(), Error>;
    fn delete_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Result<(), Error>;
    fn delete_storagepool_tiers(&self) -> Result<(), Error>;
    fn get_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
    ) -> Result<crate::models::CompatibilitiesClassActive, Error>;
    fn get_compatibilities_class_available(
        &self,
    ) -> Result<crate::models::CompatibilitiesClassAvailable, Error>;
    fn get_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
    ) -> Result<crate::models::CompatibilitiesSsdActive, Error>;
    fn get_compatibilities_ssd_available(
        &self,
    ) -> Result<crate::models::CompatibilitiesSsdAvailable, Error>;
    fn get_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Result<crate::models::StoragepoolNodepools, Error>;
    fn get_storagepool_settings(
        &self,
    ) -> Result<crate::models::StoragepoolSettings, Error>;
    fn get_storagepool_status(
        &self,
    ) -> Result<crate::models::StoragepoolStatus, Error>;
    fn get_storagepool_storagepools(
        &self,
        sort: &str,
        toplevels: &str,
        dir: &str,
    ) -> Result<crate::models::StoragepoolStoragepools, Error>;
    fn get_storagepool_suggested_protection_nid(
        &self,
        storagepool_suggested_protection_nid: &str,
    ) -> Result<crate::models::StoragepoolSuggestedProtection, Error>;
    fn get_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Result<crate::models::StoragepoolTiers, Error>;
    fn get_storagepool_unprovisioned(
        &self,
    ) -> Result<crate::models::StoragepoolUnprovisioned, Error>;
    fn list_compatibilities_class_active(
        &self,
    ) -> Result<crate::models::CompatibilitiesClassActiveExtended, Error>;
    fn list_compatibilities_ssd_active(
        &self,
    ) -> Result<crate::models::CompatibilitiesSsdActiveExtended, Error>;
    fn list_storagepool_nodepools(
        &self,
    ) -> Result<crate::models::StoragepoolNodepoolsExtended, Error>;
    fn list_storagepool_tiers(
        &self,
    ) -> Result<crate::models::StoragepoolTiersExtended, Error>;
    fn update_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id_params: crate::models::CompatibilitiesSsdActiveIdParams,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Result<(), Error>;
    fn update_storagepool_nodepool(
        &self,
        storagepool_nodepool: crate::models::StoragepoolNodepool,
        storagepool_nodepool_id: &str,
    ) -> Result<(), Error>;
    fn update_storagepool_settings(
        &self,
        storagepool_settings: crate::models::StoragepoolSettingsExtended,
    ) -> Result<(), Error>;
    fn update_storagepool_tier(
        &self,
        storagepool_tier: crate::models::StoragepoolTier,
        storagepool_tier_id: &str,
    ) -> Result<(), Error>;
}

impl<C: hyper::client::connect::Connect + 'static + std::marker::Sync + std::marker::Send + Clone> StoragepoolApi for StoragepoolApiClient<C> {
    fn create_compatibilities_class_active_item(
        &self,
        compatibilities_class_active_item: crate::models::CompatibilitiesClassActiveItem,
        assess: bool,
    ) -> Result<crate::models::CreateCompatibilitiesClassActiveItemResponse, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/active?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &compatibilities_class_active_item,
            hyper::Method::POST,
        )
    }

    fn create_compatibilities_ssd_active_item(
        &self,
        compatibilities_ssd_active_item: crate::models::CompatibilitiesSsdActiveItem,
        assess: bool,
    ) -> Result<crate::models::CreateCompatibilitiesClassActiveItemResponse, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &compatibilities_ssd_active_item,
            hyper::Method::POST,
        )
    }

    fn create_storagepool_nodepool(
        &self,
        storagepool_nodepool: crate::models::StoragepoolNodepoolCreateParams,
    ) -> Result<crate::models::CreateStoragepoolTierResponse, Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &storagepool_nodepool,
            hyper::Method::POST,
        )
    }

    fn create_storagepool_tier(
        &self,
        storagepool_tier: crate::models::StoragepoolTierCreateParams,
    ) -> Result<crate::models::CreateStoragepoolTierResponse, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/tiers",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &storagepool_tier,
            hyper::Method::POST,
        )
    }

    fn delete_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
        assess: bool,
    ) -> Result<(), Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}?{}", self.configuration.base_path, q, CompatibilitiesClassActiveId=compatibilities_class_active_id);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Result<(), Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}?{}",
            self.configuration.base_path,
            q,
            CompatibilitiesSsdActiveId = compatibilities_ssd_active_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
            self.configuration.base_path,
            StoragepoolNodepoolId = storagepool_nodepool_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_storagepool_nodepools(&self) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/tiers/{StoragepoolTierId}",
            self.configuration.base_path,
            StoragepoolTierId = storagepool_tier_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn delete_storagepool_tiers(&self) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/tiers",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn get_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
    ) -> Result<crate::models::CompatibilitiesClassActive, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}",
            self.configuration.base_path,
            CompatibilitiesClassActiveId = compatibilities_class_active_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_compatibilities_class_available(
        &self,
    ) -> Result<crate::models::CompatibilitiesClassAvailable, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/available",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
    ) -> Result<crate::models::CompatibilitiesSsdActive, Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}",
            self.configuration.base_path,
            CompatibilitiesSsdActiveId = compatibilities_ssd_active_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_compatibilities_ssd_available(
        &self,
    ) -> Result<crate::models::CompatibilitiesSsdAvailable, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/ssd/available",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Result<crate::models::StoragepoolNodepools, Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
            self.configuration.base_path,
            StoragepoolNodepoolId = storagepool_nodepool_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_settings(
        &self,
    ) -> Result<crate::models::StoragepoolSettings, Error> {
        let uri_str = format!(
            "{}/platform/5/storagepool/settings",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_status(
        &self,
    ) -> Result<crate::models::StoragepoolStatus, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/status",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_storagepools(
        &self,
        sort: &str,
        toplevels: &str,
        dir: &str,
    ) -> Result<crate::models::StoragepoolStoragepools, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("toplevels", &toplevels.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/storagepools?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_suggested_protection_nid(
        &self,
        storagepool_suggested_protection_nid: &str,
    ) -> Result<crate::models::StoragepoolSuggestedProtection, Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/suggested-protection/{StoragepoolSuggestedProtectionNid}",
            self.configuration.base_path,
            StoragepoolSuggestedProtectionNid = storagepool_suggested_protection_nid
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Result<crate::models::StoragepoolTiers, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/tiers/{StoragepoolTierId}",
            self.configuration.base_path,
            StoragepoolTierId = storagepool_tier_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_storagepool_unprovisioned(
        &self,
    ) -> Result<crate::models::StoragepoolUnprovisioned, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/unprovisioned",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_compatibilities_class_active(
        &self,
    ) -> Result<crate::models::CompatibilitiesClassActiveExtended, Error>
    {
        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/active",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_compatibilities_ssd_active(
        &self,
    ) -> Result<crate::models::CompatibilitiesSsdActiveExtended, Error>
    {
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_storagepool_nodepools(
        &self,
    ) -> Result<crate::models::StoragepoolNodepoolsExtended, Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_storagepool_tiers(
        &self,
    ) -> Result<crate::models::StoragepoolTiersExtended, Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/tiers",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn update_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id_params: crate::models::CompatibilitiesSsdActiveIdParams,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Result<(), Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}?{}",
            self.configuration.base_path,
            q,
            CompatibilitiesSsdActiveId = compatibilities_ssd_active_id
        );
        put(
            self.configuration.borrow(),
            &uri_str,
            &compatibilities_ssd_active_id_params,
        )
    }

    fn update_storagepool_nodepool(
        &self,
        storagepool_nodepool: crate::models::StoragepoolNodepool,
        storagepool_nodepool_id: &str,
    ) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
            self.configuration.base_path,
            StoragepoolNodepoolId = storagepool_nodepool_id
        );
        put(self.configuration.borrow(), &uri_str, &storagepool_nodepool)
    }

    fn update_storagepool_settings(
        &self,
        storagepool_settings: crate::models::StoragepoolSettingsExtended,
    ) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/5/storagepool/settings",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri_str, &storagepool_settings)
    }

    fn update_storagepool_tier(
        &self,
        storagepool_tier: crate::models::StoragepoolTier,
        storagepool_tier_id: &str,
    ) -> Result<(), Error> {
        let uri_str = format!(
            "{}/platform/1/storagepool/tiers/{StoragepoolTierId}",
            self.configuration.base_path,
            StoragepoolTierId = storagepool_tier_id
        );
        put(self.configuration.borrow(), &uri_str, &storagepool_tier)
    }
}
