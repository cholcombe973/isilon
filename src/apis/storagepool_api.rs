/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::{Future, Stream};
use hyper;
use serde_json;

use super::{configuration, Error};

pub struct StoragepoolApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> StoragepoolApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> StoragepoolApiClient<C> {
        StoragepoolApiClient {
            configuration: configuration,
        }
    }
}

pub trait StoragepoolApi {
    fn create_compatibilities_class_active_item(
        &self,
        compatibilities_class_active_item: ::models::CompatibilitiesClassActiveItem,
        assess: bool,
    ) -> Box<Future<Item = ::models::CreateCompatibilitiesClassActiveItemResponse, Error = Error>>;
    fn create_compatibilities_ssd_active_item(
        &self,
        compatibilities_ssd_active_item: ::models::CompatibilitiesSsdActiveItem,
        assess: bool,
    ) -> Box<Future<Item = ::models::CreateCompatibilitiesClassActiveItemResponse, Error = Error>>;
    fn create_storagepool_nodepool(
        &self,
        storagepool_nodepool: ::models::StoragepoolNodepoolCreateParams,
    ) -> Box<Future<Item = ::models::CreateStoragepoolTierResponse, Error = Error>>;
    fn create_storagepool_tier(
        &self,
        storagepool_tier: ::models::StoragepoolTierCreateParams,
    ) -> Box<Future<Item = ::models::CreateStoragepoolTierResponse, Error = Error>>;
    fn delete_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
        assess: bool,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn delete_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn delete_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn delete_storagepool_nodepools(&self) -> Box<Future<Item = (), Error = Error>>;
    fn delete_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn delete_storagepool_tiers(&self) -> Box<Future<Item = (), Error = Error>>;
    fn get_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
    ) -> Box<Future<Item = ::models::CompatibilitiesClassActive, Error = Error>>;
    fn get_compatibilities_class_available(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesClassAvailable, Error = Error>>;
    fn get_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
    ) -> Box<Future<Item = ::models::CompatibilitiesSsdActive, Error = Error>>;
    fn get_compatibilities_ssd_available(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesSsdAvailable, Error = Error>>;
    fn get_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Box<Future<Item = ::models::StoragepoolNodepools, Error = Error>>;
    fn get_storagepool_settings(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolSettings, Error = Error>>;
    fn get_storagepool_status(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolStatus, Error = Error>>;
    fn get_storagepool_storagepools(
        &self,
        sort: &str,
        toplevels: &str,
        dir: &str,
    ) -> Box<Future<Item = ::models::StoragepoolStoragepools, Error = Error>>;
    fn get_storagepool_suggested_protection_nid(
        &self,
        storagepool_suggested_protection_nid: &str,
    ) -> Box<Future<Item = ::models::StoragepoolSuggestedProtection, Error = Error>>;
    fn get_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Box<Future<Item = ::models::StoragepoolTiers, Error = Error>>;
    fn get_storagepool_unprovisioned(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolUnprovisioned, Error = Error>>;
    fn list_compatibilities_class_active(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesClassActiveExtended, Error = Error>>;
    fn list_compatibilities_ssd_active(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesSsdActiveExtended, Error = Error>>;
    fn list_storagepool_nodepools(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolNodepoolsExtended, Error = Error>>;
    fn list_storagepool_tiers(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolTiersExtended, Error = Error>>;
    fn update_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id_params: ::models::CompatibilitiesSsdActiveIdParams,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn update_storagepool_nodepool(
        &self,
        storagepool_nodepool: ::models::StoragepoolNodepool,
        storagepool_nodepool_id: &str,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn update_storagepool_settings(
        &self,
        storagepool_settings: ::models::StoragepoolSettingsExtended,
    ) -> Box<Future<Item = (), Error = Error>>;
    fn update_storagepool_tier(
        &self,
        storagepool_tier: ::models::StoragepoolTier,
        storagepool_tier_id: &str,
    ) -> Box<Future<Item = (), Error = Error>>;
}

impl<C: hyper::client::Connect> StoragepoolApi for StoragepoolApiClient<C> {
    fn create_compatibilities_class_active_item(
        &self,
        compatibilities_class_active_item: ::models::CompatibilitiesClassActiveItem,
        assess: bool,
    ) -> Box<Future<Item = ::models::CreateCompatibilitiesClassActiveItemResponse, Error = Error>>
    {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/active{}",
            configuration.base_path, query
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&compatibilities_class_active_item).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CreateCompatibilitiesClassActiveItemResponse,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn create_compatibilities_ssd_active_item(
        &self,
        compatibilities_ssd_active_item: ::models::CompatibilitiesSsdActiveItem,
        assess: bool,
    ) -> Box<Future<Item = ::models::CreateCompatibilitiesClassActiveItemResponse, Error = Error>>
    {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active{}",
            configuration.base_path, query
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&compatibilities_ssd_active_item).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CreateCompatibilitiesClassActiveItemResponse,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn create_storagepool_nodepool(
        &self,
        storagepool_nodepool: ::models::StoragepoolNodepoolCreateParams,
    ) -> Box<Future<Item = ::models::CreateStoragepoolTierResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&storagepool_nodepool).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CreateStoragepoolTierResponse,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn create_storagepool_tier(
        &self,
        storagepool_tier: ::models::StoragepoolTierCreateParams,
    ) -> Box<Future<Item = ::models::CreateStoragepoolTierResponse, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/platform/1/storagepool/tiers", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&storagepool_tier).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CreateStoragepoolTierResponse,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn delete_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
        assess: bool,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}{}", configuration.base_path, query, CompatibilitiesClassActiveId=compatibilities_class_active_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn delete_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}{}",
            configuration.base_path,
            query,
            CompatibilitiesSsdActiveId = compatibilities_ssd_active_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn delete_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
            configuration.base_path,
            StoragepoolNodepoolId = storagepool_nodepool_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn delete_storagepool_nodepools(&self) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn delete_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!(
            "{}/platform/1/storagepool/tiers/{StoragepoolTierId}",
            configuration.base_path,
            StoragepoolTierId = storagepool_tier_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn delete_storagepool_tiers(&self) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Delete;

        let uri_str = format!("{}/platform/1/storagepool/tiers", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn get_compatibilities_class_active_by_id(
        &self,
        compatibilities_class_active_id: &str,
    ) -> Box<Future<Item = ::models::CompatibilitiesClassActive, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}",
            configuration.base_path,
            CompatibilitiesClassActiveId = compatibilities_class_active_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::CompatibilitiesClassActive, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_compatibilities_class_available(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesClassAvailable, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/available",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CompatibilitiesClassAvailable,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id: &str,
    ) -> Box<Future<Item = ::models::CompatibilitiesSsdActive, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}",
            configuration.base_path,
            CompatibilitiesSsdActiveId = compatibilities_ssd_active_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::CompatibilitiesSsdActive, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_compatibilities_ssd_available(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesSsdAvailable, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/ssd/available",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CompatibilitiesSsdAvailable,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_nodepool(
        &self,
        storagepool_nodepool_id: &str,
    ) -> Box<Future<Item = ::models::StoragepoolNodepools, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
            configuration.base_path,
            StoragepoolNodepoolId = storagepool_nodepool_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolNodepools, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_settings(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolSettings, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/5/storagepool/settings",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolSettings, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_status(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolStatus, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/1/storagepool/status", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolStatus, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_storagepools(
        &self,
        sort: &str,
        toplevels: &str,
        dir: &str,
    ) -> Box<Future<Item = ::models::StoragepoolStoragepools, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("toplevels", &toplevels.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/storagepools{}",
            configuration.base_path, query
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolStoragepools, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_suggested_protection_nid(
        &self,
        storagepool_suggested_protection_nid: &str,
    ) -> Box<Future<Item = ::models::StoragepoolSuggestedProtection, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/3/storagepool/suggested-protection/{StoragepoolSuggestedProtectionNid}",
            configuration.base_path,
            StoragepoolSuggestedProtectionNid = storagepool_suggested_protection_nid
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::StoragepoolSuggestedProtection,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_tier(
        &self,
        storagepool_tier_id: &str,
    ) -> Box<Future<Item = ::models::StoragepoolTiers, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/1/storagepool/tiers/{StoragepoolTierId}",
            configuration.base_path,
            StoragepoolTierId = storagepool_tier_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolTiers, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn get_storagepool_unprovisioned(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolUnprovisioned, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/1/storagepool/unprovisioned",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolUnprovisioned, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn list_compatibilities_class_active(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesClassActiveExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/1/storagepool/compatibilities/class/active",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CompatibilitiesClassActiveExtended,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn list_compatibilities_ssd_active(
        &self,
    ) -> Box<Future<Item = ::models::CompatibilitiesSsdActiveExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::CompatibilitiesSsdActiveExtended,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn list_storagepool_nodepools(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolNodepoolsExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<
                        ::models::StoragepoolNodepoolsExtended,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn list_storagepool_tiers(
        &self,
    ) -> Box<Future<Item = ::models::StoragepoolTiersExtended, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/1/storagepool/tiers", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|body| {
                    let parsed: Result<::models::StoragepoolTiersExtended, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(|e| Error::from(e))
                })
                .map_err(|e| Error::from(e)),
        )
    }

    fn update_compatibilities_ssd_active_by_id(
        &self,
        compatibilities_ssd_active_id_params: ::models::CompatibilitiesSsdActiveIdParams,
        compatibilities_ssd_active_id: &str,
        assess: bool,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("assess", &assess.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}{}",
            configuration.base_path,
            query,
            CompatibilitiesSsdActiveId = compatibilities_ssd_active_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&compatibilities_ssd_active_id_params).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn update_storagepool_nodepool(
        &self,
        storagepool_nodepool: ::models::StoragepoolNodepool,
        storagepool_nodepool_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!(
            "{}/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
            configuration.base_path,
            StoragepoolNodepoolId = storagepool_nodepool_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&storagepool_nodepool).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn update_storagepool_settings(
        &self,
        storagepool_settings: ::models::StoragepoolSettingsExtended,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!(
            "{}/platform/5/storagepool/settings",
            configuration.base_path
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&storagepool_settings).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }

    fn update_storagepool_tier(
        &self,
        storagepool_tier: ::models::StoragepoolTier,
        storagepool_tier_id: &str,
    ) -> Box<Future<Item = (), Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let uri_str = format!(
            "{}/platform/1/storagepool/tiers/{StoragepoolTierId}",
            configuration.base_path,
            StoragepoolTierId = storagepool_tier_id
        );

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());
        configuration.set_session(&mut req).unwrap();

        let serialized = serde_json::to_string(&storagepool_tier).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut()
            .set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .and_then(|res| res.body().concat2())
                .map_err(|e| Error::from(e))
                .and_then(|_| futures::future::ok(())),
        )
    }
}
