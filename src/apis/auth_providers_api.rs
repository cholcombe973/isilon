/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct AuthProvidersApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AuthProvidersApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuthProvidersApiClient<C> {
        AuthProvidersApiClient {
            configuration: configuration,
        }
    }
}

pub trait AuthProvidersApi {
    fn get_ads_provider_controllers(&self, id: &str, groupnet: &str) -> Box<Future<Item = ::models::AdsProviderControllers, Error = Error>>;
    fn get_ads_provider_domain(&self, ads_provider_domain_id: &str, id: &str) -> Box<Future<Item = ::models::AdsProviderDomains, Error = Error>>;
    fn get_ads_provider_domains(&self, id: &str, scope: &str) -> Box<Future<Item = ::models::AdsProviderDomains, Error = Error>>;
    fn get_ads_provider_search(&self, id: &str, domain: &str, description: &str, resume: &str, search_users: bool, filter: &str, limit: i32, user: &str, password: &str, search_groups: bool) -> Box<Future<Item = ::models::AdsProviderSearch, Error = Error>>;
}


impl<C: hyper::client::Connect>AuthProvidersApi for AuthProvidersApiClient<C> {
    fn get_ads_provider_controllers(&self, id: &str, groupnet: &str) -> Box<Future<Item = ::models::AdsProviderControllers, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("groupnet", &groupnet.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/auth/providers/ads/{Id}/controllers{}", configuration.base_path, query, Id=id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::AdsProviderControllers, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_ads_provider_domain(&self, ads_provider_domain_id: &str, id: &str) -> Box<Future<Item = ::models::AdsProviderDomains, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/platform/3/auth/providers/ads/{Id}/domains/{AdsProviderDomainId}", configuration.base_path, AdsProviderDomainId=ads_provider_domain_id, Id=id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::AdsProviderDomains, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_ads_provider_domains(&self, id: &str, scope: &str) -> Box<Future<Item = ::models::AdsProviderDomains, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("scope", &scope.to_string())
            .finish();
        let uri_str = format!("{}/platform/3/auth/providers/ads/{Id}/domains{}", configuration.base_path, query, Id=id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::AdsProviderDomains, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn get_ads_provider_search(&self, id: &str, domain: &str, description: &str, resume: &str, search_users: bool, filter: &str, limit: i32, user: &str, password: &str, search_groups: bool) -> Box<Future<Item = ::models::AdsProviderSearch, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("domain", &domain.to_string())
            .append_pair("description", &description.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("search_users", &search_users.to_string())
            .append_pair("filter", &filter.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("user", &user.to_string())
            .append_pair("password", &password.to_string())
            .append_pair("search_groups", &search_groups.to_string())
            .finish();
        let uri_str = format!("{}/platform/1/auth/providers/ads/{Id}/search{}", configuration.base_path, query, Id=id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::AdsProviderSearch, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

}
