/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, put, query, Error};

pub struct AuditApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> AuditApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuditApiClient<C> {
        AuditApiClient {
            configuration: configuration,
        }
    }
}

pub trait AuditApi {
    fn create_audit_topic(
        &self,
        audit_topic: crate::models::AuditTopicCreateParams,
    ) -> Result<crate::models::CreateResponse, Error>;
    fn delete_audit_topic(&self, audit_topic_id: &str)
        -> Result<(), Error>;
    fn get_audit_progress(
        &self,
        lnn: i32,
    ) -> Result<crate::models::AuditProgress, Error>;
    fn get_audit_settings(
        &self,
        zone: &str,
    ) -> Result<crate::models::AuditSettings, Error>;
    fn get_audit_topic(
        &self,
        audit_topic_id: &str,
    ) -> Result<crate::models::AuditTopics, Error>;
    fn get_progress_global(
        &self,
    ) -> Result<crate::models::ProgressGlobal, Error>;
    fn get_settings_global(
        &self,
    ) -> Result<crate::models::SettingsGlobalExtended, Error>;
    fn list_audit_topics(
        &self,
    ) -> Result<crate::models::AuditTopicsExtended, Error>;
    fn update_audit_settings(
        &self,
        audit_settings: crate::models::AuditSettingsSettings,
        zone: &str,
    ) -> Result<(), Error>;
    fn update_audit_topic(
        &self,
        audit_topic: crate::models::AuditTopic,
        audit_topic_id: &str,
    ) -> Result<(), Error>;
    fn update_settings_global(
        &self,
        settings_global: crate::models::SettingsGlobalSettings,
    ) -> Result<(), Error>;
}

impl<C: hyper::client::connect::Connect + 'static + std::marker::Sync + std::marker::Send + Clone> AuditApi for AuditApiClient<C> {
    fn create_audit_topic(
        &self,
        audit_topic: crate::models::AuditTopicCreateParams,
    ) -> Result<crate::models::CreateResponse, Error> {
        let uri_str = format!("{}/platform/1/audit/topics", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &audit_topic,
            hyper::Method::POST,
        )
    }

    fn delete_audit_topic(
        &self,
        audit_topic_id: &str,
    ) -> Result<(), Error>{
        let uri_str = format!(
            "{}/platform/1/audit/topics/{AuditTopicId}",
            self.configuration.base_path,
            AuditTopicId = audit_topic_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn get_audit_progress(
        &self,
        lnn: i32,
    ) -> Result<crate::models::AuditProgress, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("lnn", &lnn.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/4/audit/progress?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_audit_settings(
        &self,
        zone: &str,
    ) -> Result<crate::models::AuditSettings, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/audit/settings?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_audit_topic(
        &self,
        audit_topic_id: &str,
    ) -> Result<crate::models::AuditTopics, Error> {
        let uri_str = format!(
            "{}/platform/1/audit/topics/{AuditTopicId}",
            self.configuration.base_path,
            AuditTopicId = audit_topic_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_progress_global(
        &self,
    ) -> Result<crate::models::ProgressGlobal, Error> {
        let uri_str = format!(
            "{}/platform/4/audit/progress/global",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_settings_global(
        &self,
    ) -> Result<crate::models::SettingsGlobalExtended, Error> {
        let uri_str = format!(
            "{}/platform/3/audit/settings/global",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn list_audit_topics(
        &self,
    ) -> Result<crate::models::AuditTopicsExtended, Error> {
        let uri_str = format!("{}/platform/1/audit/topics", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn update_audit_settings(
        &self,
        audit_settings: crate::models::AuditSettingsSettings,
        zone: &str,
    ) -> Result<(), Error>{
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("zone", &zone.to_string())
            .finish();
        let uri = format!(
            "{}/platform/3/audit/settings?{}",
            self.configuration.base_path, q
        );
        put(self.configuration.borrow(), &uri, &audit_settings)
    }

    fn update_audit_topic(
        &self,
        audit_topic: crate::models::AuditTopic,
        audit_topic_id: &str,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/1/audit/topics/{AuditTopicId}",
            self.configuration.base_path,
            AuditTopicId = audit_topic_id
        );
        put(self.configuration.borrow(), &uri, &audit_topic)
    }

    fn update_settings_global(
        &self,
        settings_global: crate::models::SettingsGlobalSettings,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/audit/settings/global",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri, &settings_global)
    }
}
