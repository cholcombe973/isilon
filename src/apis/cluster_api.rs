/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, put, query, Error};

pub struct ClusterApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + 'static> ClusterApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ClusterApiClient<C> {
        ClusterApiClient {
            configuration: configuration,
        }
    }
}

pub trait ClusterApi {
    fn create_cluster_add_node_item(
        &self,
        cluster_add_node_item: crate::models::ClusterAddNodeItem,
    ) -> Result<crate::models::Empty, Error>;
    fn create_diagnostics_gather_start_item(
        &self,
        diagnostics_gather_start_item: crate::models::DiagnosticsGatherSettingsExtended,
    ) -> Result<crate::models::Empty, Error>;
    fn create_diagnostics_gather_stop_item(
        &self,
        diagnostics_gather_stop_item: crate::models::Empty,
    ) -> Result<crate::models::Empty, Error>;
    fn create_diagnostics_netlogger_start_item(
        &self,
        diagnostics_netlogger_start_item: crate::models::DiagnosticsNetloggerSettings,
    ) -> Result<crate::models::Empty, Error>;
    fn create_diagnostics_netlogger_stop_item(
        &self,
        diagnostics_netlogger_stop_item: crate::models::Empty,
    ) -> Result<crate::models::Empty, Error>;
    fn get_cluster_config(
        &self,
    ) -> Result<crate::models::ClusterConfig, Error>;
    fn get_cluster_email(
        &self,
    ) -> Result<crate::models::ClusterEmail, Error>;
    fn get_cluster_external_ips(&self) -> Result<Vec<String>, Error>;
    fn get_cluster_identity(
        &self,
    ) -> Result<crate::models::ClusterIdentity, Error>;
    fn get_cluster_node(
        &self,
        cluster_node_id: i32,
        timeout: f32,
    ) -> Result<crate::models::ClusterNodesExtendedExtended, Error>;
    fn get_cluster_nodes(
        &self,
        timeout: f32,
    ) -> Result<crate::models::ClusterNodesExtendedExtended, Error>;
    fn get_cluster_nodes_available(
        &self,
    ) -> Result<crate::models::ClusterNodesAvailable, Error>;
    fn get_cluster_owner(
        &self,
    ) -> Result<crate::models::ClusterOwner, Error>;
    fn get_cluster_statfs(
        &self,
    ) -> Result<crate::models::ClusterStatfs, Error>;
    fn get_cluster_time(&self)
        -> Result<crate::models::ClusterTime, Error>;
    fn get_cluster_timezone(
        &self,
    ) -> Result<crate::models::ClusterTimezone, Error>;
    fn get_cluster_version(
        &self,
    ) -> Result<crate::models::ClusterVersion, Error>;
    fn get_diagnostics_gather(
        &self,
    ) -> Result<crate::models::DiagnosticsGatherStatus, Error>;
    fn get_diagnostics_gather_settings(
        &self,
    ) -> Result<crate::models::DiagnosticsGatherSettings, Error>;
    fn get_diagnostics_gather_status(
        &self,
    ) -> Result<crate::models::DiagnosticsGatherStatus, Error>;
    fn get_diagnostics_netlogger(
        &self,
    ) -> Result<crate::models::DiagnosticsNetloggerStatus, Error>;
    fn get_diagnostics_netlogger_settings(
        &self,
    ) -> Result<crate::models::DiagnosticsNetloggerSettings, Error>;
    fn get_diagnostics_netlogger_status(
        &self,
    ) -> Result<crate::models::DiagnosticsNetloggerStatus, Error>;
    fn get_timezone_region(
        &self,
        timezone_region_id: &str,
        sort: &str,
        resume: &str,
        show_all: bool,
        dst_reset: bool,
        limit: i32,
        dir: &str,
    ) -> Result<crate::models::TimezoneRegions, Error>;
    fn get_timezone_settings(
        &self,
    ) -> Result<crate::models::TimezoneSettings, Error>;
    fn update_cluster_email(
        &self,
        cluster_email: crate::models::ClusterEmailExtended,
    ) -> Result<(), Error>;
    fn update_cluster_node(
        &self,
        cluster_node: crate::models::ClusterNode,
        cluster_node_id: i32,
    ) -> Result<(), Error>;
    fn update_cluster_owner(
        &self,
        cluster_owner: crate::models::ClusterOwner,
    ) -> Result<(), Error>;
    fn update_cluster_time(
        &self,
        cluster_time: crate::models::ClusterTimeExtended,
    ) -> Result<(), Error>;
    fn update_cluster_timezone(
        &self,
        cluster_timezone: crate::models::ClusterTimezoneExtended,
    ) -> Result<(), Error>;
    fn update_diagnostics_gather_settings(
        &self,
        diagnostics_gather_settings: crate::models::DiagnosticsGatherSettingsExtended,
    ) -> Result<(), Error>;
    fn update_diagnostics_netlogger_settings(
        &self,
        diagnostics_netlogger_settings: crate::models::DiagnosticsNetloggerSettings,
    ) -> Result<(), Error>;
    fn update_timezone_settings(
        &self,
        timezone_settings: crate::models::TimezoneRegionTimezone,
    ) -> Result<(), Error>;
}

impl<C: hyper::client::connect::Connect + 'static + std::marker::Sync + std::marker::Send + Clone> ClusterApi for ClusterApiClient<C> {
    fn create_cluster_add_node_item(
        &self,
        cluster_add_node_item: crate::models::ClusterAddNodeItem,
    ) -> Result<crate::models::Empty, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/add-node",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &cluster_add_node_item,
            hyper::Method::POST,
        )
    }

    fn create_diagnostics_gather_start_item(
        &self,
        diagnostics_gather_start_item: crate::models::DiagnosticsGatherSettingsExtended,
    ) -> Result<crate::models::Empty, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/gather/start",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &diagnostics_gather_start_item,
            hyper::Method::POST,
        )
    }

    fn create_diagnostics_gather_stop_item(
        &self,
        diagnostics_gather_stop_item: crate::models::Empty,
    ) -> Result<crate::models::Empty, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/gather/stop",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &diagnostics_gather_stop_item,
            hyper::Method::POST,
        )
    }

    fn create_diagnostics_netlogger_start_item(
        &self,
        diagnostics_netlogger_start_item: crate::models::DiagnosticsNetloggerSettings,
    ) -> Result<crate::models::Empty, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/netlogger/start",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &diagnostics_netlogger_start_item,
            hyper::Method::POST,
        )
    }

    fn create_diagnostics_netlogger_stop_item(
        &self,
        diagnostics_netlogger_stop_item: crate::models::Empty,
    ) -> Result<crate::models::Empty, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/netlogger/stop",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &diagnostics_netlogger_stop_item,
            hyper::Method::POST,
        )
    }

    fn get_cluster_config(
        &self,
    ) -> Result<crate::models::ClusterConfig, Error> {
        let uri_str = format!("{}/platform/3/cluster/config", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_email(
        &self,
    ) -> Result<crate::models::ClusterEmail, Error> {
        let uri_str = format!("{}/platform/1/cluster/email", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_external_ips(&self) -> Result<Vec<String>, Error> {
        let uri_str = format!(
            "{}/platform/2/cluster/external-ips",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_identity(
        &self,
    ) -> Result<crate::models::ClusterIdentity, Error> {
        let uri_str = format!(
            "{}/platform/5/cluster/identity",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_node(
        &self,
        cluster_node_id: i32,
        timeout: f32,
    ) -> Result<crate::models::ClusterNodesExtendedExtended, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("timeout", &timeout.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/5/cluster/nodes/{ClusterNodeId}?{}",
            self.configuration.base_path,
            q,
            ClusterNodeId = cluster_node_id
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_nodes(
        &self,
        timeout: f32,
    ) -> Result<crate::models::ClusterNodesExtendedExtended, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("timeout", &timeout.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/5/cluster/nodes?{}",
            self.configuration.base_path, q
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_nodes_available(
        &self,
    ) -> Result<crate::models::ClusterNodesAvailable, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/nodes-available",
            self.configuration.base_path
        );
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_owner(
        &self,
    ) -> Result<crate::models::ClusterOwner, Error> {
        let uri_str = format!("{}/platform/1/cluster/owner", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_statfs(
        &self,
    ) -> Result<crate::models::ClusterStatfs, Error> {
        let uri_str = format!("{}/platform/1/cluster/statfs", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_time(
        &self,
    ) -> Result<crate::models::ClusterTime, Error> {
        let uri_str = format!("{}/platform/3/cluster/time", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_timezone(
        &self,
    ) -> Result<crate::models::ClusterTimezone, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/timezone",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_cluster_version(
        &self,
    ) -> Result<crate::models::ClusterVersion, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/version",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_diagnostics_gather(
        &self,
    ) -> Result<crate::models::DiagnosticsGatherStatus, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/gather",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_diagnostics_gather_settings(
        &self,
    ) -> Result<crate::models::DiagnosticsGatherSettings, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/gather/settings",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_diagnostics_gather_status(
        &self,
    ) -> Result<crate::models::DiagnosticsGatherStatus, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/gather/status",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_diagnostics_netlogger(
        &self,
    ) -> Result<crate::models::DiagnosticsNetloggerStatus, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/netlogger",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_diagnostics_netlogger_settings(
        &self,
    ) -> Result<crate::models::DiagnosticsNetloggerSettings, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/netlogger/settings",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_diagnostics_netlogger_status(
        &self,
    ) -> Result<crate::models::DiagnosticsNetloggerStatus, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/diagnostics/netlogger/status",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_timezone_region(
        &self,
        timezone_region_id: &str,
        sort: &str,
        resume: &str,
        show_all: bool,
        dst_reset: bool,
        limit: i32,
        dir: &str,
    ) -> Result<crate::models::TimezoneRegions, Error> {
        let q = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("sort", &sort.to_string())
            .append_pair("resume", &resume.to_string())
            .append_pair("show_all", &show_all.to_string())
            .append_pair("dst_reset", &dst_reset.to_string())
            .append_pair("limit", &limit.to_string())
            .append_pair("dir", &dir.to_string())
            .finish();
        let uri_str = format!(
            "{}/platform/3/cluster/timezone/regions/{TimezoneRegionId}?{}",
            self.configuration.base_path,
            q,
            TimezoneRegionId = timezone_region_id
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn get_timezone_settings(
        &self,
    ) -> Result<crate::models::TimezoneSettings, Error> {
        let uri_str = format!(
            "{}/platform/3/cluster/timezone/settings",
            self.configuration.base_path
        );

        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }

    fn update_cluster_email(
        &self,
        cluster_email: crate::models::ClusterEmailExtended,
    ) -> Result<(), Error>{
        let uri = format!("{}/platform/1/cluster/email", self.configuration.base_path);
        put(self.configuration.borrow(), &uri, &cluster_email)
    }

    fn update_cluster_node(
        &self,
        cluster_node: crate::models::ClusterNode,
        cluster_node_id: i32,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/5/cluster/nodes/{ClusterNodeId}",
            self.configuration.base_path,
            ClusterNodeId = cluster_node_id
        );
        put(self.configuration.borrow(), &uri, &cluster_node)
    }

    fn update_cluster_owner(
        &self,
        cluster_owner: crate::models::ClusterOwner,
    ) -> Result<(), Error>{
        let uri = format!("{}/platform/1/cluster/owner", self.configuration.base_path);
        put(self.configuration.borrow(), &uri, &cluster_owner)
    }

    fn update_cluster_time(
        &self,
        cluster_time: crate::models::ClusterTimeExtended,
    ) -> Result<(), Error>{
        let uri = format!("{}/platform/3/cluster/time", self.configuration.base_path);
        put(self.configuration.borrow(), &uri, &cluster_time)
    }

    fn update_cluster_timezone(
        &self,
        cluster_timezone: crate::models::ClusterTimezoneExtended,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/cluster/timezone",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri, &cluster_timezone)
    }

    fn update_diagnostics_gather_settings(
        &self,
        diagnostics_gather_settings: crate::models::DiagnosticsGatherSettingsExtended,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/cluster/diagnostics/gather/settings",
            self.configuration.base_path
        );
        put(
            self.configuration.borrow(),
            &uri,
            &diagnostics_gather_settings,
        )
    }

    fn update_diagnostics_netlogger_settings(
        &self,
        diagnostics_netlogger_settings: crate::models::DiagnosticsNetloggerSettings,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/cluster/diagnostics/netlogger/settings",
            self.configuration.base_path
        );
        put(
            self.configuration.borrow(),
            &uri,
            &diagnostics_netlogger_settings,
        )
    }

    fn update_timezone_settings(
        &self,
        timezone_settings: crate::models::TimezoneRegionTimezone,
    ) -> Result<(), Error>{
        let uri = format!(
            "{}/platform/3/cluster/timezone/settings",
            self.configuration.base_path
        );
        put(self.configuration.borrow(), &uri, &timezone_settings)
    }
}
