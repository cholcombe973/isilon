/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolTierExtended {
  /// The names or IDs of the tier's children.
  #[serde(rename = "children")]
  children: Option<Vec<String>>,
  /// The tier name.
  #[serde(rename = "name")]
  name: String,
  /// The system ID given to the tier.
  #[serde(rename = "id")]
  id: i32,
  /// The nodes that are part of this tier.
  #[serde(rename = "lnns")]
  lnns: Vec<i32>,
  /// Total pool usage.
  #[serde(rename = "usage")]
  usage: ::models::StoragepoolTierUsage
}

impl StoragepoolTierExtended {
  pub fn new(name: String, id: i32, lnns: Vec<i32>, usage: ::models::StoragepoolTierUsage) -> StoragepoolTierExtended {
    StoragepoolTierExtended {
      children: None,
      name: name,
      id: id,
      lnns: lnns,
      usage: usage
    }
  }

  pub fn set_children(&mut self, children: Vec<String>) {
    self.children = Some(children);
  }

  pub fn with_children(mut self, children: Vec<String>) -> StoragepoolTierExtended {
    self.children = Some(children);
    self
  }

  pub fn children(&self) -> Option<&Vec<String>> {
    self.children.as_ref()
  }

  pub fn reset_children(&mut self) {
    self.children = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> StoragepoolTierExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> StoragepoolTierExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_lnns(&mut self, lnns: Vec<i32>) {
    self.lnns = lnns;
  }

  pub fn with_lnns(mut self, lnns: Vec<i32>) -> StoragepoolTierExtended {
    self.lnns = lnns;
    self
  }

  pub fn lnns(&self) -> &Vec<i32> {
    &self.lnns
  }


  pub fn set_usage(&mut self, usage: ::models::StoragepoolTierUsage) {
    self.usage = usage;
  }

  pub fn with_usage(mut self, usage: ::models::StoragepoolTierUsage) -> StoragepoolTierExtended {
    self.usage = usage;
    self
  }

  pub fn usage(&self) -> &::models::StoragepoolTierUsage {
    &self.usage
  }


}



