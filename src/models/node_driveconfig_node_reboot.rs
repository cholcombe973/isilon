/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeDriveconfigNodeReboot {
  /// Indicates whether or not to reboot the node due to a lost chassis.
  #[serde(rename = "chassis_loss")]
  chassis_loss: Option<bool>,
  /// Indicates whether or not to reboot the node if no drives are present.
  #[serde(rename = "none_present")]
  none_present: Option<bool>
}

impl NodeDriveconfigNodeReboot {
  pub fn new() -> NodeDriveconfigNodeReboot {
    NodeDriveconfigNodeReboot {
      chassis_loss: None,
      none_present: None
    }
  }

  pub fn set_chassis_loss(&mut self, chassis_loss: bool) {
    self.chassis_loss = Some(chassis_loss);
  }

  pub fn with_chassis_loss(mut self, chassis_loss: bool) -> NodeDriveconfigNodeReboot {
    self.chassis_loss = Some(chassis_loss);
    self
  }

  pub fn chassis_loss(&self) -> Option<&bool> {
    self.chassis_loss.as_ref()
  }

  pub fn reset_chassis_loss(&mut self) {
    self.chassis_loss = None;
  }

  pub fn set_none_present(&mut self, none_present: bool) {
    self.none_present = Some(none_present);
  }

  pub fn with_none_present(mut self, none_present: bool) -> NodeDriveconfigNodeReboot {
    self.none_present = Some(none_present);
    self
  }

  pub fn none_present(&self) -> Option<&bool> {
    self.none_present.as_ref()
  }

  pub fn reset_none_present(&mut self) {
    self.none_present = None;
  }

}



