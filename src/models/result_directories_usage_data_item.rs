/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResultDirectoriesUsageDataItem {
  /// Number of alternate data streams.
  #[serde(rename = "ads_cnt")]
  ads_cnt: i32,
  /// Number of directories.
  #[serde(rename = "dir_cnt")]
  dir_cnt: i32,
  /// Number of files.
  #[serde(rename = "file_cnt")]
  file_cnt: i32,
  /// Defines if directory has subdirectories.
  #[serde(rename = "has_subdirs")]
  has_subdirs: bool,
  /// Logical inode number.
  #[serde(rename = "lin")]
  lin: i32,
  /// Logical size directory in bytes.
  #[serde(rename = "log_size_sum")]
  log_size_sum: i32,
  /// Logical size sum of overflow in bytes.
  #[serde(rename = "log_size_sum_overflow")]
  log_size_sum_overflow: i32,
  /// Name of directory.
  #[serde(rename = "name")]
  name: String,
  /// Other count.
  #[serde(rename = "other_cnt")]
  other_cnt: i32,
  /// Parent directory inode.
  #[serde(rename = "parent")]
  parent: i32,
  /// Physical size directory in bytes.
  #[serde(rename = "phys_size_sum")]
  phys_size_sum: i32
}

impl ResultDirectoriesUsageDataItem {
  pub fn new(ads_cnt: i32, dir_cnt: i32, file_cnt: i32, has_subdirs: bool, lin: i32, log_size_sum: i32, log_size_sum_overflow: i32, name: String, other_cnt: i32, parent: i32, phys_size_sum: i32) -> ResultDirectoriesUsageDataItem {
    ResultDirectoriesUsageDataItem {
      ads_cnt: ads_cnt,
      dir_cnt: dir_cnt,
      file_cnt: file_cnt,
      has_subdirs: has_subdirs,
      lin: lin,
      log_size_sum: log_size_sum,
      log_size_sum_overflow: log_size_sum_overflow,
      name: name,
      other_cnt: other_cnt,
      parent: parent,
      phys_size_sum: phys_size_sum
    }
  }

  pub fn set_ads_cnt(&mut self, ads_cnt: i32) {
    self.ads_cnt = ads_cnt;
  }

  pub fn with_ads_cnt(mut self, ads_cnt: i32) -> ResultDirectoriesUsageDataItem {
    self.ads_cnt = ads_cnt;
    self
  }

  pub fn ads_cnt(&self) -> &i32 {
    &self.ads_cnt
  }


  pub fn set_dir_cnt(&mut self, dir_cnt: i32) {
    self.dir_cnt = dir_cnt;
  }

  pub fn with_dir_cnt(mut self, dir_cnt: i32) -> ResultDirectoriesUsageDataItem {
    self.dir_cnt = dir_cnt;
    self
  }

  pub fn dir_cnt(&self) -> &i32 {
    &self.dir_cnt
  }


  pub fn set_file_cnt(&mut self, file_cnt: i32) {
    self.file_cnt = file_cnt;
  }

  pub fn with_file_cnt(mut self, file_cnt: i32) -> ResultDirectoriesUsageDataItem {
    self.file_cnt = file_cnt;
    self
  }

  pub fn file_cnt(&self) -> &i32 {
    &self.file_cnt
  }


  pub fn set_has_subdirs(&mut self, has_subdirs: bool) {
    self.has_subdirs = has_subdirs;
  }

  pub fn with_has_subdirs(mut self, has_subdirs: bool) -> ResultDirectoriesUsageDataItem {
    self.has_subdirs = has_subdirs;
    self
  }

  pub fn has_subdirs(&self) -> &bool {
    &self.has_subdirs
  }


  pub fn set_lin(&mut self, lin: i32) {
    self.lin = lin;
  }

  pub fn with_lin(mut self, lin: i32) -> ResultDirectoriesUsageDataItem {
    self.lin = lin;
    self
  }

  pub fn lin(&self) -> &i32 {
    &self.lin
  }


  pub fn set_log_size_sum(&mut self, log_size_sum: i32) {
    self.log_size_sum = log_size_sum;
  }

  pub fn with_log_size_sum(mut self, log_size_sum: i32) -> ResultDirectoriesUsageDataItem {
    self.log_size_sum = log_size_sum;
    self
  }

  pub fn log_size_sum(&self) -> &i32 {
    &self.log_size_sum
  }


  pub fn set_log_size_sum_overflow(&mut self, log_size_sum_overflow: i32) {
    self.log_size_sum_overflow = log_size_sum_overflow;
  }

  pub fn with_log_size_sum_overflow(mut self, log_size_sum_overflow: i32) -> ResultDirectoriesUsageDataItem {
    self.log_size_sum_overflow = log_size_sum_overflow;
    self
  }

  pub fn log_size_sum_overflow(&self) -> &i32 {
    &self.log_size_sum_overflow
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ResultDirectoriesUsageDataItem {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_other_cnt(&mut self, other_cnt: i32) {
    self.other_cnt = other_cnt;
  }

  pub fn with_other_cnt(mut self, other_cnt: i32) -> ResultDirectoriesUsageDataItem {
    self.other_cnt = other_cnt;
    self
  }

  pub fn other_cnt(&self) -> &i32 {
    &self.other_cnt
  }


  pub fn set_parent(&mut self, parent: i32) {
    self.parent = parent;
  }

  pub fn with_parent(mut self, parent: i32) -> ResultDirectoriesUsageDataItem {
    self.parent = parent;
    self
  }

  pub fn parent(&self) -> &i32 {
    &self.parent
  }


  pub fn set_phys_size_sum(&mut self, phys_size_sum: i32) {
    self.phys_size_sum = phys_size_sum;
  }

  pub fn with_phys_size_sum(mut self, phys_size_sum: i32) -> ResultDirectoriesUsageDataItem {
    self.phys_size_sum = phys_size_sum;
    self
  }

  pub fn phys_size_sum(&self) -> &i32 {
    &self.phys_size_sum
  }


}



