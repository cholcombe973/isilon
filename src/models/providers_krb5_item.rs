/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProvidersKrb5Item : Specifies properties for the Kerberos authentication provider.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProvidersKrb5Item {
  /// Groupnet identifier.
  #[serde(rename = "groupnet")]
  groupnet: Option<String>,
  /// Specifies the key information for the Kerberos SPN.
  #[serde(rename = "keytab_entries")]
  keytab_entries: Option<Vec<::models::ProvidersKrb5IdParamsKeytabEntry>>,
  /// Specifies the path to a keytab file to import.
  #[serde(rename = "keytab_file")]
  keytab_file: Option<String>,
  /// If true, keys are managed manually. If false, keys are managed through kadmin.
  #[serde(rename = "manual_keying")]
  manual_keying: Option<bool>,
  /// Specifies the Kerberos provider name.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Specifies the Kerberos provider password.
  #[serde(rename = "password")]
  password: Option<String>,
  /// Specifies the name of realm.
  #[serde(rename = "realm")]
  realm: String,
  /// Specifies the name of the user that performs kadmin tasks.
  #[serde(rename = "user")]
  user: Option<String>
}

impl ProvidersKrb5Item {
  /// Specifies properties for the Kerberos authentication provider.
  pub fn new(realm: String) -> ProvidersKrb5Item {
    ProvidersKrb5Item {
      groupnet: None,
      keytab_entries: None,
      keytab_file: None,
      manual_keying: None,
      name: None,
      password: None,
      realm: realm,
      user: None
    }
  }

  pub fn set_groupnet(&mut self, groupnet: String) {
    self.groupnet = Some(groupnet);
  }

  pub fn with_groupnet(mut self, groupnet: String) -> ProvidersKrb5Item {
    self.groupnet = Some(groupnet);
    self
  }

  pub fn groupnet(&self) -> Option<&String> {
    self.groupnet.as_ref()
  }

  pub fn reset_groupnet(&mut self) {
    self.groupnet = None;
  }

  pub fn set_keytab_entries(&mut self, keytab_entries: Vec<::models::ProvidersKrb5IdParamsKeytabEntry>) {
    self.keytab_entries = Some(keytab_entries);
  }

  pub fn with_keytab_entries(mut self, keytab_entries: Vec<::models::ProvidersKrb5IdParamsKeytabEntry>) -> ProvidersKrb5Item {
    self.keytab_entries = Some(keytab_entries);
    self
  }

  pub fn keytab_entries(&self) -> Option<&Vec<::models::ProvidersKrb5IdParamsKeytabEntry>> {
    self.keytab_entries.as_ref()
  }

  pub fn reset_keytab_entries(&mut self) {
    self.keytab_entries = None;
  }

  pub fn set_keytab_file(&mut self, keytab_file: String) {
    self.keytab_file = Some(keytab_file);
  }

  pub fn with_keytab_file(mut self, keytab_file: String) -> ProvidersKrb5Item {
    self.keytab_file = Some(keytab_file);
    self
  }

  pub fn keytab_file(&self) -> Option<&String> {
    self.keytab_file.as_ref()
  }

  pub fn reset_keytab_file(&mut self) {
    self.keytab_file = None;
  }

  pub fn set_manual_keying(&mut self, manual_keying: bool) {
    self.manual_keying = Some(manual_keying);
  }

  pub fn with_manual_keying(mut self, manual_keying: bool) -> ProvidersKrb5Item {
    self.manual_keying = Some(manual_keying);
    self
  }

  pub fn manual_keying(&self) -> Option<&bool> {
    self.manual_keying.as_ref()
  }

  pub fn reset_manual_keying(&mut self) {
    self.manual_keying = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ProvidersKrb5Item {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_password(&mut self, password: String) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: String) -> ProvidersKrb5Item {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&String> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_realm(&mut self, realm: String) {
    self.realm = realm;
  }

  pub fn with_realm(mut self, realm: String) -> ProvidersKrb5Item {
    self.realm = realm;
    self
  }

  pub fn realm(&self) -> &String {
    &self.realm
  }


  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> ProvidersKrb5Item {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



