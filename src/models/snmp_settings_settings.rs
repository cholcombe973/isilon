/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnmpSettingsSettings {
  /// The read-only community name.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "read_only_community")]
  read_only_community: Option<String>,
  /// Whether the SNMP service is enabled.
  #[serde(rename = "service")]
  service: Option<bool>,
  /// Whether SNMP v1 and v2c protocols are enabled.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "snmp_v1_v2c_access")]
  snmp_v1_v2c_access: Option<bool>,
  /// Whether SNMP v3 is enabled.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "snmp_v3_access")]
  snmp_v3_access: Option<bool>,
  /// SNMPv3 authentication protocol. May only be SHA or MD5.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "snmp_v3_auth_protocol")]
  snmp_v3_auth_protocol: Option<String>,
  /// SNMPv3 privacy protocol. May only be AES or DES. @DEFAULT reverts this field to its default value.
  #[serde(rename = "snmp_v3_priv_protocol")]
  snmp_v3_priv_protocol: Option<String>,
  /// The read-only user for SNMP v3 read requests.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "snmp_v3_read_only_user")]
  snmp_v3_read_only_user: Option<String>,
  /// SNMPv3 privacy protocol. May only be AES or DES. @DEFAULT reverts this field to its default value.
  #[serde(rename = "snmp_v3_security_level")]
  snmp_v3_security_level: Option<String>,
  /// Contact information for the system owner.  This must be a valid email address.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "system_contact")]
  system_contact: Option<String>,
  /// A location name for the SNMP system.  @DEFAULT reverts this field to its default value.
  #[serde(rename = "system_location")]
  system_location: Option<String>
}

impl SnmpSettingsSettings {
  pub fn new() -> SnmpSettingsSettings {
    SnmpSettingsSettings {
      read_only_community: None,
      service: None,
      snmp_v1_v2c_access: None,
      snmp_v3_access: None,
      snmp_v3_auth_protocol: None,
      snmp_v3_priv_protocol: None,
      snmp_v3_read_only_user: None,
      snmp_v3_security_level: None,
      system_contact: None,
      system_location: None
    }
  }

  pub fn set_read_only_community(&mut self, read_only_community: String) {
    self.read_only_community = Some(read_only_community);
  }

  pub fn with_read_only_community(mut self, read_only_community: String) -> SnmpSettingsSettings {
    self.read_only_community = Some(read_only_community);
    self
  }

  pub fn read_only_community(&self) -> Option<&String> {
    self.read_only_community.as_ref()
  }

  pub fn reset_read_only_community(&mut self) {
    self.read_only_community = None;
  }

  pub fn set_service(&mut self, service: bool) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: bool) -> SnmpSettingsSettings {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&bool> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

  pub fn set_snmp_v1_v2c_access(&mut self, snmp_v1_v2c_access: bool) {
    self.snmp_v1_v2c_access = Some(snmp_v1_v2c_access);
  }

  pub fn with_snmp_v1_v2c_access(mut self, snmp_v1_v2c_access: bool) -> SnmpSettingsSettings {
    self.snmp_v1_v2c_access = Some(snmp_v1_v2c_access);
    self
  }

  pub fn snmp_v1_v2c_access(&self) -> Option<&bool> {
    self.snmp_v1_v2c_access.as_ref()
  }

  pub fn reset_snmp_v1_v2c_access(&mut self) {
    self.snmp_v1_v2c_access = None;
  }

  pub fn set_snmp_v3_access(&mut self, snmp_v3_access: bool) {
    self.snmp_v3_access = Some(snmp_v3_access);
  }

  pub fn with_snmp_v3_access(mut self, snmp_v3_access: bool) -> SnmpSettingsSettings {
    self.snmp_v3_access = Some(snmp_v3_access);
    self
  }

  pub fn snmp_v3_access(&self) -> Option<&bool> {
    self.snmp_v3_access.as_ref()
  }

  pub fn reset_snmp_v3_access(&mut self) {
    self.snmp_v3_access = None;
  }

  pub fn set_snmp_v3_auth_protocol(&mut self, snmp_v3_auth_protocol: String) {
    self.snmp_v3_auth_protocol = Some(snmp_v3_auth_protocol);
  }

  pub fn with_snmp_v3_auth_protocol(mut self, snmp_v3_auth_protocol: String) -> SnmpSettingsSettings {
    self.snmp_v3_auth_protocol = Some(snmp_v3_auth_protocol);
    self
  }

  pub fn snmp_v3_auth_protocol(&self) -> Option<&String> {
    self.snmp_v3_auth_protocol.as_ref()
  }

  pub fn reset_snmp_v3_auth_protocol(&mut self) {
    self.snmp_v3_auth_protocol = None;
  }

  pub fn set_snmp_v3_priv_protocol(&mut self, snmp_v3_priv_protocol: String) {
    self.snmp_v3_priv_protocol = Some(snmp_v3_priv_protocol);
  }

  pub fn with_snmp_v3_priv_protocol(mut self, snmp_v3_priv_protocol: String) -> SnmpSettingsSettings {
    self.snmp_v3_priv_protocol = Some(snmp_v3_priv_protocol);
    self
  }

  pub fn snmp_v3_priv_protocol(&self) -> Option<&String> {
    self.snmp_v3_priv_protocol.as_ref()
  }

  pub fn reset_snmp_v3_priv_protocol(&mut self) {
    self.snmp_v3_priv_protocol = None;
  }

  pub fn set_snmp_v3_read_only_user(&mut self, snmp_v3_read_only_user: String) {
    self.snmp_v3_read_only_user = Some(snmp_v3_read_only_user);
  }

  pub fn with_snmp_v3_read_only_user(mut self, snmp_v3_read_only_user: String) -> SnmpSettingsSettings {
    self.snmp_v3_read_only_user = Some(snmp_v3_read_only_user);
    self
  }

  pub fn snmp_v3_read_only_user(&self) -> Option<&String> {
    self.snmp_v3_read_only_user.as_ref()
  }

  pub fn reset_snmp_v3_read_only_user(&mut self) {
    self.snmp_v3_read_only_user = None;
  }

  pub fn set_snmp_v3_security_level(&mut self, snmp_v3_security_level: String) {
    self.snmp_v3_security_level = Some(snmp_v3_security_level);
  }

  pub fn with_snmp_v3_security_level(mut self, snmp_v3_security_level: String) -> SnmpSettingsSettings {
    self.snmp_v3_security_level = Some(snmp_v3_security_level);
    self
  }

  pub fn snmp_v3_security_level(&self) -> Option<&String> {
    self.snmp_v3_security_level.as_ref()
  }

  pub fn reset_snmp_v3_security_level(&mut self) {
    self.snmp_v3_security_level = None;
  }

  pub fn set_system_contact(&mut self, system_contact: String) {
    self.system_contact = Some(system_contact);
  }

  pub fn with_system_contact(mut self, system_contact: String) -> SnmpSettingsSettings {
    self.system_contact = Some(system_contact);
    self
  }

  pub fn system_contact(&self) -> Option<&String> {
    self.system_contact.as_ref()
  }

  pub fn reset_system_contact(&mut self) {
    self.system_contact = None;
  }

  pub fn set_system_location(&mut self, system_location: String) {
    self.system_location = Some(system_location);
  }

  pub fn with_system_location(mut self, system_location: String) -> SnmpSettingsSettings {
    self.system_location = Some(system_location);
    self
  }

  pub fn system_location(&self) -> Option<&String> {
    self.system_location.as_ref()
  }

  pub fn reset_system_location(&mut self) {
    self.system_location = None;
  }

}



