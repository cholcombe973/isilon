/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthAccessAccessItemShareSharePermissions {
  /// Returns Share level permissions for the user.{ 'read' , 'write' , 'full' or 'none' will be the values}
  #[serde(rename = "expected_permissions")]
  expected_permissions: Option<String>,
  /// Returns whether impersonate guest setting is enabled for the user on the share.
  #[serde(rename = "impersonate_guest")]
  impersonate_guest: Option<bool>,
  /// Returns whether impersonate user setting is enabled on the share
  #[serde(rename = "impersonate_user")]
  impersonate_user: Option<bool>,
  /// Returns whether run as root is enabled for the user on the share
  #[serde(rename = "run_as_root")]
  run_as_root: Option<bool>,
  /// Specifies a list of the relevant Access Control Entries withrespect to the user in the share.
  #[serde(rename = "share_relevant_aces")]
  share_relevant_aces: Option<Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>>
}

impl AuthAccessAccessItemShareSharePermissions {
  pub fn new() -> AuthAccessAccessItemShareSharePermissions {
    AuthAccessAccessItemShareSharePermissions {
      expected_permissions: None,
      impersonate_guest: None,
      impersonate_user: None,
      run_as_root: None,
      share_relevant_aces: None
    }
  }

  pub fn set_expected_permissions(&mut self, expected_permissions: String) {
    self.expected_permissions = Some(expected_permissions);
  }

  pub fn with_expected_permissions(mut self, expected_permissions: String) -> AuthAccessAccessItemShareSharePermissions {
    self.expected_permissions = Some(expected_permissions);
    self
  }

  pub fn expected_permissions(&self) -> Option<&String> {
    self.expected_permissions.as_ref()
  }

  pub fn reset_expected_permissions(&mut self) {
    self.expected_permissions = None;
  }

  pub fn set_impersonate_guest(&mut self, impersonate_guest: bool) {
    self.impersonate_guest = Some(impersonate_guest);
  }

  pub fn with_impersonate_guest(mut self, impersonate_guest: bool) -> AuthAccessAccessItemShareSharePermissions {
    self.impersonate_guest = Some(impersonate_guest);
    self
  }

  pub fn impersonate_guest(&self) -> Option<&bool> {
    self.impersonate_guest.as_ref()
  }

  pub fn reset_impersonate_guest(&mut self) {
    self.impersonate_guest = None;
  }

  pub fn set_impersonate_user(&mut self, impersonate_user: bool) {
    self.impersonate_user = Some(impersonate_user);
  }

  pub fn with_impersonate_user(mut self, impersonate_user: bool) -> AuthAccessAccessItemShareSharePermissions {
    self.impersonate_user = Some(impersonate_user);
    self
  }

  pub fn impersonate_user(&self) -> Option<&bool> {
    self.impersonate_user.as_ref()
  }

  pub fn reset_impersonate_user(&mut self) {
    self.impersonate_user = None;
  }

  pub fn set_run_as_root(&mut self, run_as_root: bool) {
    self.run_as_root = Some(run_as_root);
  }

  pub fn with_run_as_root(mut self, run_as_root: bool) -> AuthAccessAccessItemShareSharePermissions {
    self.run_as_root = Some(run_as_root);
    self
  }

  pub fn run_as_root(&self) -> Option<&bool> {
    self.run_as_root.as_ref()
  }

  pub fn reset_run_as_root(&mut self) {
    self.run_as_root = None;
  }

  pub fn set_share_relevant_aces(&mut self, share_relevant_aces: Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>) {
    self.share_relevant_aces = Some(share_relevant_aces);
  }

  pub fn with_share_relevant_aces(mut self, share_relevant_aces: Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>) -> AuthAccessAccessItemShareSharePermissions {
    self.share_relevant_aces = Some(share_relevant_aces);
    self
  }

  pub fn share_relevant_aces(&self) -> Option<&Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>> {
    self.share_relevant_aces.as_ref()
  }

  pub fn reset_share_relevant_aces(&mut self) {
    self.share_relevant_aces = None;
  }

}



