/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotRepstates {
  /// The system ID given to the repstate.
  #[serde(rename = "id")]
  id: String,
  /// The lower snapid used to compute the repstate.
  #[serde(rename = "snap1")]
  snap1: i32,
  /// The higher snapid used to compute the repstate.
  #[serde(rename = "snap2")]
  snap2: i32
}

impl SnapshotRepstates {
  pub fn new(id: String, snap1: i32, snap2: i32) -> SnapshotRepstates {
    SnapshotRepstates {
      id: id,
      snap1: snap1,
      snap2: snap2
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> SnapshotRepstates {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_snap1(&mut self, snap1: i32) {
    self.snap1 = snap1;
  }

  pub fn with_snap1(mut self, snap1: i32) -> SnapshotRepstates {
    self.snap1 = snap1;
    self
  }

  pub fn snap1(&self) -> &i32 {
    &self.snap1
  }


  pub fn set_snap2(&mut self, snap2: i32) {
    self.snap2 = snap2;
  }

  pub fn with_snap2(mut self, snap2: i32) -> SnapshotRepstates {
    self.snap2 = snap2;
    self
  }

  pub fn snap2(&self) -> &i32 {
    &self.snap2
  }


}



