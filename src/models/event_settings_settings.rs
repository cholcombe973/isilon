/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventSettingsSettings {
  /// Interval between heartbeat events. \"daily\", \"weekly\", or \"monthly\".
  #[serde(rename = "heartbeat_interval")]
  heartbeat_interval: Option<String>,
  /// Specifies start and duration of maintenance period during which no alerts will be sent for new eventgroups.
  #[serde(rename = "maintenance")]
  maintenance: Option<::models::EventSettingsSettingsMaintenance>,
  /// Retention period in days
  #[serde(rename = "retention_days")]
  retention_days: Option<i32>,
  /// Storage limit in megabytes per terabyte of available storage
  #[serde(rename = "storage_limit")]
  storage_limit: Option<i32>
}

impl EventSettingsSettings {
  pub fn new() -> EventSettingsSettings {
    EventSettingsSettings {
      heartbeat_interval: None,
      maintenance: None,
      retention_days: None,
      storage_limit: None
    }
  }

  pub fn set_heartbeat_interval(&mut self, heartbeat_interval: String) {
    self.heartbeat_interval = Some(heartbeat_interval);
  }

  pub fn with_heartbeat_interval(mut self, heartbeat_interval: String) -> EventSettingsSettings {
    self.heartbeat_interval = Some(heartbeat_interval);
    self
  }

  pub fn heartbeat_interval(&self) -> Option<&String> {
    self.heartbeat_interval.as_ref()
  }

  pub fn reset_heartbeat_interval(&mut self) {
    self.heartbeat_interval = None;
  }

  pub fn set_maintenance(&mut self, maintenance: ::models::EventSettingsSettingsMaintenance) {
    self.maintenance = Some(maintenance);
  }

  pub fn with_maintenance(mut self, maintenance: ::models::EventSettingsSettingsMaintenance) -> EventSettingsSettings {
    self.maintenance = Some(maintenance);
    self
  }

  pub fn maintenance(&self) -> Option<&::models::EventSettingsSettingsMaintenance> {
    self.maintenance.as_ref()
  }

  pub fn reset_maintenance(&mut self) {
    self.maintenance = None;
  }

  pub fn set_retention_days(&mut self, retention_days: i32) {
    self.retention_days = Some(retention_days);
  }

  pub fn with_retention_days(mut self, retention_days: i32) -> EventSettingsSettings {
    self.retention_days = Some(retention_days);
    self
  }

  pub fn retention_days(&self) -> Option<&i32> {
    self.retention_days.as_ref()
  }

  pub fn reset_retention_days(&mut self) {
    self.retention_days = None;
  }

  pub fn set_storage_limit(&mut self, storage_limit: i32) {
    self.storage_limit = Some(storage_limit);
  }

  pub fn with_storage_limit(mut self, storage_limit: i32) -> EventSettingsSettings {
    self.storage_limit = Some(storage_limit);
    self
  }

  pub fn storage_limit(&self) -> Option<&i32> {
    self.storage_limit.as_ref()
  }

  pub fn reset_storage_limit(&mut self) {
    self.storage_limit = None;
  }

}



