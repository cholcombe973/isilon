/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolStoragepools {
  #[serde(rename = "storagepools")]
  storagepools: Option<Vec<::models::StoragepoolStoragepool>>,
  /// Total number of items available.
  #[serde(rename = "total")]
  total: Option<i32>
}

impl StoragepoolStoragepools {
  pub fn new() -> StoragepoolStoragepools {
    StoragepoolStoragepools {
      storagepools: None,
      total: None
    }
  }

  pub fn set_storagepools(&mut self, storagepools: Vec<::models::StoragepoolStoragepool>) {
    self.storagepools = Some(storagepools);
  }

  pub fn with_storagepools(mut self, storagepools: Vec<::models::StoragepoolStoragepool>) -> StoragepoolStoragepools {
    self.storagepools = Some(storagepools);
    self
  }

  pub fn storagepools(&self) -> Option<&Vec<::models::StoragepoolStoragepool>> {
    self.storagepools.as_ref()
  }

  pub fn reset_storagepools(&mut self) {
    self.storagepools = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> StoragepoolStoragepools {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

}



