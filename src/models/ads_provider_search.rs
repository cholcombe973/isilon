/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AdsProviderSearch {
  #[serde(rename = "objects")]
  objects: Option<Vec<::models::AdsProviderSearchObject>>,
  /// Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
  #[serde(rename = "resume")]
  resume: Option<String>
}

impl AdsProviderSearch {
  pub fn new() -> AdsProviderSearch {
    AdsProviderSearch {
      objects: None,
      resume: None
    }
  }

  pub fn set_objects(&mut self, objects: Vec<::models::AdsProviderSearchObject>) {
    self.objects = Some(objects);
  }

  pub fn with_objects(mut self, objects: Vec<::models::AdsProviderSearchObject>) -> AdsProviderSearch {
    self.objects = Some(objects);
    self
  }

  pub fn objects(&self) -> Option<&Vec<::models::AdsProviderSearchObject>> {
    self.objects.as_ref()
  }

  pub fn reset_objects(&mut self) {
    self.objects = None;
  }

  pub fn set_resume(&mut self, resume: String) {
    self.resume = Some(resume);
  }

  pub fn with_resume(mut self, resume: String) -> AdsProviderSearch {
    self.resume = Some(resume);
    self
  }

  pub fn resume(&self) -> Option<&String> {
    self.resume.as_ref()
  }

  pub fn reset_resume(&mut self) {
    self.resume = None;
  }

}



