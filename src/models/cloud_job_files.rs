/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudJobFiles {
  /// The file filtering logic to find files for this job
  #[serde(rename = "file_matching_pattern")]
  file_matching_pattern: Option<::models::Empty>,
  /// A list of files to be addressed by this job.  (Note* these are only reported when audit_level is 'high'
  #[serde(rename = "names")]
  names: Option<Vec<::models::CloudJobFilesName>>,
  /// The total number of files addressed by this job
  #[serde(rename = "total")]
  total: Option<i32>,
  /// The number of canceled files
  #[serde(rename = "total_canceled")]
  total_canceled: Option<i32>,
  /// The number of files which failed
  #[serde(rename = "total_failed")]
  total_failed: Option<i32>,
  /// The number of files pending action
  #[serde(rename = "total_pending")]
  total_pending: Option<i32>,
  /// The number of files currently being processed
  #[serde(rename = "total_processing")]
  total_processing: Option<i32>,
  /// The total number of files successfully completed
  #[serde(rename = "total_succeeded")]
  total_succeeded: Option<i32>
}

impl CloudJobFiles {
  pub fn new() -> CloudJobFiles {
    CloudJobFiles {
      file_matching_pattern: None,
      names: None,
      total: None,
      total_canceled: None,
      total_failed: None,
      total_pending: None,
      total_processing: None,
      total_succeeded: None
    }
  }

  pub fn set_file_matching_pattern(&mut self, file_matching_pattern: ::models::Empty) {
    self.file_matching_pattern = Some(file_matching_pattern);
  }

  pub fn with_file_matching_pattern(mut self, file_matching_pattern: ::models::Empty) -> CloudJobFiles {
    self.file_matching_pattern = Some(file_matching_pattern);
    self
  }

  pub fn file_matching_pattern(&self) -> Option<&::models::Empty> {
    self.file_matching_pattern.as_ref()
  }

  pub fn reset_file_matching_pattern(&mut self) {
    self.file_matching_pattern = None;
  }

  pub fn set_names(&mut self, names: Vec<::models::CloudJobFilesName>) {
    self.names = Some(names);
  }

  pub fn with_names(mut self, names: Vec<::models::CloudJobFilesName>) -> CloudJobFiles {
    self.names = Some(names);
    self
  }

  pub fn names(&self) -> Option<&Vec<::models::CloudJobFilesName>> {
    self.names.as_ref()
  }

  pub fn reset_names(&mut self) {
    self.names = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> CloudJobFiles {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

  pub fn set_total_canceled(&mut self, total_canceled: i32) {
    self.total_canceled = Some(total_canceled);
  }

  pub fn with_total_canceled(mut self, total_canceled: i32) -> CloudJobFiles {
    self.total_canceled = Some(total_canceled);
    self
  }

  pub fn total_canceled(&self) -> Option<&i32> {
    self.total_canceled.as_ref()
  }

  pub fn reset_total_canceled(&mut self) {
    self.total_canceled = None;
  }

  pub fn set_total_failed(&mut self, total_failed: i32) {
    self.total_failed = Some(total_failed);
  }

  pub fn with_total_failed(mut self, total_failed: i32) -> CloudJobFiles {
    self.total_failed = Some(total_failed);
    self
  }

  pub fn total_failed(&self) -> Option<&i32> {
    self.total_failed.as_ref()
  }

  pub fn reset_total_failed(&mut self) {
    self.total_failed = None;
  }

  pub fn set_total_pending(&mut self, total_pending: i32) {
    self.total_pending = Some(total_pending);
  }

  pub fn with_total_pending(mut self, total_pending: i32) -> CloudJobFiles {
    self.total_pending = Some(total_pending);
    self
  }

  pub fn total_pending(&self) -> Option<&i32> {
    self.total_pending.as_ref()
  }

  pub fn reset_total_pending(&mut self) {
    self.total_pending = None;
  }

  pub fn set_total_processing(&mut self, total_processing: i32) {
    self.total_processing = Some(total_processing);
  }

  pub fn with_total_processing(mut self, total_processing: i32) -> CloudJobFiles {
    self.total_processing = Some(total_processing);
    self
  }

  pub fn total_processing(&self) -> Option<&i32> {
    self.total_processing.as_ref()
  }

  pub fn reset_total_processing(&mut self) {
    self.total_processing = None;
  }

  pub fn set_total_succeeded(&mut self, total_succeeded: i32) {
    self.total_succeeded = Some(total_succeeded);
  }

  pub fn with_total_succeeded(mut self, total_succeeded: i32) -> CloudJobFiles {
    self.total_succeeded = Some(total_succeeded);
    self
  }

  pub fn total_succeeded(&self) -> Option<&i32> {
    self.total_succeeded.as_ref()
  }

  pub fn reset_total_succeeded(&mut self) {
    self.total_succeeded = None;
  }

}



