/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpSettingsPreferredIpsPreference {
  #[serde(rename = "data_subnets")]
  data_subnets: Option<Vec<::models::NdmpSettingsPreferredIpDataSubnet>>,
  /// The unique display id, same as scope
  #[serde(rename = "id")]
  id: Option<String>,
  /// Either cluster or a network subnet defined in OneFS.
  #[serde(rename = "scope")]
  scope: Option<String>
}

impl NdmpSettingsPreferredIpsPreference {
  pub fn new() -> NdmpSettingsPreferredIpsPreference {
    NdmpSettingsPreferredIpsPreference {
      data_subnets: None,
      id: None,
      scope: None
    }
  }

  pub fn set_data_subnets(&mut self, data_subnets: Vec<::models::NdmpSettingsPreferredIpDataSubnet>) {
    self.data_subnets = Some(data_subnets);
  }

  pub fn with_data_subnets(mut self, data_subnets: Vec<::models::NdmpSettingsPreferredIpDataSubnet>) -> NdmpSettingsPreferredIpsPreference {
    self.data_subnets = Some(data_subnets);
    self
  }

  pub fn data_subnets(&self) -> Option<&Vec<::models::NdmpSettingsPreferredIpDataSubnet>> {
    self.data_subnets.as_ref()
  }

  pub fn reset_data_subnets(&mut self) {
    self.data_subnets = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NdmpSettingsPreferredIpsPreference {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_scope(&mut self, scope: String) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: String) -> NdmpSettingsPreferredIpsPreference {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&String> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

}



