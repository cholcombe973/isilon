/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateHardwareTapeNameResponseNodeRescanReportItem {
  /// device name
  #[serde(rename = "devicename")]
  devicename: Option<String>,
  /// device driver path
  #[serde(rename = "path")]
  path: Option<String>,
  /// device product name
  #[serde(rename = "product")]
  product: Option<String>,
  /// device serial:L number
  #[serde(rename = "serial")]
  serial: Option<String>,
  /// device change status
  #[serde(rename = "status_report")]
  status_report: Option<String>,
  /// device node world wide name
  #[serde(rename = "wwnn")]
  wwnn: Option<String>
}

impl CreateHardwareTapeNameResponseNodeRescanReportItem {
  pub fn new() -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    CreateHardwareTapeNameResponseNodeRescanReportItem {
      devicename: None,
      path: None,
      product: None,
      serial: None,
      status_report: None,
      wwnn: None
    }
  }

  pub fn set_devicename(&mut self, devicename: String) {
    self.devicename = Some(devicename);
  }

  pub fn with_devicename(mut self, devicename: String) -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    self.devicename = Some(devicename);
    self
  }

  pub fn devicename(&self) -> Option<&String> {
    self.devicename.as_ref()
  }

  pub fn reset_devicename(&mut self) {
    self.devicename = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_product(&mut self, product: String) {
    self.product = Some(product);
  }

  pub fn with_product(mut self, product: String) -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    self.product = Some(product);
    self
  }

  pub fn product(&self) -> Option<&String> {
    self.product.as_ref()
  }

  pub fn reset_product(&mut self) {
    self.product = None;
  }

  pub fn set_serial(&mut self, serial: String) {
    self.serial = Some(serial);
  }

  pub fn with_serial(mut self, serial: String) -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    self.serial = Some(serial);
    self
  }

  pub fn serial(&self) -> Option<&String> {
    self.serial.as_ref()
  }

  pub fn reset_serial(&mut self) {
    self.serial = None;
  }

  pub fn set_status_report(&mut self, status_report: String) {
    self.status_report = Some(status_report);
  }

  pub fn with_status_report(mut self, status_report: String) -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    self.status_report = Some(status_report);
    self
  }

  pub fn status_report(&self) -> Option<&String> {
    self.status_report.as_ref()
  }

  pub fn reset_status_report(&mut self) {
    self.status_report = None;
  }

  pub fn set_wwnn(&mut self, wwnn: String) {
    self.wwnn = Some(wwnn);
  }

  pub fn with_wwnn(mut self, wwnn: String) -> CreateHardwareTapeNameResponseNodeRescanReportItem {
    self.wwnn = Some(wwnn);
    self
  }

  pub fn wwnn(&self) -> Option<&String> {
    self.wwnn.as_ref()
  }

  pub fn reset_wwnn(&mut self) {
    self.wwnn = None;
  }

}



