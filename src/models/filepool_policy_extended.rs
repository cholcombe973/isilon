/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FilepoolPolicyExtended {
  /// A list of actions to be taken for matching files
  #[serde(rename = "actions")]
  actions: Option<Vec<::models::FilepoolPolicyAction>>,
  /// The order in which this policy should be applied (relative to other policies)
  #[serde(rename = "apply_order")]
  apply_order: Option<i32>,
  /// The guid assigned to the cluster on which the account was created
  #[serde(rename = "birth_cluster_id")]
  birth_cluster_id: Option<String>,
  /// A description for this policy
  #[serde(rename = "description")]
  description: Option<String>,
  /// The file matching rules for this policy
  #[serde(rename = "file_matching_pattern")]
  file_matching_pattern: Option<::models::FilepoolPolicyFileMatchingPattern>,
  /// A unique identifier for this policy
  #[serde(rename = "id")]
  id: Option<i32>,
  /// A unique name for this policy
  #[serde(rename = "name")]
  name: Option<String>,
  /// Indicates whether this policy is in a good state (\"OK\") or disabled (\"disabled\")
  #[serde(rename = "state")]
  state: Option<String>,
  /// Gives further information to describe the state of this policy
  #[serde(rename = "state_details")]
  state_details: Option<String>
}

impl FilepoolPolicyExtended {
  pub fn new() -> FilepoolPolicyExtended {
    FilepoolPolicyExtended {
      actions: None,
      apply_order: None,
      birth_cluster_id: None,
      description: None,
      file_matching_pattern: None,
      id: None,
      name: None,
      state: None,
      state_details: None
    }
  }

  pub fn set_actions(&mut self, actions: Vec<::models::FilepoolPolicyAction>) {
    self.actions = Some(actions);
  }

  pub fn with_actions(mut self, actions: Vec<::models::FilepoolPolicyAction>) -> FilepoolPolicyExtended {
    self.actions = Some(actions);
    self
  }

  pub fn actions(&self) -> Option<&Vec<::models::FilepoolPolicyAction>> {
    self.actions.as_ref()
  }

  pub fn reset_actions(&mut self) {
    self.actions = None;
  }

  pub fn set_apply_order(&mut self, apply_order: i32) {
    self.apply_order = Some(apply_order);
  }

  pub fn with_apply_order(mut self, apply_order: i32) -> FilepoolPolicyExtended {
    self.apply_order = Some(apply_order);
    self
  }

  pub fn apply_order(&self) -> Option<&i32> {
    self.apply_order.as_ref()
  }

  pub fn reset_apply_order(&mut self) {
    self.apply_order = None;
  }

  pub fn set_birth_cluster_id(&mut self, birth_cluster_id: String) {
    self.birth_cluster_id = Some(birth_cluster_id);
  }

  pub fn with_birth_cluster_id(mut self, birth_cluster_id: String) -> FilepoolPolicyExtended {
    self.birth_cluster_id = Some(birth_cluster_id);
    self
  }

  pub fn birth_cluster_id(&self) -> Option<&String> {
    self.birth_cluster_id.as_ref()
  }

  pub fn reset_birth_cluster_id(&mut self) {
    self.birth_cluster_id = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> FilepoolPolicyExtended {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_file_matching_pattern(&mut self, file_matching_pattern: ::models::FilepoolPolicyFileMatchingPattern) {
    self.file_matching_pattern = Some(file_matching_pattern);
  }

  pub fn with_file_matching_pattern(mut self, file_matching_pattern: ::models::FilepoolPolicyFileMatchingPattern) -> FilepoolPolicyExtended {
    self.file_matching_pattern = Some(file_matching_pattern);
    self
  }

  pub fn file_matching_pattern(&self) -> Option<&::models::FilepoolPolicyFileMatchingPattern> {
    self.file_matching_pattern.as_ref()
  }

  pub fn reset_file_matching_pattern(&mut self) {
    self.file_matching_pattern = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> FilepoolPolicyExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> FilepoolPolicyExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> FilepoolPolicyExtended {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_state_details(&mut self, state_details: String) {
    self.state_details = Some(state_details);
  }

  pub fn with_state_details(mut self, state_details: String) -> FilepoolPolicyExtended {
    self.state_details = Some(state_details);
    self
  }

  pub fn state_details(&self) -> Option<&String> {
    self.state_details.as_ref()
  }

  pub fn reset_state_details(&mut self) {
    self.state_details = None;
  }

}



