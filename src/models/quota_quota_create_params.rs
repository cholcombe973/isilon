/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaQuotaCreateParams {
  /// If true, SMB shares using the quota directory see the quota thresholds as share size.
  #[serde(rename = "container")]
  container: Option<bool>,
  /// True if the quota provides enforcement, otherwise a accounting quota.
  #[serde(rename = "enforced")]
  enforced: bool,
  /// Force creation of quotas on the root of /ifs.
  #[serde(rename = "force")]
  force: Option<bool>,
  /// If true, quota governs snapshot data as well as head data.
  #[serde(rename = "include_snapshots")]
  include_snapshots: bool,
  /// The /ifs path governed.
  #[serde(rename = "path")]
  path: String,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "persona")]
  persona: Option<::models::AuthAccessAccessItemFileGroup>,
  /// 
  #[serde(rename = "thresholds")]
  thresholds: Option<::models::QuotaQuotaThresholds>,
  /// If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).
  #[serde(rename = "thresholds_include_overhead")]
  thresholds_include_overhead: bool,
  /// The type of quota.
  #[serde(rename = "type")]
  _type: String
}

impl QuotaQuotaCreateParams {
  pub fn new(enforced: bool, include_snapshots: bool, path: String, thresholds_include_overhead: bool, _type: String) -> QuotaQuotaCreateParams {
    QuotaQuotaCreateParams {
      container: None,
      enforced: enforced,
      force: None,
      include_snapshots: include_snapshots,
      path: path,
      persona: None,
      thresholds: None,
      thresholds_include_overhead: thresholds_include_overhead,
      _type: _type
    }
  }

  pub fn set_container(&mut self, container: bool) {
    self.container = Some(container);
  }

  pub fn with_container(mut self, container: bool) -> QuotaQuotaCreateParams {
    self.container = Some(container);
    self
  }

  pub fn container(&self) -> Option<&bool> {
    self.container.as_ref()
  }

  pub fn reset_container(&mut self) {
    self.container = None;
  }

  pub fn set_enforced(&mut self, enforced: bool) {
    self.enforced = enforced;
  }

  pub fn with_enforced(mut self, enforced: bool) -> QuotaQuotaCreateParams {
    self.enforced = enforced;
    self
  }

  pub fn enforced(&self) -> &bool {
    &self.enforced
  }


  pub fn set_force(&mut self, force: bool) {
    self.force = Some(force);
  }

  pub fn with_force(mut self, force: bool) -> QuotaQuotaCreateParams {
    self.force = Some(force);
    self
  }

  pub fn force(&self) -> Option<&bool> {
    self.force.as_ref()
  }

  pub fn reset_force(&mut self) {
    self.force = None;
  }

  pub fn set_include_snapshots(&mut self, include_snapshots: bool) {
    self.include_snapshots = include_snapshots;
  }

  pub fn with_include_snapshots(mut self, include_snapshots: bool) -> QuotaQuotaCreateParams {
    self.include_snapshots = include_snapshots;
    self
  }

  pub fn include_snapshots(&self) -> &bool {
    &self.include_snapshots
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> QuotaQuotaCreateParams {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_persona(&mut self, persona: ::models::AuthAccessAccessItemFileGroup) {
    self.persona = Some(persona);
  }

  pub fn with_persona(mut self, persona: ::models::AuthAccessAccessItemFileGroup) -> QuotaQuotaCreateParams {
    self.persona = Some(persona);
    self
  }

  pub fn persona(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.persona.as_ref()
  }

  pub fn reset_persona(&mut self) {
    self.persona = None;
  }

  pub fn set_thresholds(&mut self, thresholds: ::models::QuotaQuotaThresholds) {
    self.thresholds = Some(thresholds);
  }

  pub fn with_thresholds(mut self, thresholds: ::models::QuotaQuotaThresholds) -> QuotaQuotaCreateParams {
    self.thresholds = Some(thresholds);
    self
  }

  pub fn thresholds(&self) -> Option<&::models::QuotaQuotaThresholds> {
    self.thresholds.as_ref()
  }

  pub fn reset_thresholds(&mut self) {
    self.thresholds = None;
  }

  pub fn set_thresholds_include_overhead(&mut self, thresholds_include_overhead: bool) {
    self.thresholds_include_overhead = thresholds_include_overhead;
  }

  pub fn with_thresholds_include_overhead(mut self, thresholds_include_overhead: bool) -> QuotaQuotaCreateParams {
    self.thresholds_include_overhead = thresholds_include_overhead;
    self
  }

  pub fn thresholds_include_overhead(&self) -> &bool {
    &self.thresholds_include_overhead
  }


  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> QuotaQuotaCreateParams {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



