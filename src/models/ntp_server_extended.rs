/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NtpServerExtended {
  /// Field ID.
  #[serde(rename = "id")]
  id: String,
  /// Key value from key_file that maps to this server.
  #[serde(rename = "key")]
  key: Option<String>,
  /// NTP server name.
  #[serde(rename = "name")]
  name: String
}

impl NtpServerExtended {
  pub fn new(id: String, name: String) -> NtpServerExtended {
    NtpServerExtended {
      id: id,
      key: None,
      name: name
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> NtpServerExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> NtpServerExtended {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> NtpServerExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


}



