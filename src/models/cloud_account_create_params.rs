/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CloudAccountCreateParams : A cloud account object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudAccountCreateParams {
  /// (S3 only) The user id of the S3 account
  #[serde(rename = "account_id")]
  account_id: Option<String>,
  /// The username required to authenticate against the cloud service
  #[serde(rename = "account_username")]
  account_username: String,
  /// The guid of the cluster where this account was created
  #[serde(rename = "birth_cluster_id")]
  birth_cluster_id: Option<String>,
  /// Whether this account is explicitly enabled or disabled by a user
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// A valid authentication key for connecting to the cloud
  #[serde(rename = "key")]
  key: String,
  /// A unique name for this account
  #[serde(rename = "name")]
  name: String,
  /// The id or name of a proxy to be used by this account
  #[serde(rename = "proxy")]
  proxy: Option<String>,
  /// Indicates whether to skip SSL certificate validation when connecting to the cloud
  #[serde(rename = "skip_ssl_validation")]
  skip_ssl_validation: Option<bool>,
  /// (S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region
  #[serde(rename = "storage_region")]
  storage_region: Option<String>,
  /// (S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider
  #[serde(rename = "telemetry_bucket")]
  telemetry_bucket: Option<String>,
  /// The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3
  #[serde(rename = "type")]
  _type: String,
  /// A valid URI pointing to the location of the cloud storage
  #[serde(rename = "uri")]
  uri: String
}

impl CloudAccountCreateParams {
  /// A cloud account object
  pub fn new(account_username: String, key: String, name: String, _type: String, uri: String) -> CloudAccountCreateParams {
    CloudAccountCreateParams {
      account_id: None,
      account_username: account_username,
      birth_cluster_id: None,
      enabled: None,
      key: key,
      name: name,
      proxy: None,
      skip_ssl_validation: None,
      storage_region: None,
      telemetry_bucket: None,
      _type: _type,
      uri: uri
    }
  }

  pub fn set_account_id(&mut self, account_id: String) {
    self.account_id = Some(account_id);
  }

  pub fn with_account_id(mut self, account_id: String) -> CloudAccountCreateParams {
    self.account_id = Some(account_id);
    self
  }

  pub fn account_id(&self) -> Option<&String> {
    self.account_id.as_ref()
  }

  pub fn reset_account_id(&mut self) {
    self.account_id = None;
  }

  pub fn set_account_username(&mut self, account_username: String) {
    self.account_username = account_username;
  }

  pub fn with_account_username(mut self, account_username: String) -> CloudAccountCreateParams {
    self.account_username = account_username;
    self
  }

  pub fn account_username(&self) -> &String {
    &self.account_username
  }


  pub fn set_birth_cluster_id(&mut self, birth_cluster_id: String) {
    self.birth_cluster_id = Some(birth_cluster_id);
  }

  pub fn with_birth_cluster_id(mut self, birth_cluster_id: String) -> CloudAccountCreateParams {
    self.birth_cluster_id = Some(birth_cluster_id);
    self
  }

  pub fn birth_cluster_id(&self) -> Option<&String> {
    self.birth_cluster_id.as_ref()
  }

  pub fn reset_birth_cluster_id(&mut self) {
    self.birth_cluster_id = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> CloudAccountCreateParams {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_key(&mut self, key: String) {
    self.key = key;
  }

  pub fn with_key(mut self, key: String) -> CloudAccountCreateParams {
    self.key = key;
    self
  }

  pub fn key(&self) -> &String {
    &self.key
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> CloudAccountCreateParams {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_proxy(&mut self, proxy: String) {
    self.proxy = Some(proxy);
  }

  pub fn with_proxy(mut self, proxy: String) -> CloudAccountCreateParams {
    self.proxy = Some(proxy);
    self
  }

  pub fn proxy(&self) -> Option<&String> {
    self.proxy.as_ref()
  }

  pub fn reset_proxy(&mut self) {
    self.proxy = None;
  }

  pub fn set_skip_ssl_validation(&mut self, skip_ssl_validation: bool) {
    self.skip_ssl_validation = Some(skip_ssl_validation);
  }

  pub fn with_skip_ssl_validation(mut self, skip_ssl_validation: bool) -> CloudAccountCreateParams {
    self.skip_ssl_validation = Some(skip_ssl_validation);
    self
  }

  pub fn skip_ssl_validation(&self) -> Option<&bool> {
    self.skip_ssl_validation.as_ref()
  }

  pub fn reset_skip_ssl_validation(&mut self) {
    self.skip_ssl_validation = None;
  }

  pub fn set_storage_region(&mut self, storage_region: String) {
    self.storage_region = Some(storage_region);
  }

  pub fn with_storage_region(mut self, storage_region: String) -> CloudAccountCreateParams {
    self.storage_region = Some(storage_region);
    self
  }

  pub fn storage_region(&self) -> Option<&String> {
    self.storage_region.as_ref()
  }

  pub fn reset_storage_region(&mut self) {
    self.storage_region = None;
  }

  pub fn set_telemetry_bucket(&mut self, telemetry_bucket: String) {
    self.telemetry_bucket = Some(telemetry_bucket);
  }

  pub fn with_telemetry_bucket(mut self, telemetry_bucket: String) -> CloudAccountCreateParams {
    self.telemetry_bucket = Some(telemetry_bucket);
    self
  }

  pub fn telemetry_bucket(&self) -> Option<&String> {
    self.telemetry_bucket.as_ref()
  }

  pub fn reset_telemetry_bucket(&mut self) {
    self.telemetry_bucket = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> CloudAccountCreateParams {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_uri(&mut self, uri: String) {
    self.uri = uri;
  }

  pub fn with_uri(mut self, uri: String) -> CloudAccountCreateParams {
    self.uri = uri;
    self
  }

  pub fn uri(&self) -> &String {
    &self.uri
  }


}



