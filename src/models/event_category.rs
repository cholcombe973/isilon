/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventCategory {
  /// Numeric identifier of eventgroup category.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Name of category.
  #[serde(rename = "id_name")]
  id_name: Option<String>,
  /// Description of category.
  #[serde(rename = "name")]
  name: Option<String>
}

impl EventCategory {
  pub fn new() -> EventCategory {
    EventCategory {
      id: None,
      id_name: None,
      name: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> EventCategory {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_id_name(&mut self, id_name: String) {
    self.id_name = Some(id_name);
  }

  pub fn with_id_name(mut self, id_name: String) -> EventCategory {
    self.id_name = Some(id_name);
    self
  }

  pub fn id_name(&self) -> Option<&String> {
    self.id_name.as_ref()
  }

  pub fn reset_id_name(&mut self) {
    self.id_name = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> EventCategory {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



