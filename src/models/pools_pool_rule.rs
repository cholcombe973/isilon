/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PoolsPoolRule {
  /// Description for the provisioning rule.
  #[serde(rename = "description")]
  description: Option<String>,
  /// Interface name the provisioning rule applies to.
  #[serde(rename = "iface")]
  iface: Option<String>,
  /// Name of the provisioning rule.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Node type the provisioning rule applies to.
  #[serde(rename = "node_type")]
  node_type: Option<String>
}

impl PoolsPoolRule {
  pub fn new() -> PoolsPoolRule {
    PoolsPoolRule {
      description: None,
      iface: None,
      name: None,
      node_type: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> PoolsPoolRule {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_iface(&mut self, iface: String) {
    self.iface = Some(iface);
  }

  pub fn with_iface(mut self, iface: String) -> PoolsPoolRule {
    self.iface = Some(iface);
    self
  }

  pub fn iface(&self) -> Option<&String> {
    self.iface.as_ref()
  }

  pub fn reset_iface(&mut self) {
    self.iface = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PoolsPoolRule {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_node_type(&mut self, node_type: String) {
    self.node_type = Some(node_type);
  }

  pub fn with_node_type(mut self, node_type: String) -> PoolsPoolRule {
    self.node_type = Some(node_type);
    self
  }

  pub fn node_type(&self) -> Option<&String> {
    self.node_type.as_ref()
  }

  pub fn reset_node_type(&mut self) {
    self.node_type = None;
  }

}



