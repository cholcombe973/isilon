/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthUsersExtended {
  #[serde(rename = "users")]
  users: Option<Vec<::models::MappingUsersLookupMappingItemUser>>,
  /// Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
  #[serde(rename = "resume")]
  resume: Option<String>
}

impl AuthUsersExtended {
  pub fn new() -> AuthUsersExtended {
    AuthUsersExtended {
      users: None,
      resume: None
    }
  }

  pub fn set_users(&mut self, users: Vec<::models::MappingUsersLookupMappingItemUser>) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: Vec<::models::MappingUsersLookupMappingItemUser>) -> AuthUsersExtended {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&Vec<::models::MappingUsersLookupMappingItemUser>> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

  pub fn set_resume(&mut self, resume: String) {
    self.resume = Some(resume);
  }

  pub fn with_resume(mut self, resume: String) -> AuthUsersExtended {
    self.resume = Some(resume);
    self
  }

  pub fn resume(&self) -> Option<&String> {
    self.resume.as_ref()
  }

  pub fn reset_resume(&mut self) {
    self.resume = None;
  }

}



