/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpDiagnosticsDiagnostics {
  /// Diagnostics level for ndmp.
  #[serde(rename = "diag_level")]
  diag_level: Option<i32>,
  /// The version of the ndmp protocol.
  #[serde(rename = "protocol_version")]
  protocol_version: Option<i32>,
  /// Trace level for ndmp.
  #[serde(rename = "trace_level")]
  trace_level: Option<String>
}

impl NdmpDiagnosticsDiagnostics {
  pub fn new() -> NdmpDiagnosticsDiagnostics {
    NdmpDiagnosticsDiagnostics {
      diag_level: None,
      protocol_version: None,
      trace_level: None
    }
  }

  pub fn set_diag_level(&mut self, diag_level: i32) {
    self.diag_level = Some(diag_level);
  }

  pub fn with_diag_level(mut self, diag_level: i32) -> NdmpDiagnosticsDiagnostics {
    self.diag_level = Some(diag_level);
    self
  }

  pub fn diag_level(&self) -> Option<&i32> {
    self.diag_level.as_ref()
  }

  pub fn reset_diag_level(&mut self) {
    self.diag_level = None;
  }

  pub fn set_protocol_version(&mut self, protocol_version: i32) {
    self.protocol_version = Some(protocol_version);
  }

  pub fn with_protocol_version(mut self, protocol_version: i32) -> NdmpDiagnosticsDiagnostics {
    self.protocol_version = Some(protocol_version);
    self
  }

  pub fn protocol_version(&self) -> Option<&i32> {
    self.protocol_version.as_ref()
  }

  pub fn reset_protocol_version(&mut self) {
    self.protocol_version = None;
  }

  pub fn set_trace_level(&mut self, trace_level: String) {
    self.trace_level = Some(trace_level);
  }

  pub fn with_trace_level(mut self, trace_level: String) -> NdmpDiagnosticsDiagnostics {
    self.trace_level = Some(trace_level);
    self
  }

  pub fn trace_level(&self) -> Option<&String> {
    self.trace_level.as_ref()
  }

  pub fn reset_trace_level(&mut self) {
    self.trace_level = None;
  }

}



