/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsKrb5RealmsRealmItem {
  /// Specifies the administrative server hostname.
  #[serde(rename = "admin_server")]
  admin_server: Option<String>,
  /// Specifies the default domain mapped to the realm.
  #[serde(rename = "default_domain")]
  default_domain: Option<String>,
  /// ID of realm
  #[serde(rename = "id")]
  id: Option<String>,
  /// If true, indicates that the realm is the default.
  #[serde(rename = "is_default_realm")]
  is_default_realm: Option<bool>,
  /// If true, indicates that the realm is joined.
  #[serde(rename = "is_joined")]
  is_joined: Option<bool>,
  /// Specifies the list of KDC hostnames.
  #[serde(rename = "kdc")]
  kdc: Option<Vec<String>>,
  /// Specifies the name of the realm.
  #[serde(rename = "realm")]
  realm: Option<String>
}

impl SettingsKrb5RealmsRealmItem {
  pub fn new() -> SettingsKrb5RealmsRealmItem {
    SettingsKrb5RealmsRealmItem {
      admin_server: None,
      default_domain: None,
      id: None,
      is_default_realm: None,
      is_joined: None,
      kdc: None,
      realm: None
    }
  }

  pub fn set_admin_server(&mut self, admin_server: String) {
    self.admin_server = Some(admin_server);
  }

  pub fn with_admin_server(mut self, admin_server: String) -> SettingsKrb5RealmsRealmItem {
    self.admin_server = Some(admin_server);
    self
  }

  pub fn admin_server(&self) -> Option<&String> {
    self.admin_server.as_ref()
  }

  pub fn reset_admin_server(&mut self) {
    self.admin_server = None;
  }

  pub fn set_default_domain(&mut self, default_domain: String) {
    self.default_domain = Some(default_domain);
  }

  pub fn with_default_domain(mut self, default_domain: String) -> SettingsKrb5RealmsRealmItem {
    self.default_domain = Some(default_domain);
    self
  }

  pub fn default_domain(&self) -> Option<&String> {
    self.default_domain.as_ref()
  }

  pub fn reset_default_domain(&mut self) {
    self.default_domain = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> SettingsKrb5RealmsRealmItem {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_is_default_realm(&mut self, is_default_realm: bool) {
    self.is_default_realm = Some(is_default_realm);
  }

  pub fn with_is_default_realm(mut self, is_default_realm: bool) -> SettingsKrb5RealmsRealmItem {
    self.is_default_realm = Some(is_default_realm);
    self
  }

  pub fn is_default_realm(&self) -> Option<&bool> {
    self.is_default_realm.as_ref()
  }

  pub fn reset_is_default_realm(&mut self) {
    self.is_default_realm = None;
  }

  pub fn set_is_joined(&mut self, is_joined: bool) {
    self.is_joined = Some(is_joined);
  }

  pub fn with_is_joined(mut self, is_joined: bool) -> SettingsKrb5RealmsRealmItem {
    self.is_joined = Some(is_joined);
    self
  }

  pub fn is_joined(&self) -> Option<&bool> {
    self.is_joined.as_ref()
  }

  pub fn reset_is_joined(&mut self) {
    self.is_joined = None;
  }

  pub fn set_kdc(&mut self, kdc: Vec<String>) {
    self.kdc = Some(kdc);
  }

  pub fn with_kdc(mut self, kdc: Vec<String>) -> SettingsKrb5RealmsRealmItem {
    self.kdc = Some(kdc);
    self
  }

  pub fn kdc(&self) -> Option<&Vec<String>> {
    self.kdc.as_ref()
  }

  pub fn reset_kdc(&mut self) {
    self.kdc = None;
  }

  pub fn set_realm(&mut self, realm: String) {
    self.realm = Some(realm);
  }

  pub fn with_realm(mut self, realm: String) -> SettingsKrb5RealmsRealmItem {
    self.realm = Some(realm);
    self
  }

  pub fn realm(&self) -> Option<&String> {
    self.realm.as_ref()
  }

  pub fn reset_realm(&mut self) {
    self.realm = None;
  }

}



