/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResultHistogram {
  /// Access time enabled.
  #[serde(rename = "atime_enabled")]
  atime_enabled: bool,
  /// User attribute count.
  #[serde(rename = "attribute_count")]
  attribute_count: i32,
  /// Unix Epoch time of start of results collection job.
  #[serde(rename = "begin_time")]
  begin_time: i32,
  /// Histogram data of specified file count parameter.
  #[serde(rename = "histogram")]
  histogram: Vec<::models::ResultHistogramHistogramItem>
}

impl ResultHistogram {
  pub fn new(atime_enabled: bool, attribute_count: i32, begin_time: i32, histogram: Vec<::models::ResultHistogramHistogramItem>) -> ResultHistogram {
    ResultHistogram {
      atime_enabled: atime_enabled,
      attribute_count: attribute_count,
      begin_time: begin_time,
      histogram: histogram
    }
  }

  pub fn set_atime_enabled(&mut self, atime_enabled: bool) {
    self.atime_enabled = atime_enabled;
  }

  pub fn with_atime_enabled(mut self, atime_enabled: bool) -> ResultHistogram {
    self.atime_enabled = atime_enabled;
    self
  }

  pub fn atime_enabled(&self) -> &bool {
    &self.atime_enabled
  }


  pub fn set_attribute_count(&mut self, attribute_count: i32) {
    self.attribute_count = attribute_count;
  }

  pub fn with_attribute_count(mut self, attribute_count: i32) -> ResultHistogram {
    self.attribute_count = attribute_count;
    self
  }

  pub fn attribute_count(&self) -> &i32 {
    &self.attribute_count
  }


  pub fn set_begin_time(&mut self, begin_time: i32) {
    self.begin_time = begin_time;
  }

  pub fn with_begin_time(mut self, begin_time: i32) -> ResultHistogram {
    self.begin_time = begin_time;
    self
  }

  pub fn begin_time(&self) -> &i32 {
    &self.begin_time
  }


  pub fn set_histogram(&mut self, histogram: Vec<::models::ResultHistogramHistogramItem>) {
    self.histogram = histogram;
  }

  pub fn with_histogram(mut self, histogram: Vec<::models::ResultHistogramHistogramItem>) -> ResultHistogram {
    self.histogram = histogram;
    self
  }

  pub fn histogram(&self) -> &Vec<::models::ResultHistogramHistogramItem> {
    &self.histogram
  }


}



