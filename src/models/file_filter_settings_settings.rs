/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FileFilterSettingsSettings {
  /// List of file extensions to be filtered.
  #[serde(rename = "file_filter_extensions")]
  file_filter_extensions: Option<Vec<String>>,
  /// Specifies if filter list is for deny or allow. Default is deny.
  #[serde(rename = "file_filter_type")]
  file_filter_type: Option<String>,
  /// Indicates whether file filtering is enabled on this zone.
  #[serde(rename = "file_filtering_enabled")]
  file_filtering_enabled: Option<bool>
}

impl FileFilterSettingsSettings {
  pub fn new() -> FileFilterSettingsSettings {
    FileFilterSettingsSettings {
      file_filter_extensions: None,
      file_filter_type: None,
      file_filtering_enabled: None
    }
  }

  pub fn set_file_filter_extensions(&mut self, file_filter_extensions: Vec<String>) {
    self.file_filter_extensions = Some(file_filter_extensions);
  }

  pub fn with_file_filter_extensions(mut self, file_filter_extensions: Vec<String>) -> FileFilterSettingsSettings {
    self.file_filter_extensions = Some(file_filter_extensions);
    self
  }

  pub fn file_filter_extensions(&self) -> Option<&Vec<String>> {
    self.file_filter_extensions.as_ref()
  }

  pub fn reset_file_filter_extensions(&mut self) {
    self.file_filter_extensions = None;
  }

  pub fn set_file_filter_type(&mut self, file_filter_type: String) {
    self.file_filter_type = Some(file_filter_type);
  }

  pub fn with_file_filter_type(mut self, file_filter_type: String) -> FileFilterSettingsSettings {
    self.file_filter_type = Some(file_filter_type);
    self
  }

  pub fn file_filter_type(&self) -> Option<&String> {
    self.file_filter_type.as_ref()
  }

  pub fn reset_file_filter_type(&mut self) {
    self.file_filter_type = None;
  }

  pub fn set_file_filtering_enabled(&mut self, file_filtering_enabled: bool) {
    self.file_filtering_enabled = Some(file_filtering_enabled);
  }

  pub fn with_file_filtering_enabled(mut self, file_filtering_enabled: bool) -> FileFilterSettingsSettings {
    self.file_filtering_enabled = Some(file_filtering_enabled);
    self
  }

  pub fn file_filtering_enabled(&self) -> Option<&bool> {
    self.file_filtering_enabled.as_ref()
  }

  pub fn reset_file_filtering_enabled(&mut self) {
    self.file_filtering_enabled = None;
  }

}



