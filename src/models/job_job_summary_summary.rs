/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobJobSummarySummary {
  /// Whether the cluster is in a degraded state.  Note this is from the perspective of the node handling the query, which might be different from another node.
  #[serde(rename = "cluster_is_degraded")]
  cluster_is_degraded: bool,
  /// Whether isi_job_d instances on all up nodes in the cluster are connected to the coordinator.
  #[serde(rename = "connected")]
  connected: bool,
  /// The devid of the job engine coordinator.
  #[serde(rename = "coordinator")]
  coordinator: i32,
  /// If connected=false, this is the set of devids that are not connected to the coordinator.
  #[serde(rename = "disconnected_nodes")]
  disconnected_nodes: Option<Vec<i32>>,
  /// Whether the cluster has any down or read-only nodes.  These nodes are not considered in the connected property.
  #[serde(rename = "down_or_read_only_nodes")]
  down_or_read_only_nodes: bool,
  /// The job ID to be assigned to the next job.
  #[serde(rename = "next_jid")]
  next_jid: i32,
  /// Whether the job engine would allow most jobs to run even when the cluster is in a degraded state.
  #[serde(rename = "run_degraded")]
  run_degraded: bool,
  /// Whether the coordinator has recently gathered statistics for all nodes in the cluster.
  #[serde(rename = "stats_ready")]
  stats_ready: bool
}

impl JobJobSummarySummary {
  pub fn new(cluster_is_degraded: bool, connected: bool, coordinator: i32, down_or_read_only_nodes: bool, next_jid: i32, run_degraded: bool, stats_ready: bool) -> JobJobSummarySummary {
    JobJobSummarySummary {
      cluster_is_degraded: cluster_is_degraded,
      connected: connected,
      coordinator: coordinator,
      disconnected_nodes: None,
      down_or_read_only_nodes: down_or_read_only_nodes,
      next_jid: next_jid,
      run_degraded: run_degraded,
      stats_ready: stats_ready
    }
  }

  pub fn set_cluster_is_degraded(&mut self, cluster_is_degraded: bool) {
    self.cluster_is_degraded = cluster_is_degraded;
  }

  pub fn with_cluster_is_degraded(mut self, cluster_is_degraded: bool) -> JobJobSummarySummary {
    self.cluster_is_degraded = cluster_is_degraded;
    self
  }

  pub fn cluster_is_degraded(&self) -> &bool {
    &self.cluster_is_degraded
  }


  pub fn set_connected(&mut self, connected: bool) {
    self.connected = connected;
  }

  pub fn with_connected(mut self, connected: bool) -> JobJobSummarySummary {
    self.connected = connected;
    self
  }

  pub fn connected(&self) -> &bool {
    &self.connected
  }


  pub fn set_coordinator(&mut self, coordinator: i32) {
    self.coordinator = coordinator;
  }

  pub fn with_coordinator(mut self, coordinator: i32) -> JobJobSummarySummary {
    self.coordinator = coordinator;
    self
  }

  pub fn coordinator(&self) -> &i32 {
    &self.coordinator
  }


  pub fn set_disconnected_nodes(&mut self, disconnected_nodes: Vec<i32>) {
    self.disconnected_nodes = Some(disconnected_nodes);
  }

  pub fn with_disconnected_nodes(mut self, disconnected_nodes: Vec<i32>) -> JobJobSummarySummary {
    self.disconnected_nodes = Some(disconnected_nodes);
    self
  }

  pub fn disconnected_nodes(&self) -> Option<&Vec<i32>> {
    self.disconnected_nodes.as_ref()
  }

  pub fn reset_disconnected_nodes(&mut self) {
    self.disconnected_nodes = None;
  }

  pub fn set_down_or_read_only_nodes(&mut self, down_or_read_only_nodes: bool) {
    self.down_or_read_only_nodes = down_or_read_only_nodes;
  }

  pub fn with_down_or_read_only_nodes(mut self, down_or_read_only_nodes: bool) -> JobJobSummarySummary {
    self.down_or_read_only_nodes = down_or_read_only_nodes;
    self
  }

  pub fn down_or_read_only_nodes(&self) -> &bool {
    &self.down_or_read_only_nodes
  }


  pub fn set_next_jid(&mut self, next_jid: i32) {
    self.next_jid = next_jid;
  }

  pub fn with_next_jid(mut self, next_jid: i32) -> JobJobSummarySummary {
    self.next_jid = next_jid;
    self
  }

  pub fn next_jid(&self) -> &i32 {
    &self.next_jid
  }


  pub fn set_run_degraded(&mut self, run_degraded: bool) {
    self.run_degraded = run_degraded;
  }

  pub fn with_run_degraded(mut self, run_degraded: bool) -> JobJobSummarySummary {
    self.run_degraded = run_degraded;
    self
  }

  pub fn run_degraded(&self) -> &bool {
    &self.run_degraded
  }


  pub fn set_stats_ready(&mut self, stats_ready: bool) {
    self.stats_ready = stats_ready;
  }

  pub fn with_stats_ready(mut self, stats_ready: bool) -> JobJobSummarySummary {
    self.stats_ready = stats_ready;
    self
  }

  pub fn stats_ready(&self) -> &bool {
    &self.stats_ready
  }


}



