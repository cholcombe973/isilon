/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaNotificationExtended {
  /// Send alert when rule matches.
  #[serde(rename = "action_alert")]
  action_alert: bool,
  /// Email a specific email address when rule matches.
  #[serde(rename = "action_email_address")]
  action_email_address: Option<String>,
  /// Email quota domain owner when rule matches.
  #[serde(rename = "action_email_owner")]
  action_email_owner: bool,
  /// Path of optional /ifs template file used for email actions.
  #[serde(rename = "email_template")]
  email_template: Option<String>,
  /// Time to wait between detections for rules triggered by user actions.
  #[serde(rename = "holdoff")]
  holdoff: Option<i32>,
  /// Schedule for rules that repeatedly notify.
  #[serde(rename = "schedule")]
  schedule: Option<String>,
  /// The condition detected.
  #[serde(rename = "condition")]
  condition: String,
  /// The system ID given to the rule.
  #[serde(rename = "id")]
  id: String,
  /// The quota threshold detected.
  #[serde(rename = "threshold")]
  threshold: String
}

impl QuotaNotificationExtended {
  pub fn new(action_alert: bool, action_email_owner: bool, condition: String, id: String, threshold: String) -> QuotaNotificationExtended {
    QuotaNotificationExtended {
      action_alert: action_alert,
      action_email_address: None,
      action_email_owner: action_email_owner,
      email_template: None,
      holdoff: None,
      schedule: None,
      condition: condition,
      id: id,
      threshold: threshold
    }
  }

  pub fn set_action_alert(&mut self, action_alert: bool) {
    self.action_alert = action_alert;
  }

  pub fn with_action_alert(mut self, action_alert: bool) -> QuotaNotificationExtended {
    self.action_alert = action_alert;
    self
  }

  pub fn action_alert(&self) -> &bool {
    &self.action_alert
  }


  pub fn set_action_email_address(&mut self, action_email_address: String) {
    self.action_email_address = Some(action_email_address);
  }

  pub fn with_action_email_address(mut self, action_email_address: String) -> QuotaNotificationExtended {
    self.action_email_address = Some(action_email_address);
    self
  }

  pub fn action_email_address(&self) -> Option<&String> {
    self.action_email_address.as_ref()
  }

  pub fn reset_action_email_address(&mut self) {
    self.action_email_address = None;
  }

  pub fn set_action_email_owner(&mut self, action_email_owner: bool) {
    self.action_email_owner = action_email_owner;
  }

  pub fn with_action_email_owner(mut self, action_email_owner: bool) -> QuotaNotificationExtended {
    self.action_email_owner = action_email_owner;
    self
  }

  pub fn action_email_owner(&self) -> &bool {
    &self.action_email_owner
  }


  pub fn set_email_template(&mut self, email_template: String) {
    self.email_template = Some(email_template);
  }

  pub fn with_email_template(mut self, email_template: String) -> QuotaNotificationExtended {
    self.email_template = Some(email_template);
    self
  }

  pub fn email_template(&self) -> Option<&String> {
    self.email_template.as_ref()
  }

  pub fn reset_email_template(&mut self) {
    self.email_template = None;
  }

  pub fn set_holdoff(&mut self, holdoff: i32) {
    self.holdoff = Some(holdoff);
  }

  pub fn with_holdoff(mut self, holdoff: i32) -> QuotaNotificationExtended {
    self.holdoff = Some(holdoff);
    self
  }

  pub fn holdoff(&self) -> Option<&i32> {
    self.holdoff.as_ref()
  }

  pub fn reset_holdoff(&mut self) {
    self.holdoff = None;
  }

  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = Some(schedule);
  }

  pub fn with_schedule(mut self, schedule: String) -> QuotaNotificationExtended {
    self.schedule = Some(schedule);
    self
  }

  pub fn schedule(&self) -> Option<&String> {
    self.schedule.as_ref()
  }

  pub fn reset_schedule(&mut self) {
    self.schedule = None;
  }

  pub fn set_condition(&mut self, condition: String) {
    self.condition = condition;
  }

  pub fn with_condition(mut self, condition: String) -> QuotaNotificationExtended {
    self.condition = condition;
    self
  }

  pub fn condition(&self) -> &String {
    &self.condition
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> QuotaNotificationExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_threshold(&mut self, threshold: String) {
    self.threshold = threshold;
  }

  pub fn with_threshold(mut self, threshold: String) -> QuotaNotificationExtended {
    self.threshold = threshold;
    self
  }

  pub fn threshold(&self) -> &String {
    &self.threshold
  }


}



