/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DirectoryQueryScopeConditions {
  #[serde(rename = "attr")]
  attr: Option<String>,
  #[serde(rename = "operator")]
  operator: Option<String>,
  #[serde(rename = "value")]
  value: Option<String>
}

impl DirectoryQueryScopeConditions {
  pub fn new() -> DirectoryQueryScopeConditions {
    DirectoryQueryScopeConditions {
      attr: None,
      operator: None,
      value: None
    }
  }

  pub fn set_attr(&mut self, attr: String) {
    self.attr = Some(attr);
  }

  pub fn with_attr(mut self, attr: String) -> DirectoryQueryScopeConditions {
    self.attr = Some(attr);
    self
  }

  pub fn attr(&self) -> Option<&String> {
    self.attr.as_ref()
  }

  pub fn reset_attr(&mut self) {
    self.attr = None;
  }

  pub fn set_operator(&mut self, operator: String) {
    self.operator = Some(operator);
  }

  pub fn with_operator(mut self, operator: String) -> DirectoryQueryScopeConditions {
    self.operator = Some(operator);
    self
  }

  pub fn operator(&self) -> Option<&String> {
    self.operator.as_ref()
  }

  pub fn reset_operator(&mut self) {
    self.operator = None;
  }

  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> DirectoryQueryScopeConditions {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



