/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TimezoneRegion {
  /// Clarifying comments on the region or timezone.
  #[serde(rename = "comments")]
  comments: Option<String>,
  /// A unique identifier for the timezone region.
  #[serde(rename = "id")]
  id: Option<String>,
  /// The name of the region.
  #[serde(rename = "region")]
  region: Option<String>,
  /// A timezone.
  #[serde(rename = "timezone")]
  timezone: Option<::models::TimezoneRegionTimezone>
}

impl TimezoneRegion {
  pub fn new() -> TimezoneRegion {
    TimezoneRegion {
      comments: None,
      id: None,
      region: None,
      timezone: None
    }
  }

  pub fn set_comments(&mut self, comments: String) {
    self.comments = Some(comments);
  }

  pub fn with_comments(mut self, comments: String) -> TimezoneRegion {
    self.comments = Some(comments);
    self
  }

  pub fn comments(&self) -> Option<&String> {
    self.comments.as_ref()
  }

  pub fn reset_comments(&mut self) {
    self.comments = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> TimezoneRegion {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_region(&mut self, region: String) {
    self.region = Some(region);
  }

  pub fn with_region(mut self, region: String) -> TimezoneRegion {
    self.region = Some(region);
    self
  }

  pub fn region(&self) -> Option<&String> {
    self.region.as_ref()
  }

  pub fn reset_region(&mut self) {
    self.region = None;
  }

  pub fn set_timezone(&mut self, timezone: ::models::TimezoneRegionTimezone) {
    self.timezone = Some(timezone);
  }

  pub fn with_timezone(mut self, timezone: ::models::TimezoneRegionTimezone) -> TimezoneRegion {
    self.timezone = Some(timezone);
    self
  }

  pub fn timezone(&self) -> Option<&::models::TimezoneRegionTimezone> {
    self.timezone.as_ref()
  }

  pub fn reset_timezone(&mut self) {
    self.timezone = None;
  }

}



