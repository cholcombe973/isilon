/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NetworkExternalSettings {
  /// Default client-side DNS settings for non-multitenancy aware programs
  #[serde(rename = "default_groupnet")]
  default_groupnet: String,
  /// Enable or disable Source Based Routing (Defaults to false)
  #[serde(rename = "sbr")]
  sbr: bool,
  /// Delay in seconds for IP rebalance.
  #[serde(rename = "sc_rebalance_delay")]
  sc_rebalance_delay: i32,
  /// List of client TCP ports.
  #[serde(rename = "tcp_ports")]
  tcp_ports: Vec<i32>
}

impl NetworkExternalSettings {
  pub fn new(default_groupnet: String, sbr: bool, sc_rebalance_delay: i32, tcp_ports: Vec<i32>) -> NetworkExternalSettings {
    NetworkExternalSettings {
      default_groupnet: default_groupnet,
      sbr: sbr,
      sc_rebalance_delay: sc_rebalance_delay,
      tcp_ports: tcp_ports
    }
  }

  pub fn set_default_groupnet(&mut self, default_groupnet: String) {
    self.default_groupnet = default_groupnet;
  }

  pub fn with_default_groupnet(mut self, default_groupnet: String) -> NetworkExternalSettings {
    self.default_groupnet = default_groupnet;
    self
  }

  pub fn default_groupnet(&self) -> &String {
    &self.default_groupnet
  }


  pub fn set_sbr(&mut self, sbr: bool) {
    self.sbr = sbr;
  }

  pub fn with_sbr(mut self, sbr: bool) -> NetworkExternalSettings {
    self.sbr = sbr;
    self
  }

  pub fn sbr(&self) -> &bool {
    &self.sbr
  }


  pub fn set_sc_rebalance_delay(&mut self, sc_rebalance_delay: i32) {
    self.sc_rebalance_delay = sc_rebalance_delay;
  }

  pub fn with_sc_rebalance_delay(mut self, sc_rebalance_delay: i32) -> NetworkExternalSettings {
    self.sc_rebalance_delay = sc_rebalance_delay;
    self
  }

  pub fn sc_rebalance_delay(&self) -> &i32 {
    &self.sc_rebalance_delay
  }


  pub fn set_tcp_ports(&mut self, tcp_ports: Vec<i32>) {
    self.tcp_ports = tcp_ports;
  }

  pub fn with_tcp_ports(mut self, tcp_ports: Vec<i32>) -> NetworkExternalSettings {
    self.tcp_ports = tcp_ports;
    self
  }

  pub fn tcp_ports(&self) -> &Vec<i32> {
    &self.tcp_ports
  }


}



