/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaQuotaThresholds {
  /// Usage bytes at which notifications will be sent but writes will not be denied.
  #[serde(rename = "advisory")]
  advisory: Option<i32>,
  /// Usage bytes at which further writes will be denied.
  #[serde(rename = "hard")]
  hard: Option<i32>,
  /// Usage bytes at which notifications will be sent and soft grace time will be started.
  #[serde(rename = "soft")]
  soft: Option<i32>,
  /// Time in seconds after which the soft threshold has been hit before writes will be denied.
  #[serde(rename = "soft_grace")]
  soft_grace: Option<i32>
}

impl QuotaQuotaThresholds {
  pub fn new() -> QuotaQuotaThresholds {
    QuotaQuotaThresholds {
      advisory: None,
      hard: None,
      soft: None,
      soft_grace: None
    }
  }

  pub fn set_advisory(&mut self, advisory: i32) {
    self.advisory = Some(advisory);
  }

  pub fn with_advisory(mut self, advisory: i32) -> QuotaQuotaThresholds {
    self.advisory = Some(advisory);
    self
  }

  pub fn advisory(&self) -> Option<&i32> {
    self.advisory.as_ref()
  }

  pub fn reset_advisory(&mut self) {
    self.advisory = None;
  }

  pub fn set_hard(&mut self, hard: i32) {
    self.hard = Some(hard);
  }

  pub fn with_hard(mut self, hard: i32) -> QuotaQuotaThresholds {
    self.hard = Some(hard);
    self
  }

  pub fn hard(&self) -> Option<&i32> {
    self.hard.as_ref()
  }

  pub fn reset_hard(&mut self) {
    self.hard = None;
  }

  pub fn set_soft(&mut self, soft: i32) {
    self.soft = Some(soft);
  }

  pub fn with_soft(mut self, soft: i32) -> QuotaQuotaThresholds {
    self.soft = Some(soft);
    self
  }

  pub fn soft(&self) -> Option<&i32> {
    self.soft.as_ref()
  }

  pub fn reset_soft(&mut self) {
    self.soft = None;
  }

  pub fn set_soft_grace(&mut self, soft_grace: i32) {
    self.soft_grace = Some(soft_grace);
  }

  pub fn with_soft_grace(mut self, soft_grace: i32) -> QuotaQuotaThresholds {
    self.soft_grace = Some(soft_grace);
    self
  }

  pub fn soft_grace(&self) -> Option<&i32> {
    self.soft_grace.as_ref()
  }

  pub fn reset_soft_grace(&mut self) {
    self.soft_grace = None;
  }

}



