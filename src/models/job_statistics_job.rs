/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobStatisticsJob {
  /// The job ID.
  #[serde(rename = "job_id")]
  job_id: i32,
  #[serde(rename = "nodes")]
  nodes: Vec<::models::JobStatisticsJobNode>,
  /// The current phase of the job.
  #[serde(rename = "phase")]
  phase: i32,
  /// The number of nodes participating in the job.
  #[serde(rename = "total_nodes")]
  total_nodes: i32
}

impl JobStatisticsJob {
  pub fn new(job_id: i32, nodes: Vec<::models::JobStatisticsJobNode>, phase: i32, total_nodes: i32) -> JobStatisticsJob {
    JobStatisticsJob {
      job_id: job_id,
      nodes: nodes,
      phase: phase,
      total_nodes: total_nodes
    }
  }

  pub fn set_job_id(&mut self, job_id: i32) {
    self.job_id = job_id;
  }

  pub fn with_job_id(mut self, job_id: i32) -> JobStatisticsJob {
    self.job_id = job_id;
    self
  }

  pub fn job_id(&self) -> &i32 {
    &self.job_id
  }


  pub fn set_nodes(&mut self, nodes: Vec<::models::JobStatisticsJobNode>) {
    self.nodes = nodes;
  }

  pub fn with_nodes(mut self, nodes: Vec<::models::JobStatisticsJobNode>) -> JobStatisticsJob {
    self.nodes = nodes;
    self
  }

  pub fn nodes(&self) -> &Vec<::models::JobStatisticsJobNode> {
    &self.nodes
  }


  pub fn set_phase(&mut self, phase: i32) {
    self.phase = phase;
  }

  pub fn with_phase(mut self, phase: i32) -> JobStatisticsJob {
    self.phase = phase;
    self
  }

  pub fn phase(&self) -> &i32 {
    &self.phase
  }


  pub fn set_total_nodes(&mut self, total_nodes: i32) {
    self.total_nodes = total_nodes;
  }

  pub fn with_total_nodes(mut self, total_nodes: i32) -> JobStatisticsJob {
    self.total_nodes = total_nodes;
    self
  }

  pub fn total_nodes(&self) -> &i32 {
    &self.total_nodes
  }


}



