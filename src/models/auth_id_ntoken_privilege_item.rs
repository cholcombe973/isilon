/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthIdNtokenPrivilegeItem {
  /// Specifies the ID of the privilege.
  #[serde(rename = "id")]
  id: String,
  /// Specifies the name of the privilege.
  #[serde(rename = "name")]
  name: Option<String>,
  /// True, if the privilege is read-only.
  #[serde(rename = "read_only")]
  read_only: Option<bool>
}

impl AuthIdNtokenPrivilegeItem {
  pub fn new(id: String) -> AuthIdNtokenPrivilegeItem {
    AuthIdNtokenPrivilegeItem {
      id: id,
      name: None,
      read_only: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> AuthIdNtokenPrivilegeItem {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> AuthIdNtokenPrivilegeItem {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_read_only(&mut self, read_only: bool) {
    self.read_only = Some(read_only);
  }

  pub fn with_read_only(mut self, read_only: bool) -> AuthIdNtokenPrivilegeItem {
    self.read_only = Some(read_only);
    self
  }

  pub fn read_only(&self) -> Option<&bool> {
    self.read_only.as_ref()
  }

  pub fn reset_read_only(&mut self) {
    self.read_only = None;
  }

}



