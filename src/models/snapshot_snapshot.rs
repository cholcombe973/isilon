/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotSnapshot {
  /// Alias name to create for this snapshot. If null, remove any alias.
  #[serde(rename = "alias")]
  alias: Option<String>,
  /// The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.
  #[serde(rename = "expires")]
  expires: Option<i32>,
  /// The user or system supplied snapshot name. This will be null for snapshots pending delete.
  #[serde(rename = "name")]
  name: Option<String>
}

impl SnapshotSnapshot {
  pub fn new() -> SnapshotSnapshot {
    SnapshotSnapshot {
      alias: None,
      expires: None,
      name: None
    }
  }

  pub fn set_alias(&mut self, alias: String) {
    self.alias = Some(alias);
  }

  pub fn with_alias(mut self, alias: String) -> SnapshotSnapshot {
    self.alias = Some(alias);
    self
  }

  pub fn alias(&self) -> Option<&String> {
    self.alias.as_ref()
  }

  pub fn reset_alias(&mut self) {
    self.alias = None;
  }

  pub fn set_expires(&mut self, expires: i32) {
    self.expires = Some(expires);
  }

  pub fn with_expires(mut self, expires: i32) -> SnapshotSnapshot {
    self.expires = Some(expires);
    self
  }

  pub fn expires(&self) -> Option<&i32> {
    self.expires.as_ref()
  }

  pub fn reset_expires(&mut self) {
    self.expires = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> SnapshotSnapshot {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



