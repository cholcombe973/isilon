/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReportsThreatsReport {
  /// The file that contained the threat.
  #[serde(rename = "file")]
  file: Option<String>,
  /// A unique identifier for the report.
  #[serde(rename = "id")]
  id: Option<String>,
  /// The id of the policy that found this threat.
  #[serde(rename = "policy_id")]
  policy_id: Option<String>,
  /// The action that was taken to remediate the threat.
  #[serde(rename = "remediation")]
  remediation: Option<String>,
  /// The id of the scan report this threat is associated with.
  #[serde(rename = "scan_id")]
  scan_id: Option<String>,
  /// A description of the threat that was found.
  #[serde(rename = "threat")]
  threat: Option<String>,
  #[serde(rename = "time")]
  time: Option<i32>
}

impl ReportsThreatsReport {
  pub fn new() -> ReportsThreatsReport {
    ReportsThreatsReport {
      file: None,
      id: None,
      policy_id: None,
      remediation: None,
      scan_id: None,
      threat: None,
      time: None
    }
  }

  pub fn set_file(&mut self, file: String) {
    self.file = Some(file);
  }

  pub fn with_file(mut self, file: String) -> ReportsThreatsReport {
    self.file = Some(file);
    self
  }

  pub fn file(&self) -> Option<&String> {
    self.file.as_ref()
  }

  pub fn reset_file(&mut self) {
    self.file = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ReportsThreatsReport {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_policy_id(&mut self, policy_id: String) {
    self.policy_id = Some(policy_id);
  }

  pub fn with_policy_id(mut self, policy_id: String) -> ReportsThreatsReport {
    self.policy_id = Some(policy_id);
    self
  }

  pub fn policy_id(&self) -> Option<&String> {
    self.policy_id.as_ref()
  }

  pub fn reset_policy_id(&mut self) {
    self.policy_id = None;
  }

  pub fn set_remediation(&mut self, remediation: String) {
    self.remediation = Some(remediation);
  }

  pub fn with_remediation(mut self, remediation: String) -> ReportsThreatsReport {
    self.remediation = Some(remediation);
    self
  }

  pub fn remediation(&self) -> Option<&String> {
    self.remediation.as_ref()
  }

  pub fn reset_remediation(&mut self) {
    self.remediation = None;
  }

  pub fn set_scan_id(&mut self, scan_id: String) {
    self.scan_id = Some(scan_id);
  }

  pub fn with_scan_id(mut self, scan_id: String) -> ReportsThreatsReport {
    self.scan_id = Some(scan_id);
    self
  }

  pub fn scan_id(&self) -> Option<&String> {
    self.scan_id.as_ref()
  }

  pub fn reset_scan_id(&mut self) {
    self.scan_id = None;
  }

  pub fn set_threat(&mut self, threat: String) {
    self.threat = Some(threat);
  }

  pub fn with_threat(mut self, threat: String) -> ReportsThreatsReport {
    self.threat = Some(threat);
    self
  }

  pub fn threat(&self) -> Option<&String> {
    self.threat.as_ref()
  }

  pub fn reset_threat(&mut self) {
    self.threat = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> ReportsThreatsReport {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

}



