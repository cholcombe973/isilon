/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NamespaceMetadataAttrs {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "namespace")]
  namespace: Option<String>,
  #[serde(rename = "op")]
  op: Option<String>,
  #[serde(rename = "value")]
  value: Option<String>
}

impl NamespaceMetadataAttrs {
  pub fn new() -> NamespaceMetadataAttrs {
    NamespaceMetadataAttrs {
      name: None,
      namespace: None,
      op: None,
      value: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NamespaceMetadataAttrs {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_namespace(&mut self, namespace: String) {
    self.namespace = Some(namespace);
  }

  pub fn with_namespace(mut self, namespace: String) -> NamespaceMetadataAttrs {
    self.namespace = Some(namespace);
    self
  }

  pub fn namespace(&self) -> Option<&String> {
    self.namespace.as_ref()
  }

  pub fn reset_namespace(&mut self) {
    self.namespace = None;
  }

  pub fn set_op(&mut self, op: String) {
    self.op = Some(op);
  }

  pub fn with_op(mut self, op: String) -> NamespaceMetadataAttrs {
    self.op = Some(op);
    self
  }

  pub fn op(&self) -> Option<&String> {
    self.op.as_ref()
  }

  pub fn reset_op(&mut self) {
    self.op = None;
  }

  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> NamespaceMetadataAttrs {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



