/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotSnapshotsSummarySummary {
  /// Total number of active snapshots.
  #[serde(rename = "active_count")]
  active_count: i32,
  /// Sum of sizes of active snapshots.
  #[serde(rename = "active_size")]
  active_size: i32,
  /// Total number of snapshot aliases.
  #[serde(rename = "aliases_count")]
  aliases_count: i32,
  /// Total number of snapshots.
  #[serde(rename = "count")]
  count: i32,
  /// Total number of delete-pending snapshots.
  #[serde(rename = "deleting_count")]
  deleting_count: i32,
  /// Sum of sizes of delete-pending snapshots.
  #[serde(rename = "deleting_size")]
  deleting_size: i32,
  /// Sum of shadow bytes of all snapshots.
  #[serde(rename = "shadow_bytes")]
  shadow_bytes: i32,
  /// Sum of sizes in bytes of all snapshots.
  #[serde(rename = "size")]
  size: i32
}

impl SnapshotSnapshotsSummarySummary {
  pub fn new(active_count: i32, active_size: i32, aliases_count: i32, count: i32, deleting_count: i32, deleting_size: i32, shadow_bytes: i32, size: i32) -> SnapshotSnapshotsSummarySummary {
    SnapshotSnapshotsSummarySummary {
      active_count: active_count,
      active_size: active_size,
      aliases_count: aliases_count,
      count: count,
      deleting_count: deleting_count,
      deleting_size: deleting_size,
      shadow_bytes: shadow_bytes,
      size: size
    }
  }

  pub fn set_active_count(&mut self, active_count: i32) {
    self.active_count = active_count;
  }

  pub fn with_active_count(mut self, active_count: i32) -> SnapshotSnapshotsSummarySummary {
    self.active_count = active_count;
    self
  }

  pub fn active_count(&self) -> &i32 {
    &self.active_count
  }


  pub fn set_active_size(&mut self, active_size: i32) {
    self.active_size = active_size;
  }

  pub fn with_active_size(mut self, active_size: i32) -> SnapshotSnapshotsSummarySummary {
    self.active_size = active_size;
    self
  }

  pub fn active_size(&self) -> &i32 {
    &self.active_size
  }


  pub fn set_aliases_count(&mut self, aliases_count: i32) {
    self.aliases_count = aliases_count;
  }

  pub fn with_aliases_count(mut self, aliases_count: i32) -> SnapshotSnapshotsSummarySummary {
    self.aliases_count = aliases_count;
    self
  }

  pub fn aliases_count(&self) -> &i32 {
    &self.aliases_count
  }


  pub fn set_count(&mut self, count: i32) {
    self.count = count;
  }

  pub fn with_count(mut self, count: i32) -> SnapshotSnapshotsSummarySummary {
    self.count = count;
    self
  }

  pub fn count(&self) -> &i32 {
    &self.count
  }


  pub fn set_deleting_count(&mut self, deleting_count: i32) {
    self.deleting_count = deleting_count;
  }

  pub fn with_deleting_count(mut self, deleting_count: i32) -> SnapshotSnapshotsSummarySummary {
    self.deleting_count = deleting_count;
    self
  }

  pub fn deleting_count(&self) -> &i32 {
    &self.deleting_count
  }


  pub fn set_deleting_size(&mut self, deleting_size: i32) {
    self.deleting_size = deleting_size;
  }

  pub fn with_deleting_size(mut self, deleting_size: i32) -> SnapshotSnapshotsSummarySummary {
    self.deleting_size = deleting_size;
    self
  }

  pub fn deleting_size(&self) -> &i32 {
    &self.deleting_size
  }


  pub fn set_shadow_bytes(&mut self, shadow_bytes: i32) {
    self.shadow_bytes = shadow_bytes;
  }

  pub fn with_shadow_bytes(mut self, shadow_bytes: i32) -> SnapshotSnapshotsSummarySummary {
    self.shadow_bytes = shadow_bytes;
    self
  }

  pub fn shadow_bytes(&self) -> &i32 {
    &self.shadow_bytes
  }


  pub fn set_size(&mut self, size: i32) {
    self.size = size;
  }

  pub fn with_size(mut self, size: i32) -> SnapshotSnapshotsSummarySummary {
    self.size = size;
    self
  }

  pub fn size(&self) -> &i32 {
    &self.size
  }


}



