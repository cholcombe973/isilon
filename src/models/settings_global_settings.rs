/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsGlobalSettings {
  /// Specifies zones that are audited when the protocol_auditing_enabled property is enabled.
  #[serde(rename = "audited_zones")]
  audited_zones: Option<Vec<String>>,
  /// Specifies that events past a certain date are forwarded by the audit CEE forwarder. Format these events as follows: 'Topic@YYYY-MM-DD HH:MM:SS'.
  #[serde(rename = "cee_log_time")]
  cee_log_time: Option<String>,
  /// Specifies a list of Common Event Enabler (CEE) server URIs. Protocol audit logs are sent to these URIs for external processing.
  #[serde(rename = "cee_server_uris")]
  cee_server_uris: Option<Vec<String>>,
  /// Specifies whether logging for API configuration changes are enabled.
  #[serde(rename = "config_auditing_enabled")]
  config_auditing_enabled: Option<bool>,
  /// Specifies whether configuration audit syslog messages are forwarded.
  #[serde(rename = "config_syslog_enabled")]
  config_syslog_enabled: Option<bool>,
  /// Specifies the hostname that is reported in protocol events from this cluster.
  #[serde(rename = "hostname")]
  hostname: Option<String>,
  /// Specifies if logging for the I/O stream is enabled.
  #[serde(rename = "protocol_auditing_enabled")]
  protocol_auditing_enabled: Option<bool>,
  /// Specifies that events past a specified date are forwarded by the audit syslog forwarder. Format these events as follows: 'Topic@YYYY-MM-DD HH:MM:SS' format
  #[serde(rename = "syslog_log_time")]
  syslog_log_time: Option<String>
}

impl SettingsGlobalSettings {
  pub fn new() -> SettingsGlobalSettings {
    SettingsGlobalSettings {
      audited_zones: None,
      cee_log_time: None,
      cee_server_uris: None,
      config_auditing_enabled: None,
      config_syslog_enabled: None,
      hostname: None,
      protocol_auditing_enabled: None,
      syslog_log_time: None
    }
  }

  pub fn set_audited_zones(&mut self, audited_zones: Vec<String>) {
    self.audited_zones = Some(audited_zones);
  }

  pub fn with_audited_zones(mut self, audited_zones: Vec<String>) -> SettingsGlobalSettings {
    self.audited_zones = Some(audited_zones);
    self
  }

  pub fn audited_zones(&self) -> Option<&Vec<String>> {
    self.audited_zones.as_ref()
  }

  pub fn reset_audited_zones(&mut self) {
    self.audited_zones = None;
  }

  pub fn set_cee_log_time(&mut self, cee_log_time: String) {
    self.cee_log_time = Some(cee_log_time);
  }

  pub fn with_cee_log_time(mut self, cee_log_time: String) -> SettingsGlobalSettings {
    self.cee_log_time = Some(cee_log_time);
    self
  }

  pub fn cee_log_time(&self) -> Option<&String> {
    self.cee_log_time.as_ref()
  }

  pub fn reset_cee_log_time(&mut self) {
    self.cee_log_time = None;
  }

  pub fn set_cee_server_uris(&mut self, cee_server_uris: Vec<String>) {
    self.cee_server_uris = Some(cee_server_uris);
  }

  pub fn with_cee_server_uris(mut self, cee_server_uris: Vec<String>) -> SettingsGlobalSettings {
    self.cee_server_uris = Some(cee_server_uris);
    self
  }

  pub fn cee_server_uris(&self) -> Option<&Vec<String>> {
    self.cee_server_uris.as_ref()
  }

  pub fn reset_cee_server_uris(&mut self) {
    self.cee_server_uris = None;
  }

  pub fn set_config_auditing_enabled(&mut self, config_auditing_enabled: bool) {
    self.config_auditing_enabled = Some(config_auditing_enabled);
  }

  pub fn with_config_auditing_enabled(mut self, config_auditing_enabled: bool) -> SettingsGlobalSettings {
    self.config_auditing_enabled = Some(config_auditing_enabled);
    self
  }

  pub fn config_auditing_enabled(&self) -> Option<&bool> {
    self.config_auditing_enabled.as_ref()
  }

  pub fn reset_config_auditing_enabled(&mut self) {
    self.config_auditing_enabled = None;
  }

  pub fn set_config_syslog_enabled(&mut self, config_syslog_enabled: bool) {
    self.config_syslog_enabled = Some(config_syslog_enabled);
  }

  pub fn with_config_syslog_enabled(mut self, config_syslog_enabled: bool) -> SettingsGlobalSettings {
    self.config_syslog_enabled = Some(config_syslog_enabled);
    self
  }

  pub fn config_syslog_enabled(&self) -> Option<&bool> {
    self.config_syslog_enabled.as_ref()
  }

  pub fn reset_config_syslog_enabled(&mut self) {
    self.config_syslog_enabled = None;
  }

  pub fn set_hostname(&mut self, hostname: String) {
    self.hostname = Some(hostname);
  }

  pub fn with_hostname(mut self, hostname: String) -> SettingsGlobalSettings {
    self.hostname = Some(hostname);
    self
  }

  pub fn hostname(&self) -> Option<&String> {
    self.hostname.as_ref()
  }

  pub fn reset_hostname(&mut self) {
    self.hostname = None;
  }

  pub fn set_protocol_auditing_enabled(&mut self, protocol_auditing_enabled: bool) {
    self.protocol_auditing_enabled = Some(protocol_auditing_enabled);
  }

  pub fn with_protocol_auditing_enabled(mut self, protocol_auditing_enabled: bool) -> SettingsGlobalSettings {
    self.protocol_auditing_enabled = Some(protocol_auditing_enabled);
    self
  }

  pub fn protocol_auditing_enabled(&self) -> Option<&bool> {
    self.protocol_auditing_enabled.as_ref()
  }

  pub fn reset_protocol_auditing_enabled(&mut self) {
    self.protocol_auditing_enabled = None;
  }

  pub fn set_syslog_log_time(&mut self, syslog_log_time: String) {
    self.syslog_log_time = Some(syslog_log_time);
  }

  pub fn with_syslog_log_time(mut self, syslog_log_time: String) -> SettingsGlobalSettings {
    self.syslog_log_time = Some(syslog_log_time);
    self
  }

  pub fn syslog_log_time(&self) -> Option<&String> {
    self.syslog_log_time.as_ref()
  }

  pub fn reset_syslog_log_time(&mut self) {
    self.syslog_log_time = None;
  }

}



