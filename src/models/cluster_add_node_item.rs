/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterAddNodeItem : Add Node information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterAddNodeItem {
  /// Allow down nodes (Default false).
  #[serde(rename = "allow_down")]
  allow_down: Option<bool>,
  /// Serial number of this node.
  #[serde(rename = "serial_number")]
  serial_number: String,
  /// Bypass hardware version checks (Default false).
  #[serde(rename = "skip_hardware_version_check")]
  skip_hardware_version_check: Option<bool>
}

impl ClusterAddNodeItem {
  /// Add Node information.
  pub fn new(serial_number: String) -> ClusterAddNodeItem {
    ClusterAddNodeItem {
      allow_down: None,
      serial_number: serial_number,
      skip_hardware_version_check: None
    }
  }

  pub fn set_allow_down(&mut self, allow_down: bool) {
    self.allow_down = Some(allow_down);
  }

  pub fn with_allow_down(mut self, allow_down: bool) -> ClusterAddNodeItem {
    self.allow_down = Some(allow_down);
    self
  }

  pub fn allow_down(&self) -> Option<&bool> {
    self.allow_down.as_ref()
  }

  pub fn reset_allow_down(&mut self) {
    self.allow_down = None;
  }

  pub fn set_serial_number(&mut self, serial_number: String) {
    self.serial_number = serial_number;
  }

  pub fn with_serial_number(mut self, serial_number: String) -> ClusterAddNodeItem {
    self.serial_number = serial_number;
    self
  }

  pub fn serial_number(&self) -> &String {
    &self.serial_number
  }


  pub fn set_skip_hardware_version_check(&mut self, skip_hardware_version_check: bool) {
    self.skip_hardware_version_check = Some(skip_hardware_version_check);
  }

  pub fn with_skip_hardware_version_check(mut self, skip_hardware_version_check: bool) -> ClusterAddNodeItem {
    self.skip_hardware_version_check = Some(skip_hardware_version_check);
    self
  }

  pub fn skip_hardware_version_check(&self) -> Option<&bool> {
    self.skip_hardware_version_check.as_ref()
  }

  pub fn reset_skip_hardware_version_check(&mut self) {
    self.skip_hardware_version_check = None;
  }

}



