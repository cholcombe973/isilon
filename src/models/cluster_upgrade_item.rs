/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterUpgradeItem : The settings necessary to start an upgrade.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterUpgradeItem {
  /// The location (path) of the upgrade image which must be within /ifs.
  #[serde(rename = "install_image_path")]
  install_image_path: Option<String>,
  /// The nodes (to be) scheduled for upgrade ordered by queue position number. Null if the cluster_state is 'partially upgraded' or upgrade_type is 'simultaneous'. One of the following values: [<lnn-1>, <lnn-2>, ... ], 'All', null
  #[serde(rename = "nodes_to_rolling_upgrade")]
  nodes_to_rolling_upgrade: Option<Vec<i32>>,
  /// Used to indicate that the pre-upgrade check should be skipped
  #[serde(rename = "skip_optional")]
  skip_optional: Option<bool>,
  /// The type of upgrade to perform. One of the following values: 'rolling', 'simultaneous'
  #[serde(rename = "upgrade_type")]
  upgrade_type: Option<String>
}

impl ClusterUpgradeItem {
  /// The settings necessary to start an upgrade.
  pub fn new() -> ClusterUpgradeItem {
    ClusterUpgradeItem {
      install_image_path: None,
      nodes_to_rolling_upgrade: None,
      skip_optional: None,
      upgrade_type: None
    }
  }

  pub fn set_install_image_path(&mut self, install_image_path: String) {
    self.install_image_path = Some(install_image_path);
  }

  pub fn with_install_image_path(mut self, install_image_path: String) -> ClusterUpgradeItem {
    self.install_image_path = Some(install_image_path);
    self
  }

  pub fn install_image_path(&self) -> Option<&String> {
    self.install_image_path.as_ref()
  }

  pub fn reset_install_image_path(&mut self) {
    self.install_image_path = None;
  }

  pub fn set_nodes_to_rolling_upgrade(&mut self, nodes_to_rolling_upgrade: Vec<i32>) {
    self.nodes_to_rolling_upgrade = Some(nodes_to_rolling_upgrade);
  }

  pub fn with_nodes_to_rolling_upgrade(mut self, nodes_to_rolling_upgrade: Vec<i32>) -> ClusterUpgradeItem {
    self.nodes_to_rolling_upgrade = Some(nodes_to_rolling_upgrade);
    self
  }

  pub fn nodes_to_rolling_upgrade(&self) -> Option<&Vec<i32>> {
    self.nodes_to_rolling_upgrade.as_ref()
  }

  pub fn reset_nodes_to_rolling_upgrade(&mut self) {
    self.nodes_to_rolling_upgrade = None;
  }

  pub fn set_skip_optional(&mut self, skip_optional: bool) {
    self.skip_optional = Some(skip_optional);
  }

  pub fn with_skip_optional(mut self, skip_optional: bool) -> ClusterUpgradeItem {
    self.skip_optional = Some(skip_optional);
    self
  }

  pub fn skip_optional(&self) -> Option<&bool> {
    self.skip_optional.as_ref()
  }

  pub fn reset_skip_optional(&mut self) {
    self.skip_optional = None;
  }

  pub fn set_upgrade_type(&mut self, upgrade_type: String) {
    self.upgrade_type = Some(upgrade_type);
  }

  pub fn with_upgrade_type(mut self, upgrade_type: String) -> ClusterUpgradeItem {
    self.upgrade_type = Some(upgrade_type);
    self
  }

  pub fn upgrade_type(&self) -> Option<&String> {
    self.upgrade_type.as_ref()
  }

  pub fn reset_upgrade_type(&mut self) {
    self.upgrade_type = None;
  }

}



