/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobJobSmartpoolstreeParams {
  /// Skip processing of regular files.
  #[serde(rename = "directory_only")]
  directory_only: Option<bool>,
  /// Calculate what would be done (dry run).
  #[serde(rename = "nop")]
  nop: Option<bool>,
  /// Apply policies but skip restriping.
  #[serde(rename = "policy_only")]
  policy_only: Option<bool>,
  /// Process children, recursively.
  #[serde(rename = "recurse")]
  recurse: Option<bool>
}

impl JobJobSmartpoolstreeParams {
  pub fn new() -> JobJobSmartpoolstreeParams {
    JobJobSmartpoolstreeParams {
      directory_only: None,
      nop: None,
      policy_only: None,
      recurse: None
    }
  }

  pub fn set_directory_only(&mut self, directory_only: bool) {
    self.directory_only = Some(directory_only);
  }

  pub fn with_directory_only(mut self, directory_only: bool) -> JobJobSmartpoolstreeParams {
    self.directory_only = Some(directory_only);
    self
  }

  pub fn directory_only(&self) -> Option<&bool> {
    self.directory_only.as_ref()
  }

  pub fn reset_directory_only(&mut self) {
    self.directory_only = None;
  }

  pub fn set_nop(&mut self, nop: bool) {
    self.nop = Some(nop);
  }

  pub fn with_nop(mut self, nop: bool) -> JobJobSmartpoolstreeParams {
    self.nop = Some(nop);
    self
  }

  pub fn nop(&self) -> Option<&bool> {
    self.nop.as_ref()
  }

  pub fn reset_nop(&mut self) {
    self.nop = None;
  }

  pub fn set_policy_only(&mut self, policy_only: bool) {
    self.policy_only = Some(policy_only);
  }

  pub fn with_policy_only(mut self, policy_only: bool) -> JobJobSmartpoolstreeParams {
    self.policy_only = Some(policy_only);
    self
  }

  pub fn policy_only(&self) -> Option<&bool> {
    self.policy_only.as_ref()
  }

  pub fn reset_policy_only(&mut self) {
    self.policy_only = None;
  }

  pub fn set_recurse(&mut self, recurse: bool) {
    self.recurse = Some(recurse);
  }

  pub fn with_recurse(mut self, recurse: bool) -> JobJobSmartpoolstreeParams {
    self.recurse = Some(recurse);
    self
  }

  pub fn recurse(&self) -> Option<&bool> {
    self.recurse.as_ref()
  }

  pub fn reset_recurse(&mut self) {
    self.recurse = None;
  }

}



