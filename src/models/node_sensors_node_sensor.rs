/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeSensorsNodeSensor {
  /// The count of values in this sensor group.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// The name of this sensor group.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The list of specific sensor value info in this sensor group.
  #[serde(rename = "values")]
  values: Option<Vec<::models::NodeSensorsNodeSensorValue>>
}

impl NodeSensorsNodeSensor {
  pub fn new() -> NodeSensorsNodeSensor {
    NodeSensorsNodeSensor {
      count: None,
      name: None,
      values: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> NodeSensorsNodeSensor {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NodeSensorsNodeSensor {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_values(&mut self, values: Vec<::models::NodeSensorsNodeSensorValue>) {
    self.values = Some(values);
  }

  pub fn with_values(mut self, values: Vec<::models::NodeSensorsNodeSensorValue>) -> NodeSensorsNodeSensor {
    self.values = Some(values);
    self
  }

  pub fn values(&self) -> Option<&Vec<::models::NodeSensorsNodeSensorValue>> {
    self.values.as_ref()
  }

  pub fn reset_values(&mut self) {
    self.values = None;
  }

}



