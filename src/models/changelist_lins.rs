/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChangelistLins {
  /// 
  #[serde(rename = "atime")]
  atime: Option<::models::ChangelistLinsCtime>,
  /// 
  #[serde(rename = "ctime")]
  ctime: Option<::models::ChangelistLinsCtime>,
  /// The LIN number of the file associated with the entry.
  #[serde(rename = "id")]
  id: String,
  /// 
  #[serde(rename = "mtime")]
  mtime: Option<::models::ChangelistLinsCtime>,
  /// The path to the file associated with the entry.
  #[serde(rename = "path")]
  path: String,
  /// The size of the file associated with the entry.
  #[serde(rename = "size")]
  size: i32,
  /// Type of file.
  #[serde(rename = "type")]
  _type: String
}

impl ChangelistLins {
  pub fn new(id: String, path: String, size: i32, _type: String) -> ChangelistLins {
    ChangelistLins {
      atime: None,
      ctime: None,
      id: id,
      mtime: None,
      path: path,
      size: size,
      _type: _type
    }
  }

  pub fn set_atime(&mut self, atime: ::models::ChangelistLinsCtime) {
    self.atime = Some(atime);
  }

  pub fn with_atime(mut self, atime: ::models::ChangelistLinsCtime) -> ChangelistLins {
    self.atime = Some(atime);
    self
  }

  pub fn atime(&self) -> Option<&::models::ChangelistLinsCtime> {
    self.atime.as_ref()
  }

  pub fn reset_atime(&mut self) {
    self.atime = None;
  }

  pub fn set_ctime(&mut self, ctime: ::models::ChangelistLinsCtime) {
    self.ctime = Some(ctime);
  }

  pub fn with_ctime(mut self, ctime: ::models::ChangelistLinsCtime) -> ChangelistLins {
    self.ctime = Some(ctime);
    self
  }

  pub fn ctime(&self) -> Option<&::models::ChangelistLinsCtime> {
    self.ctime.as_ref()
  }

  pub fn reset_ctime(&mut self) {
    self.ctime = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> ChangelistLins {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_mtime(&mut self, mtime: ::models::ChangelistLinsCtime) {
    self.mtime = Some(mtime);
  }

  pub fn with_mtime(mut self, mtime: ::models::ChangelistLinsCtime) -> ChangelistLins {
    self.mtime = Some(mtime);
    self
  }

  pub fn mtime(&self) -> Option<&::models::ChangelistLinsCtime> {
    self.mtime.as_ref()
  }

  pub fn reset_mtime(&mut self) {
    self.mtime = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> ChangelistLins {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_size(&mut self, size: i32) {
    self.size = size;
  }

  pub fn with_size(mut self, size: i32) -> ChangelistLins {
    self.size = size;
    self
  }

  pub fn size(&self) -> &i32 {
    &self.size
  }


  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> ChangelistLins {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



