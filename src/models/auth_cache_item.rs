/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AuthCacheItem : Flush security objects cache.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthCacheItem {
  /// Flush all objects in cache for access zone.
  #[serde(rename = "all")]
  all: Option<String>,
  /// Flush objects in cache for access zone specified by GID.
  #[serde(rename = "gid")]
  gid: Option<i32>,
  /// Flush objects in cache for access zone specified by group name.
  #[serde(rename = "group_name")]
  group_name: Option<String>,
  /// Flush objects in cache for access zone specified by authentication provider.
  #[serde(rename = "provider")]
  provider: Option<String>,
  /// Flush objects in cache for access zone specified by SID.
  #[serde(rename = "sid")]
  sid: Option<String>,
  /// Flush objects in cache for access zone specified by UID.
  #[serde(rename = "uid")]
  uid: Option<i32>,
  /// Flush objects in cache for access zone specified by user name.
  #[serde(rename = "user_name")]
  user_name: Option<String>
}

impl AuthCacheItem {
  /// Flush security objects cache.
  pub fn new() -> AuthCacheItem {
    AuthCacheItem {
      all: None,
      gid: None,
      group_name: None,
      provider: None,
      sid: None,
      uid: None,
      user_name: None
    }
  }

  pub fn set_all(&mut self, all: String) {
    self.all = Some(all);
  }

  pub fn with_all(mut self, all: String) -> AuthCacheItem {
    self.all = Some(all);
    self
  }

  pub fn all(&self) -> Option<&String> {
    self.all.as_ref()
  }

  pub fn reset_all(&mut self) {
    self.all = None;
  }

  pub fn set_gid(&mut self, gid: i32) {
    self.gid = Some(gid);
  }

  pub fn with_gid(mut self, gid: i32) -> AuthCacheItem {
    self.gid = Some(gid);
    self
  }

  pub fn gid(&self) -> Option<&i32> {
    self.gid.as_ref()
  }

  pub fn reset_gid(&mut self) {
    self.gid = None;
  }

  pub fn set_group_name(&mut self, group_name: String) {
    self.group_name = Some(group_name);
  }

  pub fn with_group_name(mut self, group_name: String) -> AuthCacheItem {
    self.group_name = Some(group_name);
    self
  }

  pub fn group_name(&self) -> Option<&String> {
    self.group_name.as_ref()
  }

  pub fn reset_group_name(&mut self) {
    self.group_name = None;
  }

  pub fn set_provider(&mut self, provider: String) {
    self.provider = Some(provider);
  }

  pub fn with_provider(mut self, provider: String) -> AuthCacheItem {
    self.provider = Some(provider);
    self
  }

  pub fn provider(&self) -> Option<&String> {
    self.provider.as_ref()
  }

  pub fn reset_provider(&mut self) {
    self.provider = None;
  }

  pub fn set_sid(&mut self, sid: String) {
    self.sid = Some(sid);
  }

  pub fn with_sid(mut self, sid: String) -> AuthCacheItem {
    self.sid = Some(sid);
    self
  }

  pub fn sid(&self) -> Option<&String> {
    self.sid.as_ref()
  }

  pub fn reset_sid(&mut self) {
    self.sid = None;
  }

  pub fn set_uid(&mut self, uid: i32) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: i32) -> AuthCacheItem {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&i32> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

  pub fn set_user_name(&mut self, user_name: String) {
    self.user_name = Some(user_name);
  }

  pub fn with_user_name(mut self, user_name: String) -> AuthCacheItem {
    self.user_name = Some(user_name);
    self
  }

  pub fn user_name(&self) -> Option<&String> {
    self.user_name.as_ref()
  }

  pub fn reset_user_name(&mut self) {
    self.user_name = None;
  }

}



