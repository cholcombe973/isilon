/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeDrivesPurposelistNodePurpose {
  /// String representation of this purpose for API use.
  #[serde(rename = "purpose")]
  purpose: Option<String>,
  /// A description of this purpose.
  #[serde(rename = "purpose_description")]
  purpose_description: Option<String>
}

impl NodeDrivesPurposelistNodePurpose {
  pub fn new() -> NodeDrivesPurposelistNodePurpose {
    NodeDrivesPurposelistNodePurpose {
      purpose: None,
      purpose_description: None
    }
  }

  pub fn set_purpose(&mut self, purpose: String) {
    self.purpose = Some(purpose);
  }

  pub fn with_purpose(mut self, purpose: String) -> NodeDrivesPurposelistNodePurpose {
    self.purpose = Some(purpose);
    self
  }

  pub fn purpose(&self) -> Option<&String> {
    self.purpose.as_ref()
  }

  pub fn reset_purpose(&mut self) {
    self.purpose = None;
  }

  pub fn set_purpose_description(&mut self, purpose_description: String) {
    self.purpose_description = Some(purpose_description);
  }

  pub fn with_purpose_description(mut self, purpose_description: String) -> NodeDrivesPurposelistNodePurpose {
    self.purpose_description = Some(purpose_description);
    self
  }

  pub fn purpose_description(&self) -> Option<&String> {
    self.purpose_description.as_ref()
  }

  pub fn reset_purpose_description(&mut self) {
    self.purpose_description = None;
  }

}



