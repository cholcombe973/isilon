/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DirectoryQueryScope {
  #[serde(rename = "conditions")]
  conditions: Option<Vec<::models::DirectoryQueryScopeConditions>>,
  #[serde(rename = "logic")]
  logic: Option<String>
}

impl DirectoryQueryScope {
  pub fn new() -> DirectoryQueryScope {
    DirectoryQueryScope {
      conditions: None,
      logic: None
    }
  }

  pub fn set_conditions(&mut self, conditions: Vec<::models::DirectoryQueryScopeConditions>) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: Vec<::models::DirectoryQueryScopeConditions>) -> DirectoryQueryScope {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&Vec<::models::DirectoryQueryScopeConditions>> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

  pub fn set_logic(&mut self, logic: String) {
    self.logic = Some(logic);
  }

  pub fn with_logic(mut self, logic: String) -> DirectoryQueryScope {
    self.logic = Some(logic);
    self
  }

  pub fn logic(&self) -> Option<&String> {
    self.logic.as_ref()
  }

  pub fn reset_logic(&mut self) {
    self.logic = None;
  }

}



