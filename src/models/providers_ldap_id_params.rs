/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProvidersLdapIdParams : Specifies the properties for the LDAP authentication provider.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProvidersLdapIdParams {
  /// Specifies the attribute name used when searching for alternate security identities.
  #[serde(rename = "alternate_security_identities_attribute")]
  alternate_security_identities_attribute: Option<String>,
  /// If true, enables authentication and identity management through the authentication provider.
  #[serde(rename = "authentication")]
  authentication: Option<bool>,
  /// If true, connects the provider to a random server.
  #[serde(rename = "balance_servers")]
  balance_servers: Option<bool>,
  /// Specifies the root of the tree in which to search identities.
  #[serde(rename = "base_dn")]
  base_dn: Option<String>,
  /// Specifies the distinguished name for binding to the LDAP server.
  #[serde(rename = "bind_dn")]
  bind_dn: Option<String>,
  /// Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.
  #[serde(rename = "bind_mechanism")]
  bind_mechanism: Option<String>,
  /// Specifies the password for the distinguished name for binding to the LDAP server.
  #[serde(rename = "bind_password")]
  bind_password: Option<String>,
  /// Specifies the timeout in seconds when binding to an LDAP server.
  #[serde(rename = "bind_timeout")]
  bind_timeout: Option<i32>,
  /// Specifies the path to the root certificates file.
  #[serde(rename = "certificate_authority_file")]
  certificate_authority_file: Option<String>,
  /// Specifies the time in seconds between provider online checks.
  #[serde(rename = "check_online_interval")]
  check_online_interval: Option<i32>,
  /// Specifies the canonical name.
  #[serde(rename = "cn_attribute")]
  cn_attribute: Option<String>,
  /// Automatically create the home directory on the first login.
  #[serde(rename = "create_home_directory")]
  create_home_directory: Option<bool>,
  /// Specifies the hashed password value.
  #[serde(rename = "crypt_password_attribute")]
  crypt_password_attribute: Option<String>,
  /// Specifies the LDAP Email attribute.
  #[serde(rename = "email_attribute")]
  email_attribute: Option<String>,
  /// If true, enables the LDAP provider.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// If true, allows the provider to enumerate groups.
  #[serde(rename = "enumerate_groups")]
  enumerate_groups: Option<bool>,
  /// If true, allows the provider to enumerate users.
  #[serde(rename = "enumerate_users")]
  enumerate_users: Option<bool>,
  /// Specifies the list of groups that can be resolved.
  #[serde(rename = "findable_groups")]
  findable_groups: Option<Vec<String>>,
  /// Specifies the list of users that can be resolved.
  #[serde(rename = "findable_users")]
  findable_users: Option<Vec<String>>,
  /// Specifies the LDAP GECOS attribute.
  #[serde(rename = "gecos_attribute")]
  gecos_attribute: Option<String>,
  /// Specifies the LDAP GID attribute.
  #[serde(rename = "gid_attribute")]
  gid_attribute: Option<String>,
  /// Specifies the distinguished name of the entry where LDAP searches for groups are started.
  #[serde(rename = "group_base_dn")]
  group_base_dn: Option<String>,
  /// Specifies the domain for this provider through which groups are qualified.
  #[serde(rename = "group_domain")]
  group_domain: Option<String>,
  /// Specifies the LDAP filter for group objects.
  #[serde(rename = "group_filter")]
  group_filter: Option<String>,
  /// Specifies the LDAP Group Members attribute.
  #[serde(rename = "group_members_attribute")]
  group_members_attribute: Option<String>,
  /// Specifies the depth from the base DN to perform LDAP searches.
  #[serde(rename = "group_search_scope")]
  group_search_scope: Option<String>,
  /// Specifies the path to the home directory template.
  #[serde(rename = "home_directory_template")]
  home_directory_template: Option<String>,
  /// Specifies the LDAP Homedir attribute.
  #[serde(rename = "homedir_attribute")]
  homedir_attribute: Option<String>,
  /// If true, continues over secure connections even if identity checks fail.
  #[serde(rename = "ignore_tls_errors")]
  ignore_tls_errors: Option<bool>,
  /// Specifies the groups that can be viewed in the provider.
  #[serde(rename = "listable_groups")]
  listable_groups: Option<Vec<String>>,
  /// Specifies the users that can be viewed in the provider.
  #[serde(rename = "listable_users")]
  listable_users: Option<Vec<String>>,
  /// Specifies the login shell path.
  #[serde(rename = "login_shell")]
  login_shell: Option<String>,
  /// Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.
  #[serde(rename = "member_of_attribute")]
  member_of_attribute: Option<String>,
  /// Specifies the name of the LDAP provider.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Specifies the LDAP UID attribute, which is used as the login name.
  #[serde(rename = "name_attribute")]
  name_attribute: Option<String>,
  /// Specifies the distinguished name of the entry where LDAP searches for netgroups are started.
  #[serde(rename = "netgroup_base_dn")]
  netgroup_base_dn: Option<String>,
  /// Specifies the LDAP filter for netgroup objects.
  #[serde(rename = "netgroup_filter")]
  netgroup_filter: Option<String>,
  /// Specifies the LDAP Netgroup Members attribute.
  #[serde(rename = "netgroup_members_attribute")]
  netgroup_members_attribute: Option<String>,
  /// Specifies the depth from the base DN to perform LDAP searches.
  #[serde(rename = "netgroup_search_scope")]
  netgroup_search_scope: Option<String>,
  /// Specifies the LDAP Netgroup Triple attribute.
  #[serde(rename = "netgroup_triple_attribute")]
  netgroup_triple_attribute: Option<String>,
  /// Normalizes group names to lowercase before look up.
  #[serde(rename = "normalize_groups")]
  normalize_groups: Option<bool>,
  /// Normalizes user names to lowercase before look up.
  #[serde(rename = "normalize_users")]
  normalize_users: Option<bool>,
  /// Specifies the LDAP NT Password attribute.
  #[serde(rename = "nt_password_attribute")]
  nt_password_attribute: Option<String>,
  /// Specifies which NTLM versions to support for users with NTLM-compatible credentials.
  #[serde(rename = "ntlm_support")]
  ntlm_support: Option<String>,
  /// Specifies the provider domain.
  #[serde(rename = "provider_domain")]
  provider_domain: Option<String>,
  /// Determines whether to continue over a non-TLS connection.
  #[serde(rename = "require_secure_connection")]
  require_secure_connection: Option<bool>,
  /// If true, checks the provider for filtered lists of findable and unfindable users and groups.
  #[serde(rename = "restrict_findable")]
  restrict_findable: Option<bool>,
  /// If true, checks the provider for filtered lists of listable and unlistable users and groups.
  #[serde(rename = "restrict_listable")]
  restrict_listable: Option<bool>,
  /// Specifies the default depth from the base DN to perform LDAP searches.
  #[serde(rename = "search_scope")]
  search_scope: Option<String>,
  /// Specifies the search timeout period in seconds.
  #[serde(rename = "search_timeout")]
  search_timeout: Option<i32>,
  /// Specifies the server URIs.
  #[serde(rename = "server_uris")]
  server_uris: Option<Vec<String>>,
  /// Sets the attribute name that indicates the absolute date to expire the account.
  #[serde(rename = "shadow_expire_attribute")]
  shadow_expire_attribute: Option<String>,
  /// Sets the attribute name that indicates the section of the shadow map that is used to store the flag value.
  #[serde(rename = "shadow_flag_attribute")]
  shadow_flag_attribute: Option<String>,
  /// Sets the attribute name that indicates the number of days of inactivity that is allowed for the user.
  #[serde(rename = "shadow_inactive_attribute")]
  shadow_inactive_attribute: Option<String>,
  /// Sets the attribute name that indicates the last change of the shadow information.
  #[serde(rename = "shadow_last_change_attribute")]
  shadow_last_change_attribute: Option<String>,
  /// Sets the attribute name that indicates the maximum number of days a password can be valid.
  #[serde(rename = "shadow_max_attribute")]
  shadow_max_attribute: Option<String>,
  /// Sets the attribute name that indicates the minimum number of days between shadow changes.
  #[serde(rename = "shadow_min_attribute")]
  shadow_min_attribute: Option<String>,
  /// Sets LDAP filter for shadow user objects.
  #[serde(rename = "shadow_user_filter")]
  shadow_user_filter: Option<String>,
  /// Sets the attribute name that indicates the number of days before the password expires to warn the user.
  #[serde(rename = "shadow_warning_attribute")]
  shadow_warning_attribute: Option<String>,
  /// Specifies the the LDAP Shell attribute.
  #[serde(rename = "shell_attribute")]
  shell_attribute: Option<String>,
  /// Specifies template to be used to create the LDAP provider. The list of templates can be found at /auth/providers/ldap-templates.  Any fields directly defined in your request will override the template values.
  #[serde(rename = "template")]
  template: Option<String>,
  /// Specifies the the LDAP UID Number attribute.
  #[serde(rename = "uid_attribute")]
  uid_attribute: Option<String>,
  /// Specifies the groups that cannot be resolved by the provider.
  #[serde(rename = "unfindable_groups")]
  unfindable_groups: Option<Vec<String>>,
  /// Specifies users that cannot be resolved by the provider.
  #[serde(rename = "unfindable_users")]
  unfindable_users: Option<Vec<String>>,
  /// Sets the LDAP Unique Group Members attribute.
  #[serde(rename = "unique_group_members_attribute")]
  unique_group_members_attribute: Option<String>,
  /// Specifies a group that cannot be listed by the provider.
  #[serde(rename = "unlistable_groups")]
  unlistable_groups: Option<Vec<String>>,
  /// Specifies a user that cannot be listed by the provider.
  #[serde(rename = "unlistable_users")]
  unlistable_users: Option<Vec<String>>,
  /// Specifies the distinguished name of the entry at which to start LDAP searches for users.
  #[serde(rename = "user_base_dn")]
  user_base_dn: Option<String>,
  /// Specifies the domain for this provider through which users are qualified.
  #[serde(rename = "user_domain")]
  user_domain: Option<String>,
  /// Specifies the LDAP filter for user objects.
  #[serde(rename = "user_filter")]
  user_filter: Option<String>,
  /// Specifies the depth from the base DN to perform LDAP searches.
  #[serde(rename = "user_search_scope")]
  user_search_scope: Option<String>
}

impl ProvidersLdapIdParams {
  /// Specifies the properties for the LDAP authentication provider.
  pub fn new() -> ProvidersLdapIdParams {
    ProvidersLdapIdParams {
      alternate_security_identities_attribute: None,
      authentication: None,
      balance_servers: None,
      base_dn: None,
      bind_dn: None,
      bind_mechanism: None,
      bind_password: None,
      bind_timeout: None,
      certificate_authority_file: None,
      check_online_interval: None,
      cn_attribute: None,
      create_home_directory: None,
      crypt_password_attribute: None,
      email_attribute: None,
      enabled: None,
      enumerate_groups: None,
      enumerate_users: None,
      findable_groups: None,
      findable_users: None,
      gecos_attribute: None,
      gid_attribute: None,
      group_base_dn: None,
      group_domain: None,
      group_filter: None,
      group_members_attribute: None,
      group_search_scope: None,
      home_directory_template: None,
      homedir_attribute: None,
      ignore_tls_errors: None,
      listable_groups: None,
      listable_users: None,
      login_shell: None,
      member_of_attribute: None,
      name: None,
      name_attribute: None,
      netgroup_base_dn: None,
      netgroup_filter: None,
      netgroup_members_attribute: None,
      netgroup_search_scope: None,
      netgroup_triple_attribute: None,
      normalize_groups: None,
      normalize_users: None,
      nt_password_attribute: None,
      ntlm_support: None,
      provider_domain: None,
      require_secure_connection: None,
      restrict_findable: None,
      restrict_listable: None,
      search_scope: None,
      search_timeout: None,
      server_uris: None,
      shadow_expire_attribute: None,
      shadow_flag_attribute: None,
      shadow_inactive_attribute: None,
      shadow_last_change_attribute: None,
      shadow_max_attribute: None,
      shadow_min_attribute: None,
      shadow_user_filter: None,
      shadow_warning_attribute: None,
      shell_attribute: None,
      template: None,
      uid_attribute: None,
      unfindable_groups: None,
      unfindable_users: None,
      unique_group_members_attribute: None,
      unlistable_groups: None,
      unlistable_users: None,
      user_base_dn: None,
      user_domain: None,
      user_filter: None,
      user_search_scope: None
    }
  }

  pub fn set_alternate_security_identities_attribute(&mut self, alternate_security_identities_attribute: String) {
    self.alternate_security_identities_attribute = Some(alternate_security_identities_attribute);
  }

  pub fn with_alternate_security_identities_attribute(mut self, alternate_security_identities_attribute: String) -> ProvidersLdapIdParams {
    self.alternate_security_identities_attribute = Some(alternate_security_identities_attribute);
    self
  }

  pub fn alternate_security_identities_attribute(&self) -> Option<&String> {
    self.alternate_security_identities_attribute.as_ref()
  }

  pub fn reset_alternate_security_identities_attribute(&mut self) {
    self.alternate_security_identities_attribute = None;
  }

  pub fn set_authentication(&mut self, authentication: bool) {
    self.authentication = Some(authentication);
  }

  pub fn with_authentication(mut self, authentication: bool) -> ProvidersLdapIdParams {
    self.authentication = Some(authentication);
    self
  }

  pub fn authentication(&self) -> Option<&bool> {
    self.authentication.as_ref()
  }

  pub fn reset_authentication(&mut self) {
    self.authentication = None;
  }

  pub fn set_balance_servers(&mut self, balance_servers: bool) {
    self.balance_servers = Some(balance_servers);
  }

  pub fn with_balance_servers(mut self, balance_servers: bool) -> ProvidersLdapIdParams {
    self.balance_servers = Some(balance_servers);
    self
  }

  pub fn balance_servers(&self) -> Option<&bool> {
    self.balance_servers.as_ref()
  }

  pub fn reset_balance_servers(&mut self) {
    self.balance_servers = None;
  }

  pub fn set_base_dn(&mut self, base_dn: String) {
    self.base_dn = Some(base_dn);
  }

  pub fn with_base_dn(mut self, base_dn: String) -> ProvidersLdapIdParams {
    self.base_dn = Some(base_dn);
    self
  }

  pub fn base_dn(&self) -> Option<&String> {
    self.base_dn.as_ref()
  }

  pub fn reset_base_dn(&mut self) {
    self.base_dn = None;
  }

  pub fn set_bind_dn(&mut self, bind_dn: String) {
    self.bind_dn = Some(bind_dn);
  }

  pub fn with_bind_dn(mut self, bind_dn: String) -> ProvidersLdapIdParams {
    self.bind_dn = Some(bind_dn);
    self
  }

  pub fn bind_dn(&self) -> Option<&String> {
    self.bind_dn.as_ref()
  }

  pub fn reset_bind_dn(&mut self) {
    self.bind_dn = None;
  }

  pub fn set_bind_mechanism(&mut self, bind_mechanism: String) {
    self.bind_mechanism = Some(bind_mechanism);
  }

  pub fn with_bind_mechanism(mut self, bind_mechanism: String) -> ProvidersLdapIdParams {
    self.bind_mechanism = Some(bind_mechanism);
    self
  }

  pub fn bind_mechanism(&self) -> Option<&String> {
    self.bind_mechanism.as_ref()
  }

  pub fn reset_bind_mechanism(&mut self) {
    self.bind_mechanism = None;
  }

  pub fn set_bind_password(&mut self, bind_password: String) {
    self.bind_password = Some(bind_password);
  }

  pub fn with_bind_password(mut self, bind_password: String) -> ProvidersLdapIdParams {
    self.bind_password = Some(bind_password);
    self
  }

  pub fn bind_password(&self) -> Option<&String> {
    self.bind_password.as_ref()
  }

  pub fn reset_bind_password(&mut self) {
    self.bind_password = None;
  }

  pub fn set_bind_timeout(&mut self, bind_timeout: i32) {
    self.bind_timeout = Some(bind_timeout);
  }

  pub fn with_bind_timeout(mut self, bind_timeout: i32) -> ProvidersLdapIdParams {
    self.bind_timeout = Some(bind_timeout);
    self
  }

  pub fn bind_timeout(&self) -> Option<&i32> {
    self.bind_timeout.as_ref()
  }

  pub fn reset_bind_timeout(&mut self) {
    self.bind_timeout = None;
  }

  pub fn set_certificate_authority_file(&mut self, certificate_authority_file: String) {
    self.certificate_authority_file = Some(certificate_authority_file);
  }

  pub fn with_certificate_authority_file(mut self, certificate_authority_file: String) -> ProvidersLdapIdParams {
    self.certificate_authority_file = Some(certificate_authority_file);
    self
  }

  pub fn certificate_authority_file(&self) -> Option<&String> {
    self.certificate_authority_file.as_ref()
  }

  pub fn reset_certificate_authority_file(&mut self) {
    self.certificate_authority_file = None;
  }

  pub fn set_check_online_interval(&mut self, check_online_interval: i32) {
    self.check_online_interval = Some(check_online_interval);
  }

  pub fn with_check_online_interval(mut self, check_online_interval: i32) -> ProvidersLdapIdParams {
    self.check_online_interval = Some(check_online_interval);
    self
  }

  pub fn check_online_interval(&self) -> Option<&i32> {
    self.check_online_interval.as_ref()
  }

  pub fn reset_check_online_interval(&mut self) {
    self.check_online_interval = None;
  }

  pub fn set_cn_attribute(&mut self, cn_attribute: String) {
    self.cn_attribute = Some(cn_attribute);
  }

  pub fn with_cn_attribute(mut self, cn_attribute: String) -> ProvidersLdapIdParams {
    self.cn_attribute = Some(cn_attribute);
    self
  }

  pub fn cn_attribute(&self) -> Option<&String> {
    self.cn_attribute.as_ref()
  }

  pub fn reset_cn_attribute(&mut self) {
    self.cn_attribute = None;
  }

  pub fn set_create_home_directory(&mut self, create_home_directory: bool) {
    self.create_home_directory = Some(create_home_directory);
  }

  pub fn with_create_home_directory(mut self, create_home_directory: bool) -> ProvidersLdapIdParams {
    self.create_home_directory = Some(create_home_directory);
    self
  }

  pub fn create_home_directory(&self) -> Option<&bool> {
    self.create_home_directory.as_ref()
  }

  pub fn reset_create_home_directory(&mut self) {
    self.create_home_directory = None;
  }

  pub fn set_crypt_password_attribute(&mut self, crypt_password_attribute: String) {
    self.crypt_password_attribute = Some(crypt_password_attribute);
  }

  pub fn with_crypt_password_attribute(mut self, crypt_password_attribute: String) -> ProvidersLdapIdParams {
    self.crypt_password_attribute = Some(crypt_password_attribute);
    self
  }

  pub fn crypt_password_attribute(&self) -> Option<&String> {
    self.crypt_password_attribute.as_ref()
  }

  pub fn reset_crypt_password_attribute(&mut self) {
    self.crypt_password_attribute = None;
  }

  pub fn set_email_attribute(&mut self, email_attribute: String) {
    self.email_attribute = Some(email_attribute);
  }

  pub fn with_email_attribute(mut self, email_attribute: String) -> ProvidersLdapIdParams {
    self.email_attribute = Some(email_attribute);
    self
  }

  pub fn email_attribute(&self) -> Option<&String> {
    self.email_attribute.as_ref()
  }

  pub fn reset_email_attribute(&mut self) {
    self.email_attribute = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> ProvidersLdapIdParams {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_enumerate_groups(&mut self, enumerate_groups: bool) {
    self.enumerate_groups = Some(enumerate_groups);
  }

  pub fn with_enumerate_groups(mut self, enumerate_groups: bool) -> ProvidersLdapIdParams {
    self.enumerate_groups = Some(enumerate_groups);
    self
  }

  pub fn enumerate_groups(&self) -> Option<&bool> {
    self.enumerate_groups.as_ref()
  }

  pub fn reset_enumerate_groups(&mut self) {
    self.enumerate_groups = None;
  }

  pub fn set_enumerate_users(&mut self, enumerate_users: bool) {
    self.enumerate_users = Some(enumerate_users);
  }

  pub fn with_enumerate_users(mut self, enumerate_users: bool) -> ProvidersLdapIdParams {
    self.enumerate_users = Some(enumerate_users);
    self
  }

  pub fn enumerate_users(&self) -> Option<&bool> {
    self.enumerate_users.as_ref()
  }

  pub fn reset_enumerate_users(&mut self) {
    self.enumerate_users = None;
  }

  pub fn set_findable_groups(&mut self, findable_groups: Vec<String>) {
    self.findable_groups = Some(findable_groups);
  }

  pub fn with_findable_groups(mut self, findable_groups: Vec<String>) -> ProvidersLdapIdParams {
    self.findable_groups = Some(findable_groups);
    self
  }

  pub fn findable_groups(&self) -> Option<&Vec<String>> {
    self.findable_groups.as_ref()
  }

  pub fn reset_findable_groups(&mut self) {
    self.findable_groups = None;
  }

  pub fn set_findable_users(&mut self, findable_users: Vec<String>) {
    self.findable_users = Some(findable_users);
  }

  pub fn with_findable_users(mut self, findable_users: Vec<String>) -> ProvidersLdapIdParams {
    self.findable_users = Some(findable_users);
    self
  }

  pub fn findable_users(&self) -> Option<&Vec<String>> {
    self.findable_users.as_ref()
  }

  pub fn reset_findable_users(&mut self) {
    self.findable_users = None;
  }

  pub fn set_gecos_attribute(&mut self, gecos_attribute: String) {
    self.gecos_attribute = Some(gecos_attribute);
  }

  pub fn with_gecos_attribute(mut self, gecos_attribute: String) -> ProvidersLdapIdParams {
    self.gecos_attribute = Some(gecos_attribute);
    self
  }

  pub fn gecos_attribute(&self) -> Option<&String> {
    self.gecos_attribute.as_ref()
  }

  pub fn reset_gecos_attribute(&mut self) {
    self.gecos_attribute = None;
  }

  pub fn set_gid_attribute(&mut self, gid_attribute: String) {
    self.gid_attribute = Some(gid_attribute);
  }

  pub fn with_gid_attribute(mut self, gid_attribute: String) -> ProvidersLdapIdParams {
    self.gid_attribute = Some(gid_attribute);
    self
  }

  pub fn gid_attribute(&self) -> Option<&String> {
    self.gid_attribute.as_ref()
  }

  pub fn reset_gid_attribute(&mut self) {
    self.gid_attribute = None;
  }

  pub fn set_group_base_dn(&mut self, group_base_dn: String) {
    self.group_base_dn = Some(group_base_dn);
  }

  pub fn with_group_base_dn(mut self, group_base_dn: String) -> ProvidersLdapIdParams {
    self.group_base_dn = Some(group_base_dn);
    self
  }

  pub fn group_base_dn(&self) -> Option<&String> {
    self.group_base_dn.as_ref()
  }

  pub fn reset_group_base_dn(&mut self) {
    self.group_base_dn = None;
  }

  pub fn set_group_domain(&mut self, group_domain: String) {
    self.group_domain = Some(group_domain);
  }

  pub fn with_group_domain(mut self, group_domain: String) -> ProvidersLdapIdParams {
    self.group_domain = Some(group_domain);
    self
  }

  pub fn group_domain(&self) -> Option<&String> {
    self.group_domain.as_ref()
  }

  pub fn reset_group_domain(&mut self) {
    self.group_domain = None;
  }

  pub fn set_group_filter(&mut self, group_filter: String) {
    self.group_filter = Some(group_filter);
  }

  pub fn with_group_filter(mut self, group_filter: String) -> ProvidersLdapIdParams {
    self.group_filter = Some(group_filter);
    self
  }

  pub fn group_filter(&self) -> Option<&String> {
    self.group_filter.as_ref()
  }

  pub fn reset_group_filter(&mut self) {
    self.group_filter = None;
  }

  pub fn set_group_members_attribute(&mut self, group_members_attribute: String) {
    self.group_members_attribute = Some(group_members_attribute);
  }

  pub fn with_group_members_attribute(mut self, group_members_attribute: String) -> ProvidersLdapIdParams {
    self.group_members_attribute = Some(group_members_attribute);
    self
  }

  pub fn group_members_attribute(&self) -> Option<&String> {
    self.group_members_attribute.as_ref()
  }

  pub fn reset_group_members_attribute(&mut self) {
    self.group_members_attribute = None;
  }

  pub fn set_group_search_scope(&mut self, group_search_scope: String) {
    self.group_search_scope = Some(group_search_scope);
  }

  pub fn with_group_search_scope(mut self, group_search_scope: String) -> ProvidersLdapIdParams {
    self.group_search_scope = Some(group_search_scope);
    self
  }

  pub fn group_search_scope(&self) -> Option<&String> {
    self.group_search_scope.as_ref()
  }

  pub fn reset_group_search_scope(&mut self) {
    self.group_search_scope = None;
  }

  pub fn set_home_directory_template(&mut self, home_directory_template: String) {
    self.home_directory_template = Some(home_directory_template);
  }

  pub fn with_home_directory_template(mut self, home_directory_template: String) -> ProvidersLdapIdParams {
    self.home_directory_template = Some(home_directory_template);
    self
  }

  pub fn home_directory_template(&self) -> Option<&String> {
    self.home_directory_template.as_ref()
  }

  pub fn reset_home_directory_template(&mut self) {
    self.home_directory_template = None;
  }

  pub fn set_homedir_attribute(&mut self, homedir_attribute: String) {
    self.homedir_attribute = Some(homedir_attribute);
  }

  pub fn with_homedir_attribute(mut self, homedir_attribute: String) -> ProvidersLdapIdParams {
    self.homedir_attribute = Some(homedir_attribute);
    self
  }

  pub fn homedir_attribute(&self) -> Option<&String> {
    self.homedir_attribute.as_ref()
  }

  pub fn reset_homedir_attribute(&mut self) {
    self.homedir_attribute = None;
  }

  pub fn set_ignore_tls_errors(&mut self, ignore_tls_errors: bool) {
    self.ignore_tls_errors = Some(ignore_tls_errors);
  }

  pub fn with_ignore_tls_errors(mut self, ignore_tls_errors: bool) -> ProvidersLdapIdParams {
    self.ignore_tls_errors = Some(ignore_tls_errors);
    self
  }

  pub fn ignore_tls_errors(&self) -> Option<&bool> {
    self.ignore_tls_errors.as_ref()
  }

  pub fn reset_ignore_tls_errors(&mut self) {
    self.ignore_tls_errors = None;
  }

  pub fn set_listable_groups(&mut self, listable_groups: Vec<String>) {
    self.listable_groups = Some(listable_groups);
  }

  pub fn with_listable_groups(mut self, listable_groups: Vec<String>) -> ProvidersLdapIdParams {
    self.listable_groups = Some(listable_groups);
    self
  }

  pub fn listable_groups(&self) -> Option<&Vec<String>> {
    self.listable_groups.as_ref()
  }

  pub fn reset_listable_groups(&mut self) {
    self.listable_groups = None;
  }

  pub fn set_listable_users(&mut self, listable_users: Vec<String>) {
    self.listable_users = Some(listable_users);
  }

  pub fn with_listable_users(mut self, listable_users: Vec<String>) -> ProvidersLdapIdParams {
    self.listable_users = Some(listable_users);
    self
  }

  pub fn listable_users(&self) -> Option<&Vec<String>> {
    self.listable_users.as_ref()
  }

  pub fn reset_listable_users(&mut self) {
    self.listable_users = None;
  }

  pub fn set_login_shell(&mut self, login_shell: String) {
    self.login_shell = Some(login_shell);
  }

  pub fn with_login_shell(mut self, login_shell: String) -> ProvidersLdapIdParams {
    self.login_shell = Some(login_shell);
    self
  }

  pub fn login_shell(&self) -> Option<&String> {
    self.login_shell.as_ref()
  }

  pub fn reset_login_shell(&mut self) {
    self.login_shell = None;
  }

  pub fn set_member_of_attribute(&mut self, member_of_attribute: String) {
    self.member_of_attribute = Some(member_of_attribute);
  }

  pub fn with_member_of_attribute(mut self, member_of_attribute: String) -> ProvidersLdapIdParams {
    self.member_of_attribute = Some(member_of_attribute);
    self
  }

  pub fn member_of_attribute(&self) -> Option<&String> {
    self.member_of_attribute.as_ref()
  }

  pub fn reset_member_of_attribute(&mut self) {
    self.member_of_attribute = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ProvidersLdapIdParams {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_name_attribute(&mut self, name_attribute: String) {
    self.name_attribute = Some(name_attribute);
  }

  pub fn with_name_attribute(mut self, name_attribute: String) -> ProvidersLdapIdParams {
    self.name_attribute = Some(name_attribute);
    self
  }

  pub fn name_attribute(&self) -> Option<&String> {
    self.name_attribute.as_ref()
  }

  pub fn reset_name_attribute(&mut self) {
    self.name_attribute = None;
  }

  pub fn set_netgroup_base_dn(&mut self, netgroup_base_dn: String) {
    self.netgroup_base_dn = Some(netgroup_base_dn);
  }

  pub fn with_netgroup_base_dn(mut self, netgroup_base_dn: String) -> ProvidersLdapIdParams {
    self.netgroup_base_dn = Some(netgroup_base_dn);
    self
  }

  pub fn netgroup_base_dn(&self) -> Option<&String> {
    self.netgroup_base_dn.as_ref()
  }

  pub fn reset_netgroup_base_dn(&mut self) {
    self.netgroup_base_dn = None;
  }

  pub fn set_netgroup_filter(&mut self, netgroup_filter: String) {
    self.netgroup_filter = Some(netgroup_filter);
  }

  pub fn with_netgroup_filter(mut self, netgroup_filter: String) -> ProvidersLdapIdParams {
    self.netgroup_filter = Some(netgroup_filter);
    self
  }

  pub fn netgroup_filter(&self) -> Option<&String> {
    self.netgroup_filter.as_ref()
  }

  pub fn reset_netgroup_filter(&mut self) {
    self.netgroup_filter = None;
  }

  pub fn set_netgroup_members_attribute(&mut self, netgroup_members_attribute: String) {
    self.netgroup_members_attribute = Some(netgroup_members_attribute);
  }

  pub fn with_netgroup_members_attribute(mut self, netgroup_members_attribute: String) -> ProvidersLdapIdParams {
    self.netgroup_members_attribute = Some(netgroup_members_attribute);
    self
  }

  pub fn netgroup_members_attribute(&self) -> Option<&String> {
    self.netgroup_members_attribute.as_ref()
  }

  pub fn reset_netgroup_members_attribute(&mut self) {
    self.netgroup_members_attribute = None;
  }

  pub fn set_netgroup_search_scope(&mut self, netgroup_search_scope: String) {
    self.netgroup_search_scope = Some(netgroup_search_scope);
  }

  pub fn with_netgroup_search_scope(mut self, netgroup_search_scope: String) -> ProvidersLdapIdParams {
    self.netgroup_search_scope = Some(netgroup_search_scope);
    self
  }

  pub fn netgroup_search_scope(&self) -> Option<&String> {
    self.netgroup_search_scope.as_ref()
  }

  pub fn reset_netgroup_search_scope(&mut self) {
    self.netgroup_search_scope = None;
  }

  pub fn set_netgroup_triple_attribute(&mut self, netgroup_triple_attribute: String) {
    self.netgroup_triple_attribute = Some(netgroup_triple_attribute);
  }

  pub fn with_netgroup_triple_attribute(mut self, netgroup_triple_attribute: String) -> ProvidersLdapIdParams {
    self.netgroup_triple_attribute = Some(netgroup_triple_attribute);
    self
  }

  pub fn netgroup_triple_attribute(&self) -> Option<&String> {
    self.netgroup_triple_attribute.as_ref()
  }

  pub fn reset_netgroup_triple_attribute(&mut self) {
    self.netgroup_triple_attribute = None;
  }

  pub fn set_normalize_groups(&mut self, normalize_groups: bool) {
    self.normalize_groups = Some(normalize_groups);
  }

  pub fn with_normalize_groups(mut self, normalize_groups: bool) -> ProvidersLdapIdParams {
    self.normalize_groups = Some(normalize_groups);
    self
  }

  pub fn normalize_groups(&self) -> Option<&bool> {
    self.normalize_groups.as_ref()
  }

  pub fn reset_normalize_groups(&mut self) {
    self.normalize_groups = None;
  }

  pub fn set_normalize_users(&mut self, normalize_users: bool) {
    self.normalize_users = Some(normalize_users);
  }

  pub fn with_normalize_users(mut self, normalize_users: bool) -> ProvidersLdapIdParams {
    self.normalize_users = Some(normalize_users);
    self
  }

  pub fn normalize_users(&self) -> Option<&bool> {
    self.normalize_users.as_ref()
  }

  pub fn reset_normalize_users(&mut self) {
    self.normalize_users = None;
  }

  pub fn set_nt_password_attribute(&mut self, nt_password_attribute: String) {
    self.nt_password_attribute = Some(nt_password_attribute);
  }

  pub fn with_nt_password_attribute(mut self, nt_password_attribute: String) -> ProvidersLdapIdParams {
    self.nt_password_attribute = Some(nt_password_attribute);
    self
  }

  pub fn nt_password_attribute(&self) -> Option<&String> {
    self.nt_password_attribute.as_ref()
  }

  pub fn reset_nt_password_attribute(&mut self) {
    self.nt_password_attribute = None;
  }

  pub fn set_ntlm_support(&mut self, ntlm_support: String) {
    self.ntlm_support = Some(ntlm_support);
  }

  pub fn with_ntlm_support(mut self, ntlm_support: String) -> ProvidersLdapIdParams {
    self.ntlm_support = Some(ntlm_support);
    self
  }

  pub fn ntlm_support(&self) -> Option<&String> {
    self.ntlm_support.as_ref()
  }

  pub fn reset_ntlm_support(&mut self) {
    self.ntlm_support = None;
  }

  pub fn set_provider_domain(&mut self, provider_domain: String) {
    self.provider_domain = Some(provider_domain);
  }

  pub fn with_provider_domain(mut self, provider_domain: String) -> ProvidersLdapIdParams {
    self.provider_domain = Some(provider_domain);
    self
  }

  pub fn provider_domain(&self) -> Option<&String> {
    self.provider_domain.as_ref()
  }

  pub fn reset_provider_domain(&mut self) {
    self.provider_domain = None;
  }

  pub fn set_require_secure_connection(&mut self, require_secure_connection: bool) {
    self.require_secure_connection = Some(require_secure_connection);
  }

  pub fn with_require_secure_connection(mut self, require_secure_connection: bool) -> ProvidersLdapIdParams {
    self.require_secure_connection = Some(require_secure_connection);
    self
  }

  pub fn require_secure_connection(&self) -> Option<&bool> {
    self.require_secure_connection.as_ref()
  }

  pub fn reset_require_secure_connection(&mut self) {
    self.require_secure_connection = None;
  }

  pub fn set_restrict_findable(&mut self, restrict_findable: bool) {
    self.restrict_findable = Some(restrict_findable);
  }

  pub fn with_restrict_findable(mut self, restrict_findable: bool) -> ProvidersLdapIdParams {
    self.restrict_findable = Some(restrict_findable);
    self
  }

  pub fn restrict_findable(&self) -> Option<&bool> {
    self.restrict_findable.as_ref()
  }

  pub fn reset_restrict_findable(&mut self) {
    self.restrict_findable = None;
  }

  pub fn set_restrict_listable(&mut self, restrict_listable: bool) {
    self.restrict_listable = Some(restrict_listable);
  }

  pub fn with_restrict_listable(mut self, restrict_listable: bool) -> ProvidersLdapIdParams {
    self.restrict_listable = Some(restrict_listable);
    self
  }

  pub fn restrict_listable(&self) -> Option<&bool> {
    self.restrict_listable.as_ref()
  }

  pub fn reset_restrict_listable(&mut self) {
    self.restrict_listable = None;
  }

  pub fn set_search_scope(&mut self, search_scope: String) {
    self.search_scope = Some(search_scope);
  }

  pub fn with_search_scope(mut self, search_scope: String) -> ProvidersLdapIdParams {
    self.search_scope = Some(search_scope);
    self
  }

  pub fn search_scope(&self) -> Option<&String> {
    self.search_scope.as_ref()
  }

  pub fn reset_search_scope(&mut self) {
    self.search_scope = None;
  }

  pub fn set_search_timeout(&mut self, search_timeout: i32) {
    self.search_timeout = Some(search_timeout);
  }

  pub fn with_search_timeout(mut self, search_timeout: i32) -> ProvidersLdapIdParams {
    self.search_timeout = Some(search_timeout);
    self
  }

  pub fn search_timeout(&self) -> Option<&i32> {
    self.search_timeout.as_ref()
  }

  pub fn reset_search_timeout(&mut self) {
    self.search_timeout = None;
  }

  pub fn set_server_uris(&mut self, server_uris: Vec<String>) {
    self.server_uris = Some(server_uris);
  }

  pub fn with_server_uris(mut self, server_uris: Vec<String>) -> ProvidersLdapIdParams {
    self.server_uris = Some(server_uris);
    self
  }

  pub fn server_uris(&self) -> Option<&Vec<String>> {
    self.server_uris.as_ref()
  }

  pub fn reset_server_uris(&mut self) {
    self.server_uris = None;
  }

  pub fn set_shadow_expire_attribute(&mut self, shadow_expire_attribute: String) {
    self.shadow_expire_attribute = Some(shadow_expire_attribute);
  }

  pub fn with_shadow_expire_attribute(mut self, shadow_expire_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_expire_attribute = Some(shadow_expire_attribute);
    self
  }

  pub fn shadow_expire_attribute(&self) -> Option<&String> {
    self.shadow_expire_attribute.as_ref()
  }

  pub fn reset_shadow_expire_attribute(&mut self) {
    self.shadow_expire_attribute = None;
  }

  pub fn set_shadow_flag_attribute(&mut self, shadow_flag_attribute: String) {
    self.shadow_flag_attribute = Some(shadow_flag_attribute);
  }

  pub fn with_shadow_flag_attribute(mut self, shadow_flag_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_flag_attribute = Some(shadow_flag_attribute);
    self
  }

  pub fn shadow_flag_attribute(&self) -> Option<&String> {
    self.shadow_flag_attribute.as_ref()
  }

  pub fn reset_shadow_flag_attribute(&mut self) {
    self.shadow_flag_attribute = None;
  }

  pub fn set_shadow_inactive_attribute(&mut self, shadow_inactive_attribute: String) {
    self.shadow_inactive_attribute = Some(shadow_inactive_attribute);
  }

  pub fn with_shadow_inactive_attribute(mut self, shadow_inactive_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_inactive_attribute = Some(shadow_inactive_attribute);
    self
  }

  pub fn shadow_inactive_attribute(&self) -> Option<&String> {
    self.shadow_inactive_attribute.as_ref()
  }

  pub fn reset_shadow_inactive_attribute(&mut self) {
    self.shadow_inactive_attribute = None;
  }

  pub fn set_shadow_last_change_attribute(&mut self, shadow_last_change_attribute: String) {
    self.shadow_last_change_attribute = Some(shadow_last_change_attribute);
  }

  pub fn with_shadow_last_change_attribute(mut self, shadow_last_change_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_last_change_attribute = Some(shadow_last_change_attribute);
    self
  }

  pub fn shadow_last_change_attribute(&self) -> Option<&String> {
    self.shadow_last_change_attribute.as_ref()
  }

  pub fn reset_shadow_last_change_attribute(&mut self) {
    self.shadow_last_change_attribute = None;
  }

  pub fn set_shadow_max_attribute(&mut self, shadow_max_attribute: String) {
    self.shadow_max_attribute = Some(shadow_max_attribute);
  }

  pub fn with_shadow_max_attribute(mut self, shadow_max_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_max_attribute = Some(shadow_max_attribute);
    self
  }

  pub fn shadow_max_attribute(&self) -> Option<&String> {
    self.shadow_max_attribute.as_ref()
  }

  pub fn reset_shadow_max_attribute(&mut self) {
    self.shadow_max_attribute = None;
  }

  pub fn set_shadow_min_attribute(&mut self, shadow_min_attribute: String) {
    self.shadow_min_attribute = Some(shadow_min_attribute);
  }

  pub fn with_shadow_min_attribute(mut self, shadow_min_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_min_attribute = Some(shadow_min_attribute);
    self
  }

  pub fn shadow_min_attribute(&self) -> Option<&String> {
    self.shadow_min_attribute.as_ref()
  }

  pub fn reset_shadow_min_attribute(&mut self) {
    self.shadow_min_attribute = None;
  }

  pub fn set_shadow_user_filter(&mut self, shadow_user_filter: String) {
    self.shadow_user_filter = Some(shadow_user_filter);
  }

  pub fn with_shadow_user_filter(mut self, shadow_user_filter: String) -> ProvidersLdapIdParams {
    self.shadow_user_filter = Some(shadow_user_filter);
    self
  }

  pub fn shadow_user_filter(&self) -> Option<&String> {
    self.shadow_user_filter.as_ref()
  }

  pub fn reset_shadow_user_filter(&mut self) {
    self.shadow_user_filter = None;
  }

  pub fn set_shadow_warning_attribute(&mut self, shadow_warning_attribute: String) {
    self.shadow_warning_attribute = Some(shadow_warning_attribute);
  }

  pub fn with_shadow_warning_attribute(mut self, shadow_warning_attribute: String) -> ProvidersLdapIdParams {
    self.shadow_warning_attribute = Some(shadow_warning_attribute);
    self
  }

  pub fn shadow_warning_attribute(&self) -> Option<&String> {
    self.shadow_warning_attribute.as_ref()
  }

  pub fn reset_shadow_warning_attribute(&mut self) {
    self.shadow_warning_attribute = None;
  }

  pub fn set_shell_attribute(&mut self, shell_attribute: String) {
    self.shell_attribute = Some(shell_attribute);
  }

  pub fn with_shell_attribute(mut self, shell_attribute: String) -> ProvidersLdapIdParams {
    self.shell_attribute = Some(shell_attribute);
    self
  }

  pub fn shell_attribute(&self) -> Option<&String> {
    self.shell_attribute.as_ref()
  }

  pub fn reset_shell_attribute(&mut self) {
    self.shell_attribute = None;
  }

  pub fn set_template(&mut self, template: String) {
    self.template = Some(template);
  }

  pub fn with_template(mut self, template: String) -> ProvidersLdapIdParams {
    self.template = Some(template);
    self
  }

  pub fn template(&self) -> Option<&String> {
    self.template.as_ref()
  }

  pub fn reset_template(&mut self) {
    self.template = None;
  }

  pub fn set_uid_attribute(&mut self, uid_attribute: String) {
    self.uid_attribute = Some(uid_attribute);
  }

  pub fn with_uid_attribute(mut self, uid_attribute: String) -> ProvidersLdapIdParams {
    self.uid_attribute = Some(uid_attribute);
    self
  }

  pub fn uid_attribute(&self) -> Option<&String> {
    self.uid_attribute.as_ref()
  }

  pub fn reset_uid_attribute(&mut self) {
    self.uid_attribute = None;
  }

  pub fn set_unfindable_groups(&mut self, unfindable_groups: Vec<String>) {
    self.unfindable_groups = Some(unfindable_groups);
  }

  pub fn with_unfindable_groups(mut self, unfindable_groups: Vec<String>) -> ProvidersLdapIdParams {
    self.unfindable_groups = Some(unfindable_groups);
    self
  }

  pub fn unfindable_groups(&self) -> Option<&Vec<String>> {
    self.unfindable_groups.as_ref()
  }

  pub fn reset_unfindable_groups(&mut self) {
    self.unfindable_groups = None;
  }

  pub fn set_unfindable_users(&mut self, unfindable_users: Vec<String>) {
    self.unfindable_users = Some(unfindable_users);
  }

  pub fn with_unfindable_users(mut self, unfindable_users: Vec<String>) -> ProvidersLdapIdParams {
    self.unfindable_users = Some(unfindable_users);
    self
  }

  pub fn unfindable_users(&self) -> Option<&Vec<String>> {
    self.unfindable_users.as_ref()
  }

  pub fn reset_unfindable_users(&mut self) {
    self.unfindable_users = None;
  }

  pub fn set_unique_group_members_attribute(&mut self, unique_group_members_attribute: String) {
    self.unique_group_members_attribute = Some(unique_group_members_attribute);
  }

  pub fn with_unique_group_members_attribute(mut self, unique_group_members_attribute: String) -> ProvidersLdapIdParams {
    self.unique_group_members_attribute = Some(unique_group_members_attribute);
    self
  }

  pub fn unique_group_members_attribute(&self) -> Option<&String> {
    self.unique_group_members_attribute.as_ref()
  }

  pub fn reset_unique_group_members_attribute(&mut self) {
    self.unique_group_members_attribute = None;
  }

  pub fn set_unlistable_groups(&mut self, unlistable_groups: Vec<String>) {
    self.unlistable_groups = Some(unlistable_groups);
  }

  pub fn with_unlistable_groups(mut self, unlistable_groups: Vec<String>) -> ProvidersLdapIdParams {
    self.unlistable_groups = Some(unlistable_groups);
    self
  }

  pub fn unlistable_groups(&self) -> Option<&Vec<String>> {
    self.unlistable_groups.as_ref()
  }

  pub fn reset_unlistable_groups(&mut self) {
    self.unlistable_groups = None;
  }

  pub fn set_unlistable_users(&mut self, unlistable_users: Vec<String>) {
    self.unlistable_users = Some(unlistable_users);
  }

  pub fn with_unlistable_users(mut self, unlistable_users: Vec<String>) -> ProvidersLdapIdParams {
    self.unlistable_users = Some(unlistable_users);
    self
  }

  pub fn unlistable_users(&self) -> Option<&Vec<String>> {
    self.unlistable_users.as_ref()
  }

  pub fn reset_unlistable_users(&mut self) {
    self.unlistable_users = None;
  }

  pub fn set_user_base_dn(&mut self, user_base_dn: String) {
    self.user_base_dn = Some(user_base_dn);
  }

  pub fn with_user_base_dn(mut self, user_base_dn: String) -> ProvidersLdapIdParams {
    self.user_base_dn = Some(user_base_dn);
    self
  }

  pub fn user_base_dn(&self) -> Option<&String> {
    self.user_base_dn.as_ref()
  }

  pub fn reset_user_base_dn(&mut self) {
    self.user_base_dn = None;
  }

  pub fn set_user_domain(&mut self, user_domain: String) {
    self.user_domain = Some(user_domain);
  }

  pub fn with_user_domain(mut self, user_domain: String) -> ProvidersLdapIdParams {
    self.user_domain = Some(user_domain);
    self
  }

  pub fn user_domain(&self) -> Option<&String> {
    self.user_domain.as_ref()
  }

  pub fn reset_user_domain(&mut self) {
    self.user_domain = None;
  }

  pub fn set_user_filter(&mut self, user_filter: String) {
    self.user_filter = Some(user_filter);
  }

  pub fn with_user_filter(mut self, user_filter: String) -> ProvidersLdapIdParams {
    self.user_filter = Some(user_filter);
    self
  }

  pub fn user_filter(&self) -> Option<&String> {
    self.user_filter.as_ref()
  }

  pub fn reset_user_filter(&mut self) {
    self.user_filter = None;
  }

  pub fn set_user_search_scope(&mut self, user_search_scope: String) {
    self.user_search_scope = Some(user_search_scope);
  }

  pub fn with_user_search_scope(mut self, user_search_scope: String) -> ProvidersLdapIdParams {
    self.user_search_scope = Some(user_search_scope);
    self
  }

  pub fn user_search_scope(&self) -> Option<&String> {
    self.user_search_scope.as_ref()
  }

  pub fn reset_user_search_scope(&mut self) {
    self.user_search_scope = None;
  }

}



