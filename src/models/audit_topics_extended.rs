/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuditTopicsExtended {
  #[serde(rename = "topics")]
  topics: Option<Vec<::models::AuditTopicExtended>>,
  /// Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
  #[serde(rename = "resume")]
  resume: Option<String>
}

impl AuditTopicsExtended {
  pub fn new() -> AuditTopicsExtended {
    AuditTopicsExtended {
      topics: None,
      resume: None
    }
  }

  pub fn set_topics(&mut self, topics: Vec<::models::AuditTopicExtended>) {
    self.topics = Some(topics);
  }

  pub fn with_topics(mut self, topics: Vec<::models::AuditTopicExtended>) -> AuditTopicsExtended {
    self.topics = Some(topics);
    self
  }

  pub fn topics(&self) -> Option<&Vec<::models::AuditTopicExtended>> {
    self.topics.as_ref()
  }

  pub fn reset_topics(&mut self) {
    self.topics = None;
  }

  pub fn set_resume(&mut self, resume: String) {
    self.resume = Some(resume);
  }

  pub fn with_resume(mut self, resume: String) -> AuditTopicsExtended {
    self.resume = Some(resume);
    self
  }

  pub fn resume(&self) -> Option<&String> {
    self.resume.as_ref()
  }

  pub fn reset_resume(&mut self) {
    self.resume = None;
  }

}



