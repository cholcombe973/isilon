/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LicenseLicense {
  /// Number of days since a license expired.
  #[serde(rename = "days_since_expiry")]
  days_since_expiry: Option<i32>,
  /// Number of days before a license expires.
  #[serde(rename = "days_to_expiry")]
  days_to_expiry: Option<i32>,
  /// Date of license expiry. Format is YYYY-MM-DD. It is not included if there is no expiration. Feature is considered expired at end of this day. The cluster time is used to determine expiry.
  #[serde(rename = "expiration")]
  expiration: Option<String>,
  /// True when we are generating an alert that this feature has expired.
  #[serde(rename = "expired_alert")]
  expired_alert: bool,
  /// True when we are generating an alert that this feature is expiring.
  #[serde(rename = "expiring_alert")]
  expiring_alert: bool,
  /// Name of the licensed feature.
  #[serde(rename = "id")]
  id: String,
  /// Name of the licensed feature.
  #[serde(rename = "name")]
  name: String,
  /// Current status of the license.
  #[serde(rename = "status")]
  status: String,
  /// Tiered License details.
  #[serde(rename = "tiers")]
  tiers: Vec<::models::LicenseLicenseTier>
}

impl LicenseLicense {
  pub fn new(expired_alert: bool, expiring_alert: bool, id: String, name: String, status: String, tiers: Vec<::models::LicenseLicenseTier>) -> LicenseLicense {
    LicenseLicense {
      days_since_expiry: None,
      days_to_expiry: None,
      expiration: None,
      expired_alert: expired_alert,
      expiring_alert: expiring_alert,
      id: id,
      name: name,
      status: status,
      tiers: tiers
    }
  }

  pub fn set_days_since_expiry(&mut self, days_since_expiry: i32) {
    self.days_since_expiry = Some(days_since_expiry);
  }

  pub fn with_days_since_expiry(mut self, days_since_expiry: i32) -> LicenseLicense {
    self.days_since_expiry = Some(days_since_expiry);
    self
  }

  pub fn days_since_expiry(&self) -> Option<&i32> {
    self.days_since_expiry.as_ref()
  }

  pub fn reset_days_since_expiry(&mut self) {
    self.days_since_expiry = None;
  }

  pub fn set_days_to_expiry(&mut self, days_to_expiry: i32) {
    self.days_to_expiry = Some(days_to_expiry);
  }

  pub fn with_days_to_expiry(mut self, days_to_expiry: i32) -> LicenseLicense {
    self.days_to_expiry = Some(days_to_expiry);
    self
  }

  pub fn days_to_expiry(&self) -> Option<&i32> {
    self.days_to_expiry.as_ref()
  }

  pub fn reset_days_to_expiry(&mut self) {
    self.days_to_expiry = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: String) -> LicenseLicense {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&String> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

  pub fn set_expired_alert(&mut self, expired_alert: bool) {
    self.expired_alert = expired_alert;
  }

  pub fn with_expired_alert(mut self, expired_alert: bool) -> LicenseLicense {
    self.expired_alert = expired_alert;
    self
  }

  pub fn expired_alert(&self) -> &bool {
    &self.expired_alert
  }


  pub fn set_expiring_alert(&mut self, expiring_alert: bool) {
    self.expiring_alert = expiring_alert;
  }

  pub fn with_expiring_alert(mut self, expiring_alert: bool) -> LicenseLicense {
    self.expiring_alert = expiring_alert;
    self
  }

  pub fn expiring_alert(&self) -> &bool {
    &self.expiring_alert
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> LicenseLicense {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> LicenseLicense {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> LicenseLicense {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


  pub fn set_tiers(&mut self, tiers: Vec<::models::LicenseLicenseTier>) {
    self.tiers = tiers;
  }

  pub fn with_tiers(mut self, tiers: Vec<::models::LicenseLicenseTier>) -> LicenseLicense {
    self.tiers = tiers;
    self
  }

  pub fn tiers(&self) -> &Vec<::models::LicenseLicenseTier> {
    &self.tiers
  }


}



