/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LicenseLicenseTierEntitlementsExceededAlert {
  /// Current usage.
  #[serde(rename = "current")]
  current: Option<i32>,
  /// Alert type. The unit of measure for the current and licensed fields for capacity is terabytes. For nodes_with_seds_count, it is the number of nodes that have one or more self-encrypting drives.
  #[serde(rename = "issue_type")]
  issue_type: String,
  /// Licensed amount.
  #[serde(rename = "licensed")]
  licensed: Option<i32>
}

impl LicenseLicenseTierEntitlementsExceededAlert {
  pub fn new(issue_type: String) -> LicenseLicenseTierEntitlementsExceededAlert {
    LicenseLicenseTierEntitlementsExceededAlert {
      current: None,
      issue_type: issue_type,
      licensed: None
    }
  }

  pub fn set_current(&mut self, current: i32) {
    self.current = Some(current);
  }

  pub fn with_current(mut self, current: i32) -> LicenseLicenseTierEntitlementsExceededAlert {
    self.current = Some(current);
    self
  }

  pub fn current(&self) -> Option<&i32> {
    self.current.as_ref()
  }

  pub fn reset_current(&mut self) {
    self.current = None;
  }

  pub fn set_issue_type(&mut self, issue_type: String) {
    self.issue_type = issue_type;
  }

  pub fn with_issue_type(mut self, issue_type: String) -> LicenseLicenseTierEntitlementsExceededAlert {
    self.issue_type = issue_type;
    self
  }

  pub fn issue_type(&self) -> &String {
    &self.issue_type
  }


  pub fn set_licensed(&mut self, licensed: i32) {
    self.licensed = Some(licensed);
  }

  pub fn with_licensed(mut self, licensed: i32) -> LicenseLicenseTierEntitlementsExceededAlert {
    self.licensed = Some(licensed);
    self
  }

  pub fn licensed(&self) -> Option<&i32> {
    self.licensed.as_ref()
  }

  pub fn reset_licensed(&mut self) {
    self.licensed = None;
  }

}



