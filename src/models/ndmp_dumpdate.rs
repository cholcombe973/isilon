/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpDumpdate {
  /// The backup time since epoch.
  #[serde(rename = "date")]
  date: Option<i32>,
  /// The unique display id.
  #[serde(rename = "id")]
  id: Option<String>,
  /// The level of the backup.
  #[serde(rename = "level")]
  level: Option<i32>,
  /// The path spedificed by NDMP environment variable FILESYSTEM.
  #[serde(rename = "path")]
  path: Option<String>,
  /// The snapshot ID used for a faster incremental backup. 0 means a regular backup.
  #[serde(rename = "snapid")]
  snapid: Option<i32>
}

impl NdmpDumpdate {
  pub fn new() -> NdmpDumpdate {
    NdmpDumpdate {
      date: None,
      id: None,
      level: None,
      path: None,
      snapid: None
    }
  }

  pub fn set_date(&mut self, date: i32) {
    self.date = Some(date);
  }

  pub fn with_date(mut self, date: i32) -> NdmpDumpdate {
    self.date = Some(date);
    self
  }

  pub fn date(&self) -> Option<&i32> {
    self.date.as_ref()
  }

  pub fn reset_date(&mut self) {
    self.date = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NdmpDumpdate {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_level(&mut self, level: i32) {
    self.level = Some(level);
  }

  pub fn with_level(mut self, level: i32) -> NdmpDumpdate {
    self.level = Some(level);
    self
  }

  pub fn level(&self) -> Option<&i32> {
    self.level.as_ref()
  }

  pub fn reset_level(&mut self) {
    self.level = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> NdmpDumpdate {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_snapid(&mut self, snapid: i32) {
    self.snapid = Some(snapid);
  }

  pub fn with_snapid(mut self, snapid: i32) -> NdmpDumpdate {
    self.snapid = Some(snapid);
    self
  }

  pub fn snapid(&self) -> Option<&i32> {
    self.snapid.as_ref()
  }

  pub fn reset_snapid(&mut self) {
    self.snapid = None;
  }

}



