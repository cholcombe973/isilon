/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CertificateServerItem {
  /// Local path to the certificate key that is to be imported.
  #[serde(rename = "certificate_key_path")]
  certificate_key_path: String,
  /// Local path to the certificate that is to be imported.
  #[serde(rename = "certificate_path")]
  certificate_path: String,
  /// Boolean identifying if a certificate is the default certificate.The default certificate is used as the fallback when no other certificates match a TLS enabled service's particular criteria. There must always be a configured default certificate.
  #[serde(rename = "default")]
  default: Option<bool>,
  /// Description field associated with a certificate provided for administrative convenience.
  #[serde(rename = "description")]
  description: Option<String>
}

impl CertificateServerItem {
  pub fn new(certificate_key_path: String, certificate_path: String) -> CertificateServerItem {
    CertificateServerItem {
      certificate_key_path: certificate_key_path,
      certificate_path: certificate_path,
      default: None,
      description: None
    }
  }

  pub fn set_certificate_key_path(&mut self, certificate_key_path: String) {
    self.certificate_key_path = certificate_key_path;
  }

  pub fn with_certificate_key_path(mut self, certificate_key_path: String) -> CertificateServerItem {
    self.certificate_key_path = certificate_key_path;
    self
  }

  pub fn certificate_key_path(&self) -> &String {
    &self.certificate_key_path
  }


  pub fn set_certificate_path(&mut self, certificate_path: String) {
    self.certificate_path = certificate_path;
  }

  pub fn with_certificate_path(mut self, certificate_path: String) -> CertificateServerItem {
    self.certificate_path = certificate_path;
    self
  }

  pub fn certificate_path(&self) -> &String {
    &self.certificate_path
  }


  pub fn set_default(&mut self, default: bool) {
    self.default = Some(default);
  }

  pub fn with_default(mut self, default: bool) -> CertificateServerItem {
    self.default = Some(default);
    self
  }

  pub fn default(&self) -> Option<&bool> {
    self.default.as_ref()
  }

  pub fn reset_default(&mut self) {
    self.default = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> CertificateServerItem {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

}



