/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TargetPolicy {
  /// The condition of this policy with respect to sync failover/failback.
  #[serde(rename = "failover_failback_state")]
  failover_failback_state: String,
  /// The system ID given to this sync policy.
  #[serde(rename = "id")]
  id: String,
  /// The state of the last job run for this policy.
  #[serde(rename = "last_job_state")]
  last_job_state: String,
  /// The IP address from which a SyncIQ coordinator daemon most recently connected to this cluster to update it about the progress of a job for this policy.
  #[serde(rename = "last_source_coordinator_ip")]
  last_source_coordinator_ip: String,
  /// The last time this cluster was updated with sync information from the source cluster for this policy, in unix epoch seconds.  Null if no such update has occurred yet.
  #[serde(rename = "last_update_from_source")]
  last_update_from_source: Option<i32>,
  /// Was this policy defined by a OneFS version earlier than 6.0? (Pre-6.0 policies did not have the target policy concept and canceling from the target side will not be available.)
  #[serde(rename = "legacy_policy")]
  legacy_policy: bool,
  /// User-assigned name of this sync policy.
  #[serde(rename = "name")]
  name: String,
  /// Unique identifier for the source cluster.
  #[serde(rename = "source_cluster_guid")]
  source_cluster_guid: String,
  /// Hostname or IP address of sync source cluster.
  #[serde(rename = "source_host")]
  source_host: String,
  /// Absolute filesystem path on the target cluster for the sync destination.
  #[serde(rename = "target_path")]
  target_path: String
}

impl TargetPolicy {
  pub fn new(failover_failback_state: String, id: String, last_job_state: String, last_source_coordinator_ip: String, legacy_policy: bool, name: String, source_cluster_guid: String, source_host: String, target_path: String) -> TargetPolicy {
    TargetPolicy {
      failover_failback_state: failover_failback_state,
      id: id,
      last_job_state: last_job_state,
      last_source_coordinator_ip: last_source_coordinator_ip,
      last_update_from_source: None,
      legacy_policy: legacy_policy,
      name: name,
      source_cluster_guid: source_cluster_guid,
      source_host: source_host,
      target_path: target_path
    }
  }

  pub fn set_failover_failback_state(&mut self, failover_failback_state: String) {
    self.failover_failback_state = failover_failback_state;
  }

  pub fn with_failover_failback_state(mut self, failover_failback_state: String) -> TargetPolicy {
    self.failover_failback_state = failover_failback_state;
    self
  }

  pub fn failover_failback_state(&self) -> &String {
    &self.failover_failback_state
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> TargetPolicy {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_last_job_state(&mut self, last_job_state: String) {
    self.last_job_state = last_job_state;
  }

  pub fn with_last_job_state(mut self, last_job_state: String) -> TargetPolicy {
    self.last_job_state = last_job_state;
    self
  }

  pub fn last_job_state(&self) -> &String {
    &self.last_job_state
  }


  pub fn set_last_source_coordinator_ip(&mut self, last_source_coordinator_ip: String) {
    self.last_source_coordinator_ip = last_source_coordinator_ip;
  }

  pub fn with_last_source_coordinator_ip(mut self, last_source_coordinator_ip: String) -> TargetPolicy {
    self.last_source_coordinator_ip = last_source_coordinator_ip;
    self
  }

  pub fn last_source_coordinator_ip(&self) -> &String {
    &self.last_source_coordinator_ip
  }


  pub fn set_last_update_from_source(&mut self, last_update_from_source: i32) {
    self.last_update_from_source = Some(last_update_from_source);
  }

  pub fn with_last_update_from_source(mut self, last_update_from_source: i32) -> TargetPolicy {
    self.last_update_from_source = Some(last_update_from_source);
    self
  }

  pub fn last_update_from_source(&self) -> Option<&i32> {
    self.last_update_from_source.as_ref()
  }

  pub fn reset_last_update_from_source(&mut self) {
    self.last_update_from_source = None;
  }

  pub fn set_legacy_policy(&mut self, legacy_policy: bool) {
    self.legacy_policy = legacy_policy;
  }

  pub fn with_legacy_policy(mut self, legacy_policy: bool) -> TargetPolicy {
    self.legacy_policy = legacy_policy;
    self
  }

  pub fn legacy_policy(&self) -> &bool {
    &self.legacy_policy
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> TargetPolicy {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_source_cluster_guid(&mut self, source_cluster_guid: String) {
    self.source_cluster_guid = source_cluster_guid;
  }

  pub fn with_source_cluster_guid(mut self, source_cluster_guid: String) -> TargetPolicy {
    self.source_cluster_guid = source_cluster_guid;
    self
  }

  pub fn source_cluster_guid(&self) -> &String {
    &self.source_cluster_guid
  }


  pub fn set_source_host(&mut self, source_host: String) {
    self.source_host = source_host;
  }

  pub fn with_source_host(mut self, source_host: String) -> TargetPolicy {
    self.source_host = source_host;
    self
  }

  pub fn source_host(&self) -> &String {
    &self.source_host
  }


  pub fn set_target_path(&mut self, target_path: String) {
    self.target_path = target_path;
  }

  pub fn with_target_path(mut self, target_path: String) -> TargetPolicy {
    self.target_path = target_path;
    self
  }

  pub fn target_path(&self) -> &String {
    &self.target_path
  }


}



