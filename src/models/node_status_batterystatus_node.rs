/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStatusBatterystatusNode {
  /// Error message, if the HTTP status returned from this node was not 200.
  #[serde(rename = "error")]
  error: Option<String>,
  /// Node ID of the node reporting this information.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// The last battery test time for battery 1.
  #[serde(rename = "last_test_time1")]
  last_test_time1: Option<String>,
  /// The last battery test time for battery 2.
  #[serde(rename = "last_test_time2")]
  last_test_time2: Option<String>,
  /// Logical node number of the node reporting this information.
  #[serde(rename = "lnn")]
  lnn: Option<i32>,
  /// The next checkup for battery 1.
  #[serde(rename = "next_test_time1")]
  next_test_time1: Option<String>,
  /// The next checkup for battery 2.
  #[serde(rename = "next_test_time2")]
  next_test_time2: Option<String>,
  /// Node has battery status.
  #[serde(rename = "present")]
  present: Option<bool>,
  /// The result of the last battery test for battery 1.
  #[serde(rename = "result1")]
  result1: Option<String>,
  /// The result of the last battery test for battery 2.
  #[serde(rename = "result2")]
  result2: Option<String>,
  /// Status of the HTTP response from this node if not 200.  If 200, this field does not appear.
  #[serde(rename = "status")]
  status: Option<i32>,
  /// The status of battery 1.
  #[serde(rename = "status1")]
  status1: Option<String>,
  /// The status of battery 2.
  #[serde(rename = "status2")]
  status2: Option<String>,
  /// Node supports battery status.
  #[serde(rename = "supported")]
  supported: Option<bool>
}

impl NodeStatusBatterystatusNode {
  pub fn new() -> NodeStatusBatterystatusNode {
    NodeStatusBatterystatusNode {
      error: None,
      id: None,
      last_test_time1: None,
      last_test_time2: None,
      lnn: None,
      next_test_time1: None,
      next_test_time2: None,
      present: None,
      result1: None,
      result2: None,
      status: None,
      status1: None,
      status2: None,
      supported: None
    }
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> NodeStatusBatterystatusNode {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> NodeStatusBatterystatusNode {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_last_test_time1(&mut self, last_test_time1: String) {
    self.last_test_time1 = Some(last_test_time1);
  }

  pub fn with_last_test_time1(mut self, last_test_time1: String) -> NodeStatusBatterystatusNode {
    self.last_test_time1 = Some(last_test_time1);
    self
  }

  pub fn last_test_time1(&self) -> Option<&String> {
    self.last_test_time1.as_ref()
  }

  pub fn reset_last_test_time1(&mut self) {
    self.last_test_time1 = None;
  }

  pub fn set_last_test_time2(&mut self, last_test_time2: String) {
    self.last_test_time2 = Some(last_test_time2);
  }

  pub fn with_last_test_time2(mut self, last_test_time2: String) -> NodeStatusBatterystatusNode {
    self.last_test_time2 = Some(last_test_time2);
    self
  }

  pub fn last_test_time2(&self) -> Option<&String> {
    self.last_test_time2.as_ref()
  }

  pub fn reset_last_test_time2(&mut self) {
    self.last_test_time2 = None;
  }

  pub fn set_lnn(&mut self, lnn: i32) {
    self.lnn = Some(lnn);
  }

  pub fn with_lnn(mut self, lnn: i32) -> NodeStatusBatterystatusNode {
    self.lnn = Some(lnn);
    self
  }

  pub fn lnn(&self) -> Option<&i32> {
    self.lnn.as_ref()
  }

  pub fn reset_lnn(&mut self) {
    self.lnn = None;
  }

  pub fn set_next_test_time1(&mut self, next_test_time1: String) {
    self.next_test_time1 = Some(next_test_time1);
  }

  pub fn with_next_test_time1(mut self, next_test_time1: String) -> NodeStatusBatterystatusNode {
    self.next_test_time1 = Some(next_test_time1);
    self
  }

  pub fn next_test_time1(&self) -> Option<&String> {
    self.next_test_time1.as_ref()
  }

  pub fn reset_next_test_time1(&mut self) {
    self.next_test_time1 = None;
  }

  pub fn set_next_test_time2(&mut self, next_test_time2: String) {
    self.next_test_time2 = Some(next_test_time2);
  }

  pub fn with_next_test_time2(mut self, next_test_time2: String) -> NodeStatusBatterystatusNode {
    self.next_test_time2 = Some(next_test_time2);
    self
  }

  pub fn next_test_time2(&self) -> Option<&String> {
    self.next_test_time2.as_ref()
  }

  pub fn reset_next_test_time2(&mut self) {
    self.next_test_time2 = None;
  }

  pub fn set_present(&mut self, present: bool) {
    self.present = Some(present);
  }

  pub fn with_present(mut self, present: bool) -> NodeStatusBatterystatusNode {
    self.present = Some(present);
    self
  }

  pub fn present(&self) -> Option<&bool> {
    self.present.as_ref()
  }

  pub fn reset_present(&mut self) {
    self.present = None;
  }

  pub fn set_result1(&mut self, result1: String) {
    self.result1 = Some(result1);
  }

  pub fn with_result1(mut self, result1: String) -> NodeStatusBatterystatusNode {
    self.result1 = Some(result1);
    self
  }

  pub fn result1(&self) -> Option<&String> {
    self.result1.as_ref()
  }

  pub fn reset_result1(&mut self) {
    self.result1 = None;
  }

  pub fn set_result2(&mut self, result2: String) {
    self.result2 = Some(result2);
  }

  pub fn with_result2(mut self, result2: String) -> NodeStatusBatterystatusNode {
    self.result2 = Some(result2);
    self
  }

  pub fn result2(&self) -> Option<&String> {
    self.result2.as_ref()
  }

  pub fn reset_result2(&mut self) {
    self.result2 = None;
  }

  pub fn set_status(&mut self, status: i32) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: i32) -> NodeStatusBatterystatusNode {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&i32> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_status1(&mut self, status1: String) {
    self.status1 = Some(status1);
  }

  pub fn with_status1(mut self, status1: String) -> NodeStatusBatterystatusNode {
    self.status1 = Some(status1);
    self
  }

  pub fn status1(&self) -> Option<&String> {
    self.status1.as_ref()
  }

  pub fn reset_status1(&mut self) {
    self.status1 = None;
  }

  pub fn set_status2(&mut self, status2: String) {
    self.status2 = Some(status2);
  }

  pub fn with_status2(mut self, status2: String) -> NodeStatusBatterystatusNode {
    self.status2 = Some(status2);
    self
  }

  pub fn status2(&self) -> Option<&String> {
    self.status2.as_ref()
  }

  pub fn reset_status2(&mut self) {
    self.status2 = None;
  }

  pub fn set_supported(&mut self, supported: bool) {
    self.supported = Some(supported);
  }

  pub fn with_supported(mut self, supported: bool) -> NodeStatusBatterystatusNode {
    self.supported = Some(supported);
    self
  }

  pub fn supported(&self) -> Option<&bool> {
    self.supported.as_ref()
  }

  pub fn reset_supported(&mut self) {
    self.supported = None;
  }

}



