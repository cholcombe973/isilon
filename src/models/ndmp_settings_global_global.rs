/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpSettingsGlobalGlobal {
  /// Maximum number of BRE contexts.
  #[serde(rename = "bre_max_num_contexts")]
  bre_max_num_contexts: Option<i32>,
  /// A unique identifier for the dma vendor.
  #[serde(rename = "dma")]
  dma: Option<String>,
  /// Multi-Stream Backup context retention duration.
  #[serde(rename = "msb_context_retention_duration")]
  msb_context_retention_duration: Option<i32>,
  /// Multi-Stream Restore context retention duration.
  #[serde(rename = "msr_context_retention_duration")]
  msr_context_retention_duration: Option<i32>,
  /// The port to listen on.
  #[serde(rename = "port")]
  port: Option<i32>,
  /// Property to enable/diable the NDMP service.
  #[serde(rename = "service")]
  service: Option<bool>
}

impl NdmpSettingsGlobalGlobal {
  pub fn new() -> NdmpSettingsGlobalGlobal {
    NdmpSettingsGlobalGlobal {
      bre_max_num_contexts: None,
      dma: None,
      msb_context_retention_duration: None,
      msr_context_retention_duration: None,
      port: None,
      service: None
    }
  }

  pub fn set_bre_max_num_contexts(&mut self, bre_max_num_contexts: i32) {
    self.bre_max_num_contexts = Some(bre_max_num_contexts);
  }

  pub fn with_bre_max_num_contexts(mut self, bre_max_num_contexts: i32) -> NdmpSettingsGlobalGlobal {
    self.bre_max_num_contexts = Some(bre_max_num_contexts);
    self
  }

  pub fn bre_max_num_contexts(&self) -> Option<&i32> {
    self.bre_max_num_contexts.as_ref()
  }

  pub fn reset_bre_max_num_contexts(&mut self) {
    self.bre_max_num_contexts = None;
  }

  pub fn set_dma(&mut self, dma: String) {
    self.dma = Some(dma);
  }

  pub fn with_dma(mut self, dma: String) -> NdmpSettingsGlobalGlobal {
    self.dma = Some(dma);
    self
  }

  pub fn dma(&self) -> Option<&String> {
    self.dma.as_ref()
  }

  pub fn reset_dma(&mut self) {
    self.dma = None;
  }

  pub fn set_msb_context_retention_duration(&mut self, msb_context_retention_duration: i32) {
    self.msb_context_retention_duration = Some(msb_context_retention_duration);
  }

  pub fn with_msb_context_retention_duration(mut self, msb_context_retention_duration: i32) -> NdmpSettingsGlobalGlobal {
    self.msb_context_retention_duration = Some(msb_context_retention_duration);
    self
  }

  pub fn msb_context_retention_duration(&self) -> Option<&i32> {
    self.msb_context_retention_duration.as_ref()
  }

  pub fn reset_msb_context_retention_duration(&mut self) {
    self.msb_context_retention_duration = None;
  }

  pub fn set_msr_context_retention_duration(&mut self, msr_context_retention_duration: i32) {
    self.msr_context_retention_duration = Some(msr_context_retention_duration);
  }

  pub fn with_msr_context_retention_duration(mut self, msr_context_retention_duration: i32) -> NdmpSettingsGlobalGlobal {
    self.msr_context_retention_duration = Some(msr_context_retention_duration);
    self
  }

  pub fn msr_context_retention_duration(&self) -> Option<&i32> {
    self.msr_context_retention_duration.as_ref()
  }

  pub fn reset_msr_context_retention_duration(&mut self) {
    self.msr_context_retention_duration = None;
  }

  pub fn set_port(&mut self, port: i32) {
    self.port = Some(port);
  }

  pub fn with_port(mut self, port: i32) -> NdmpSettingsGlobalGlobal {
    self.port = Some(port);
    self
  }

  pub fn port(&self) -> Option<&i32> {
    self.port.as_ref()
  }

  pub fn reset_port(&mut self) {
    self.port = None;
  }

  pub fn set_service(&mut self, service: bool) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: bool) -> NdmpSettingsGlobalGlobal {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&bool> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

}



