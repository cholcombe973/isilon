/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpSettingsVariablesVariable {
  /// The unique display id
  #[serde(rename = "id")]
  id: Option<String>,
  /// Return variables of the backup path.
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "path_variables")]
  path_variables: Option<Vec<::models::NdmpSettingsVariablesVariablePathVariable>>
}

impl NdmpSettingsVariablesVariable {
  pub fn new() -> NdmpSettingsVariablesVariable {
    NdmpSettingsVariablesVariable {
      id: None,
      path: None,
      path_variables: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NdmpSettingsVariablesVariable {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> NdmpSettingsVariablesVariable {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_path_variables(&mut self, path_variables: Vec<::models::NdmpSettingsVariablesVariablePathVariable>) {
    self.path_variables = Some(path_variables);
  }

  pub fn with_path_variables(mut self, path_variables: Vec<::models::NdmpSettingsVariablesVariablePathVariable>) -> NdmpSettingsVariablesVariable {
    self.path_variables = Some(path_variables);
    self
  }

  pub fn path_variables(&self) -> Option<&Vec<::models::NdmpSettingsVariablesVariablePathVariable>> {
    self.path_variables.as_ref()
  }

  pub fn reset_path_variables(&mut self) {
    self.path_variables = None;
  }

}



