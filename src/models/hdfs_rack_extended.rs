/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HdfsRackExtended {
  /// Array of IP ranges. Clients from one of these IP ranges are served by corresponding nodes from ip_pools array.
  #[serde(rename = "client_ip_ranges")]
  client_ip_ranges: Option<Vec<String>>,
  /// Array of IP pool names to use for serving clients from client_ip_ranges.
  #[serde(rename = "ip_pools")]
  ip_pools: Option<Vec<String>>,
  /// Name of the rack
  #[serde(rename = "name")]
  name: Option<String>,
  /// The ID of the rack.
  #[serde(rename = "id")]
  id: Option<String>
}

impl HdfsRackExtended {
  pub fn new() -> HdfsRackExtended {
    HdfsRackExtended {
      client_ip_ranges: None,
      ip_pools: None,
      name: None,
      id: None
    }
  }

  pub fn set_client_ip_ranges(&mut self, client_ip_ranges: Vec<String>) {
    self.client_ip_ranges = Some(client_ip_ranges);
  }

  pub fn with_client_ip_ranges(mut self, client_ip_ranges: Vec<String>) -> HdfsRackExtended {
    self.client_ip_ranges = Some(client_ip_ranges);
    self
  }

  pub fn client_ip_ranges(&self) -> Option<&Vec<String>> {
    self.client_ip_ranges.as_ref()
  }

  pub fn reset_client_ip_ranges(&mut self) {
    self.client_ip_ranges = None;
  }

  pub fn set_ip_pools(&mut self, ip_pools: Vec<String>) {
    self.ip_pools = Some(ip_pools);
  }

  pub fn with_ip_pools(mut self, ip_pools: Vec<String>) -> HdfsRackExtended {
    self.ip_pools = Some(ip_pools);
    self
  }

  pub fn ip_pools(&self) -> Option<&Vec<String>> {
    self.ip_pools.as_ref()
  }

  pub fn reset_ip_pools(&mut self) {
    self.ip_pools = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> HdfsRackExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> HdfsRackExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

}



