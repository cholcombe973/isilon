/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaQuotaExtended {
  /// If true, SMB shares using the quota directory see the quota thresholds as share size.
  #[serde(rename = "container")]
  container: bool,
  /// True if the quota provides enforcement, otherwise a accounting quota.
  #[serde(rename = "enforced")]
  enforced: bool,
  /// The system ID given to the quota.
  #[serde(rename = "id")]
  id: String,
  /// If true, quota governs snapshot data as well as head data.
  #[serde(rename = "include_snapshots")]
  include_snapshots: bool,
  /// For user and group quotas, true if the quota is linked and controlled by a parent default-* quota. Linked quotas cannot be modified until they are unlinked.
  #[serde(rename = "linked")]
  linked: Option<bool>,
  /// Summary of notifications: 'custom' indicates one or more notification rules available from the notifications sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used for this quota.
  #[serde(rename = "notifications")]
  notifications: String,
  /// The /ifs path governed.
  #[serde(rename = "path")]
  path: String,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "persona")]
  persona: Option<::models::AuthAccessAccessItemFileGroup>,
  /// True if the accounting is accurate on the quota.  If false, this quota is waiting on completion of a QuotaScan job.
  #[serde(rename = "ready")]
  ready: bool,
  /// 
  #[serde(rename = "thresholds")]
  thresholds: ::models::QuotaQuotaThresholdsExtended,
  /// If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).
  #[serde(rename = "thresholds_include_overhead")]
  thresholds_include_overhead: bool,
  /// The type of quota.
  #[serde(rename = "type")]
  _type: String,
  /// 
  #[serde(rename = "usage")]
  usage: ::models::QuotaQuotaUsage
}

impl QuotaQuotaExtended {
  pub fn new(container: bool, enforced: bool, id: String, include_snapshots: bool, notifications: String, path: String, ready: bool, thresholds: ::models::QuotaQuotaThresholdsExtended, thresholds_include_overhead: bool, _type: String, usage: ::models::QuotaQuotaUsage) -> QuotaQuotaExtended {
    QuotaQuotaExtended {
      container: container,
      enforced: enforced,
      id: id,
      include_snapshots: include_snapshots,
      linked: None,
      notifications: notifications,
      path: path,
      persona: None,
      ready: ready,
      thresholds: thresholds,
      thresholds_include_overhead: thresholds_include_overhead,
      _type: _type,
      usage: usage
    }
  }

  pub fn set_container(&mut self, container: bool) {
    self.container = container;
  }

  pub fn with_container(mut self, container: bool) -> QuotaQuotaExtended {
    self.container = container;
    self
  }

  pub fn container(&self) -> &bool {
    &self.container
  }


  pub fn set_enforced(&mut self, enforced: bool) {
    self.enforced = enforced;
  }

  pub fn with_enforced(mut self, enforced: bool) -> QuotaQuotaExtended {
    self.enforced = enforced;
    self
  }

  pub fn enforced(&self) -> &bool {
    &self.enforced
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> QuotaQuotaExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_include_snapshots(&mut self, include_snapshots: bool) {
    self.include_snapshots = include_snapshots;
  }

  pub fn with_include_snapshots(mut self, include_snapshots: bool) -> QuotaQuotaExtended {
    self.include_snapshots = include_snapshots;
    self
  }

  pub fn include_snapshots(&self) -> &bool {
    &self.include_snapshots
  }


  pub fn set_linked(&mut self, linked: bool) {
    self.linked = Some(linked);
  }

  pub fn with_linked(mut self, linked: bool) -> QuotaQuotaExtended {
    self.linked = Some(linked);
    self
  }

  pub fn linked(&self) -> Option<&bool> {
    self.linked.as_ref()
  }

  pub fn reset_linked(&mut self) {
    self.linked = None;
  }

  pub fn set_notifications(&mut self, notifications: String) {
    self.notifications = notifications;
  }

  pub fn with_notifications(mut self, notifications: String) -> QuotaQuotaExtended {
    self.notifications = notifications;
    self
  }

  pub fn notifications(&self) -> &String {
    &self.notifications
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> QuotaQuotaExtended {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_persona(&mut self, persona: ::models::AuthAccessAccessItemFileGroup) {
    self.persona = Some(persona);
  }

  pub fn with_persona(mut self, persona: ::models::AuthAccessAccessItemFileGroup) -> QuotaQuotaExtended {
    self.persona = Some(persona);
    self
  }

  pub fn persona(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.persona.as_ref()
  }

  pub fn reset_persona(&mut self) {
    self.persona = None;
  }

  pub fn set_ready(&mut self, ready: bool) {
    self.ready = ready;
  }

  pub fn with_ready(mut self, ready: bool) -> QuotaQuotaExtended {
    self.ready = ready;
    self
  }

  pub fn ready(&self) -> &bool {
    &self.ready
  }


  pub fn set_thresholds(&mut self, thresholds: ::models::QuotaQuotaThresholdsExtended) {
    self.thresholds = thresholds;
  }

  pub fn with_thresholds(mut self, thresholds: ::models::QuotaQuotaThresholdsExtended) -> QuotaQuotaExtended {
    self.thresholds = thresholds;
    self
  }

  pub fn thresholds(&self) -> &::models::QuotaQuotaThresholdsExtended {
    &self.thresholds
  }


  pub fn set_thresholds_include_overhead(&mut self, thresholds_include_overhead: bool) {
    self.thresholds_include_overhead = thresholds_include_overhead;
  }

  pub fn with_thresholds_include_overhead(mut self, thresholds_include_overhead: bool) -> QuotaQuotaExtended {
    self.thresholds_include_overhead = thresholds_include_overhead;
    self
  }

  pub fn thresholds_include_overhead(&self) -> &bool {
    &self.thresholds_include_overhead
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> QuotaQuotaExtended {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_usage(&mut self, usage: ::models::QuotaQuotaUsage) {
    self.usage = usage;
  }

  pub fn with_usage(mut self, usage: ::models::QuotaQuotaUsage) -> QuotaQuotaExtended {
    self.usage = usage;
    self
  }

  pub fn usage(&self) -> &::models::QuotaQuotaUsage {
    &self.usage
  }


}



