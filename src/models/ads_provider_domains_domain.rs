/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AdsProviderDomainsDomain {
  #[serde(rename = "client_site")]
  client_site: Option<String>,
  #[serde(rename = "dc_address")]
  dc_address: Option<String>,
  #[serde(rename = "dc_name")]
  dc_name: Option<String>,
  #[serde(rename = "dc_site")]
  dc_site: Option<String>,
  #[serde(rename = "domain")]
  domain: Option<String>,
  #[serde(rename = "guid")]
  guid: Option<String>,
  /// Specifies a unique identifier for every domain returned.
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "netbios_name")]
  netbios_name: Option<String>,
  #[serde(rename = "sid")]
  sid: Option<String>,
  /// Specifies the status of the domain.
  #[serde(rename = "status")]
  status: Option<String>,
  /// Specifies the type of trust for this domain. Options include 'primary', 'unknown', 'external', and 'forest'.
  #[serde(rename = "trust_type")]
  trust_type: Option<String>
}

impl AdsProviderDomainsDomain {
  pub fn new() -> AdsProviderDomainsDomain {
    AdsProviderDomainsDomain {
      client_site: None,
      dc_address: None,
      dc_name: None,
      dc_site: None,
      domain: None,
      guid: None,
      id: None,
      netbios_name: None,
      sid: None,
      status: None,
      trust_type: None
    }
  }

  pub fn set_client_site(&mut self, client_site: String) {
    self.client_site = Some(client_site);
  }

  pub fn with_client_site(mut self, client_site: String) -> AdsProviderDomainsDomain {
    self.client_site = Some(client_site);
    self
  }

  pub fn client_site(&self) -> Option<&String> {
    self.client_site.as_ref()
  }

  pub fn reset_client_site(&mut self) {
    self.client_site = None;
  }

  pub fn set_dc_address(&mut self, dc_address: String) {
    self.dc_address = Some(dc_address);
  }

  pub fn with_dc_address(mut self, dc_address: String) -> AdsProviderDomainsDomain {
    self.dc_address = Some(dc_address);
    self
  }

  pub fn dc_address(&self) -> Option<&String> {
    self.dc_address.as_ref()
  }

  pub fn reset_dc_address(&mut self) {
    self.dc_address = None;
  }

  pub fn set_dc_name(&mut self, dc_name: String) {
    self.dc_name = Some(dc_name);
  }

  pub fn with_dc_name(mut self, dc_name: String) -> AdsProviderDomainsDomain {
    self.dc_name = Some(dc_name);
    self
  }

  pub fn dc_name(&self) -> Option<&String> {
    self.dc_name.as_ref()
  }

  pub fn reset_dc_name(&mut self) {
    self.dc_name = None;
  }

  pub fn set_dc_site(&mut self, dc_site: String) {
    self.dc_site = Some(dc_site);
  }

  pub fn with_dc_site(mut self, dc_site: String) -> AdsProviderDomainsDomain {
    self.dc_site = Some(dc_site);
    self
  }

  pub fn dc_site(&self) -> Option<&String> {
    self.dc_site.as_ref()
  }

  pub fn reset_dc_site(&mut self) {
    self.dc_site = None;
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> AdsProviderDomainsDomain {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

  pub fn set_guid(&mut self, guid: String) {
    self.guid = Some(guid);
  }

  pub fn with_guid(mut self, guid: String) -> AdsProviderDomainsDomain {
    self.guid = Some(guid);
    self
  }

  pub fn guid(&self) -> Option<&String> {
    self.guid.as_ref()
  }

  pub fn reset_guid(&mut self) {
    self.guid = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> AdsProviderDomainsDomain {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_netbios_name(&mut self, netbios_name: String) {
    self.netbios_name = Some(netbios_name);
  }

  pub fn with_netbios_name(mut self, netbios_name: String) -> AdsProviderDomainsDomain {
    self.netbios_name = Some(netbios_name);
    self
  }

  pub fn netbios_name(&self) -> Option<&String> {
    self.netbios_name.as_ref()
  }

  pub fn reset_netbios_name(&mut self) {
    self.netbios_name = None;
  }

  pub fn set_sid(&mut self, sid: String) {
    self.sid = Some(sid);
  }

  pub fn with_sid(mut self, sid: String) -> AdsProviderDomainsDomain {
    self.sid = Some(sid);
    self
  }

  pub fn sid(&self) -> Option<&String> {
    self.sid.as_ref()
  }

  pub fn reset_sid(&mut self) {
    self.sid = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> AdsProviderDomainsDomain {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_trust_type(&mut self, trust_type: String) {
    self.trust_type = Some(trust_type);
  }

  pub fn with_trust_type(mut self, trust_type: String) -> AdsProviderDomainsDomain {
    self.trust_type = Some(trust_type);
    self
  }

  pub fn trust_type(&self) -> Option<&String> {
    self.trust_type.as_ref()
  }

  pub fn reset_trust_type(&mut self) {
    self.trust_type = None;
  }

}



