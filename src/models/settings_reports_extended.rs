/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsReportsExtended {
  /// The directory on /ifs where manual or live reports will be placed.
  #[serde(rename = "live_dir")]
  live_dir: Option<String>,
  /// The number of manual reports to keep.
  #[serde(rename = "live_retain")]
  live_retain: Option<i32>,
  /// The isidate schedule used to generate reports.
  #[serde(rename = "schedule")]
  schedule: Option<String>,
  /// The directory on /ifs where schedule reports will be placed.
  #[serde(rename = "scheduled_dir")]
  scheduled_dir: Option<String>,
  /// The number of scheduled reports to keep.
  #[serde(rename = "scheduled_retain")]
  scheduled_retain: Option<i32>
}

impl SettingsReportsExtended {
  pub fn new() -> SettingsReportsExtended {
    SettingsReportsExtended {
      live_dir: None,
      live_retain: None,
      schedule: None,
      scheduled_dir: None,
      scheduled_retain: None
    }
  }

  pub fn set_live_dir(&mut self, live_dir: String) {
    self.live_dir = Some(live_dir);
  }

  pub fn with_live_dir(mut self, live_dir: String) -> SettingsReportsExtended {
    self.live_dir = Some(live_dir);
    self
  }

  pub fn live_dir(&self) -> Option<&String> {
    self.live_dir.as_ref()
  }

  pub fn reset_live_dir(&mut self) {
    self.live_dir = None;
  }

  pub fn set_live_retain(&mut self, live_retain: i32) {
    self.live_retain = Some(live_retain);
  }

  pub fn with_live_retain(mut self, live_retain: i32) -> SettingsReportsExtended {
    self.live_retain = Some(live_retain);
    self
  }

  pub fn live_retain(&self) -> Option<&i32> {
    self.live_retain.as_ref()
  }

  pub fn reset_live_retain(&mut self) {
    self.live_retain = None;
  }

  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = Some(schedule);
  }

  pub fn with_schedule(mut self, schedule: String) -> SettingsReportsExtended {
    self.schedule = Some(schedule);
    self
  }

  pub fn schedule(&self) -> Option<&String> {
    self.schedule.as_ref()
  }

  pub fn reset_schedule(&mut self) {
    self.schedule = None;
  }

  pub fn set_scheduled_dir(&mut self, scheduled_dir: String) {
    self.scheduled_dir = Some(scheduled_dir);
  }

  pub fn with_scheduled_dir(mut self, scheduled_dir: String) -> SettingsReportsExtended {
    self.scheduled_dir = Some(scheduled_dir);
    self
  }

  pub fn scheduled_dir(&self) -> Option<&String> {
    self.scheduled_dir.as_ref()
  }

  pub fn reset_scheduled_dir(&mut self) {
    self.scheduled_dir = None;
  }

  pub fn set_scheduled_retain(&mut self, scheduled_retain: i32) {
    self.scheduled_retain = Some(scheduled_retain);
  }

  pub fn with_scheduled_retain(mut self, scheduled_retain: i32) -> SettingsReportsExtended {
    self.scheduled_retain = Some(scheduled_retain);
    self
  }

  pub fn scheduled_retain(&self) -> Option<&i32> {
    self.scheduled_retain.as_ref()
  }

  pub fn reset_scheduled_retain(&mut self) {
    self.scheduled_retain = None;
  }

}



