/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SwiftAccount : This is an account for the Swift protocol.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwiftAccount {
  /// Unique id of swift account
  #[serde(rename = "id")]
  id: Option<String>,
  /// Name of Swift account
  #[serde(rename = "name")]
  name: String,
  /// Group with filesystem ownership of this account
  #[serde(rename = "swiftgroup")]
  swiftgroup: Option<String>,
  /// User with filesystem ownership of this account
  #[serde(rename = "swiftuser")]
  swiftuser: Option<String>,
  /// Users who are allowed to access Swift account
  #[serde(rename = "users")]
  users: Option<Vec<String>>,
  /// Name of access zone for account
  #[serde(rename = "zone")]
  zone: Option<String>
}

impl SwiftAccount {
  /// This is an account for the Swift protocol.
  pub fn new(name: String) -> SwiftAccount {
    SwiftAccount {
      id: None,
      name: name,
      swiftgroup: None,
      swiftuser: None,
      users: None,
      zone: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> SwiftAccount {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> SwiftAccount {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_swiftgroup(&mut self, swiftgroup: String) {
    self.swiftgroup = Some(swiftgroup);
  }

  pub fn with_swiftgroup(mut self, swiftgroup: String) -> SwiftAccount {
    self.swiftgroup = Some(swiftgroup);
    self
  }

  pub fn swiftgroup(&self) -> Option<&String> {
    self.swiftgroup.as_ref()
  }

  pub fn reset_swiftgroup(&mut self) {
    self.swiftgroup = None;
  }

  pub fn set_swiftuser(&mut self, swiftuser: String) {
    self.swiftuser = Some(swiftuser);
  }

  pub fn with_swiftuser(mut self, swiftuser: String) -> SwiftAccount {
    self.swiftuser = Some(swiftuser);
    self
  }

  pub fn swiftuser(&self) -> Option<&String> {
    self.swiftuser.as_ref()
  }

  pub fn reset_swiftuser(&mut self) {
    self.swiftuser = None;
  }

  pub fn set_users(&mut self, users: Vec<String>) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: Vec<String>) -> SwiftAccount {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&Vec<String>> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

  pub fn set_zone(&mut self, zone: String) {
    self.zone = Some(zone);
  }

  pub fn with_zone(mut self, zone: String) -> SwiftAccount {
    self.zone = Some(zone);
    self
  }

  pub fn zone(&self) -> Option<&String> {
    self.zone.as_ref()
  }

  pub fn reset_zone(&mut self) {
    self.zone = None;
  }

}



