/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SmbSession {
  /// Number of seconds since session start.
  #[serde(rename = "active_time")]
  active_time: i32,
  /// Client type.
  #[serde(rename = "client_type")]
  client_type: String,
  /// Client internet address.
  #[serde(rename = "computer")]
  computer: String,
  /// True if session is encrypted.
  #[serde(rename = "encryption")]
  encryption: bool,
  /// True for guest logins.
  #[serde(rename = "guest_login")]
  guest_login: bool,
  /// The session ID.
  #[serde(rename = "id")]
  id: i32,
  /// Number of seconds since last client operation.
  #[serde(rename = "idle_time")]
  idle_time: i32,
  /// Number of files open by client.
  #[serde(rename = "openfiles")]
  openfiles: i32,
  /// Local user name.
  #[serde(rename = "user")]
  user: String
}

impl SmbSession {
  pub fn new(active_time: i32, client_type: String, computer: String, encryption: bool, guest_login: bool, id: i32, idle_time: i32, openfiles: i32, user: String) -> SmbSession {
    SmbSession {
      active_time: active_time,
      client_type: client_type,
      computer: computer,
      encryption: encryption,
      guest_login: guest_login,
      id: id,
      idle_time: idle_time,
      openfiles: openfiles,
      user: user
    }
  }

  pub fn set_active_time(&mut self, active_time: i32) {
    self.active_time = active_time;
  }

  pub fn with_active_time(mut self, active_time: i32) -> SmbSession {
    self.active_time = active_time;
    self
  }

  pub fn active_time(&self) -> &i32 {
    &self.active_time
  }


  pub fn set_client_type(&mut self, client_type: String) {
    self.client_type = client_type;
  }

  pub fn with_client_type(mut self, client_type: String) -> SmbSession {
    self.client_type = client_type;
    self
  }

  pub fn client_type(&self) -> &String {
    &self.client_type
  }


  pub fn set_computer(&mut self, computer: String) {
    self.computer = computer;
  }

  pub fn with_computer(mut self, computer: String) -> SmbSession {
    self.computer = computer;
    self
  }

  pub fn computer(&self) -> &String {
    &self.computer
  }


  pub fn set_encryption(&mut self, encryption: bool) {
    self.encryption = encryption;
  }

  pub fn with_encryption(mut self, encryption: bool) -> SmbSession {
    self.encryption = encryption;
    self
  }

  pub fn encryption(&self) -> &bool {
    &self.encryption
  }


  pub fn set_guest_login(&mut self, guest_login: bool) {
    self.guest_login = guest_login;
  }

  pub fn with_guest_login(mut self, guest_login: bool) -> SmbSession {
    self.guest_login = guest_login;
    self
  }

  pub fn guest_login(&self) -> &bool {
    &self.guest_login
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> SmbSession {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_idle_time(&mut self, idle_time: i32) {
    self.idle_time = idle_time;
  }

  pub fn with_idle_time(mut self, idle_time: i32) -> SmbSession {
    self.idle_time = idle_time;
    self
  }

  pub fn idle_time(&self) -> &i32 {
    &self.idle_time
  }


  pub fn set_openfiles(&mut self, openfiles: i32) {
    self.openfiles = openfiles;
  }

  pub fn with_openfiles(mut self, openfiles: i32) -> SmbSession {
    self.openfiles = openfiles;
    self
  }

  pub fn openfiles(&self) -> &i32 {
    &self.openfiles
  }


  pub fn set_user(&mut self, user: String) {
    self.user = user;
  }

  pub fn with_user(mut self, user: String) -> SmbSession {
    self.user = user;
    self
  }

  pub fn user(&self) -> &String {
    &self.user
  }


}



