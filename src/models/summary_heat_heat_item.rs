/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryHeatHeatItem {
  /// The class of operation
  #[serde(rename = "class_name")]
  class_name: String,
  /// The type of event
  #[serde(rename = "event_name")]
  event_name: String,
  /// The event type id
  #[serde(rename = "event_type")]
  event_type: Option<i32>,
  /// Logical inode (LIN)
  #[serde(rename = "lin")]
  lin: Option<String>,
  /// The node where this event occurred.
  #[serde(rename = "node")]
  node: Option<i32>,
  /// Approximate operations per second for this lin.
  #[serde(rename = "operation_rate")]
  operation_rate: f32,
  /// Canonical LIN path if known
  #[serde(rename = "path")]
  path: String,
  /// Unix Epoch time in seconds of the request.
  #[serde(rename = "time")]
  time: i32
}

impl SummaryHeatHeatItem {
  pub fn new(class_name: String, event_name: String, operation_rate: f32, path: String, time: i32) -> SummaryHeatHeatItem {
    SummaryHeatHeatItem {
      class_name: class_name,
      event_name: event_name,
      event_type: None,
      lin: None,
      node: None,
      operation_rate: operation_rate,
      path: path,
      time: time
    }
  }

  pub fn set_class_name(&mut self, class_name: String) {
    self.class_name = class_name;
  }

  pub fn with_class_name(mut self, class_name: String) -> SummaryHeatHeatItem {
    self.class_name = class_name;
    self
  }

  pub fn class_name(&self) -> &String {
    &self.class_name
  }


  pub fn set_event_name(&mut self, event_name: String) {
    self.event_name = event_name;
  }

  pub fn with_event_name(mut self, event_name: String) -> SummaryHeatHeatItem {
    self.event_name = event_name;
    self
  }

  pub fn event_name(&self) -> &String {
    &self.event_name
  }


  pub fn set_event_type(&mut self, event_type: i32) {
    self.event_type = Some(event_type);
  }

  pub fn with_event_type(mut self, event_type: i32) -> SummaryHeatHeatItem {
    self.event_type = Some(event_type);
    self
  }

  pub fn event_type(&self) -> Option<&i32> {
    self.event_type.as_ref()
  }

  pub fn reset_event_type(&mut self) {
    self.event_type = None;
  }

  pub fn set_lin(&mut self, lin: String) {
    self.lin = Some(lin);
  }

  pub fn with_lin(mut self, lin: String) -> SummaryHeatHeatItem {
    self.lin = Some(lin);
    self
  }

  pub fn lin(&self) -> Option<&String> {
    self.lin.as_ref()
  }

  pub fn reset_lin(&mut self) {
    self.lin = None;
  }

  pub fn set_node(&mut self, node: i32) {
    self.node = Some(node);
  }

  pub fn with_node(mut self, node: i32) -> SummaryHeatHeatItem {
    self.node = Some(node);
    self
  }

  pub fn node(&self) -> Option<&i32> {
    self.node.as_ref()
  }

  pub fn reset_node(&mut self) {
    self.node = None;
  }

  pub fn set_operation_rate(&mut self, operation_rate: f32) {
    self.operation_rate = operation_rate;
  }

  pub fn with_operation_rate(mut self, operation_rate: f32) -> SummaryHeatHeatItem {
    self.operation_rate = operation_rate;
    self
  }

  pub fn operation_rate(&self) -> &f32 {
    &self.operation_rate
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> SummaryHeatHeatItem {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_time(&mut self, time: i32) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i32) -> SummaryHeatHeatItem {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i32 {
    &self.time
  }


}



