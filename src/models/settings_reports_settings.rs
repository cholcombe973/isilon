/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsReportsSettings {
  /// The directory on /ifs where manual or live reports will be placed.
  #[serde(rename = "live_dir")]
  live_dir: String,
  /// The number of manual reports to keep.
  #[serde(rename = "live_retain")]
  live_retain: i32,
  /// The isidate schedule used to generate reports.
  #[serde(rename = "schedule")]
  schedule: String,
  /// The directory on /ifs where schedule reports will be placed.
  #[serde(rename = "scheduled_dir")]
  scheduled_dir: String,
  /// The number of scheduled reports to keep.
  #[serde(rename = "scheduled_retain")]
  scheduled_retain: i32
}

impl SettingsReportsSettings {
  pub fn new(live_dir: String, live_retain: i32, schedule: String, scheduled_dir: String, scheduled_retain: i32) -> SettingsReportsSettings {
    SettingsReportsSettings {
      live_dir: live_dir,
      live_retain: live_retain,
      schedule: schedule,
      scheduled_dir: scheduled_dir,
      scheduled_retain: scheduled_retain
    }
  }

  pub fn set_live_dir(&mut self, live_dir: String) {
    self.live_dir = live_dir;
  }

  pub fn with_live_dir(mut self, live_dir: String) -> SettingsReportsSettings {
    self.live_dir = live_dir;
    self
  }

  pub fn live_dir(&self) -> &String {
    &self.live_dir
  }


  pub fn set_live_retain(&mut self, live_retain: i32) {
    self.live_retain = live_retain;
  }

  pub fn with_live_retain(mut self, live_retain: i32) -> SettingsReportsSettings {
    self.live_retain = live_retain;
    self
  }

  pub fn live_retain(&self) -> &i32 {
    &self.live_retain
  }


  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = schedule;
  }

  pub fn with_schedule(mut self, schedule: String) -> SettingsReportsSettings {
    self.schedule = schedule;
    self
  }

  pub fn schedule(&self) -> &String {
    &self.schedule
  }


  pub fn set_scheduled_dir(&mut self, scheduled_dir: String) {
    self.scheduled_dir = scheduled_dir;
  }

  pub fn with_scheduled_dir(mut self, scheduled_dir: String) -> SettingsReportsSettings {
    self.scheduled_dir = scheduled_dir;
    self
  }

  pub fn scheduled_dir(&self) -> &String {
    &self.scheduled_dir
  }


  pub fn set_scheduled_retain(&mut self, scheduled_retain: i32) {
    self.scheduled_retain = scheduled_retain;
  }

  pub fn with_scheduled_retain(mut self, scheduled_retain: i32) -> SettingsReportsSettings {
    self.scheduled_retain = scheduled_retain;
    self
  }

  pub fn scheduled_retain(&self) -> &i32 {
    &self.scheduled_retain
  }


}



