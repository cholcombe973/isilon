/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStatusNodeNvram {
  /// This node's NVRAM battery status information.
  #[serde(rename = "batteries")]
  batteries: Option<Vec<::models::NodeStatusNodeNvramBattery>>,
  /// This node's NVRAM battery count.
  #[serde(rename = "battery_count")]
  battery_count: Option<i32>,
  /// This node's NVRAM battery charge status, as a color.
  #[serde(rename = "charge_status")]
  charge_status: Option<String>,
  /// This node's NVRAM battery charge status, as a number.
  #[serde(rename = "charge_status_number")]
  charge_status_number: Option<i32>,
  /// This node's NVRAM device name with path.
  #[serde(rename = "device")]
  device: Option<String>,
  /// This node has NVRAM.
  #[serde(rename = "present")]
  present: Option<bool>,
  /// This node has NVRAM with flash storage.
  #[serde(rename = "present_flash")]
  present_flash: Option<bool>,
  /// The size of the NVRAM, in bytes.
  #[serde(rename = "present_size")]
  present_size: Option<i32>,
  /// This node's NVRAM type.
  #[serde(rename = "present_type")]
  present_type: Option<String>,
  /// This node's current ship mode state for NVRAM batteries.
  #[serde(rename = "ship_mode")]
  ship_mode: Option<i32>,
  /// This node supports NVRAM.
  #[serde(rename = "supported")]
  supported: Option<bool>,
  /// This node supports NVRAM with flash storage.
  #[serde(rename = "supported_flash")]
  supported_flash: Option<bool>,
  /// The maximum size of the NVRAM, in bytes.
  #[serde(rename = "supported_size")]
  supported_size: Option<i32>,
  /// This node's supported NVRAM type.
  #[serde(rename = "supported_type")]
  supported_type: Option<String>
}

impl NodeStatusNodeNvram {
  pub fn new() -> NodeStatusNodeNvram {
    NodeStatusNodeNvram {
      batteries: None,
      battery_count: None,
      charge_status: None,
      charge_status_number: None,
      device: None,
      present: None,
      present_flash: None,
      present_size: None,
      present_type: None,
      ship_mode: None,
      supported: None,
      supported_flash: None,
      supported_size: None,
      supported_type: None
    }
  }

  pub fn set_batteries(&mut self, batteries: Vec<::models::NodeStatusNodeNvramBattery>) {
    self.batteries = Some(batteries);
  }

  pub fn with_batteries(mut self, batteries: Vec<::models::NodeStatusNodeNvramBattery>) -> NodeStatusNodeNvram {
    self.batteries = Some(batteries);
    self
  }

  pub fn batteries(&self) -> Option<&Vec<::models::NodeStatusNodeNvramBattery>> {
    self.batteries.as_ref()
  }

  pub fn reset_batteries(&mut self) {
    self.batteries = None;
  }

  pub fn set_battery_count(&mut self, battery_count: i32) {
    self.battery_count = Some(battery_count);
  }

  pub fn with_battery_count(mut self, battery_count: i32) -> NodeStatusNodeNvram {
    self.battery_count = Some(battery_count);
    self
  }

  pub fn battery_count(&self) -> Option<&i32> {
    self.battery_count.as_ref()
  }

  pub fn reset_battery_count(&mut self) {
    self.battery_count = None;
  }

  pub fn set_charge_status(&mut self, charge_status: String) {
    self.charge_status = Some(charge_status);
  }

  pub fn with_charge_status(mut self, charge_status: String) -> NodeStatusNodeNvram {
    self.charge_status = Some(charge_status);
    self
  }

  pub fn charge_status(&self) -> Option<&String> {
    self.charge_status.as_ref()
  }

  pub fn reset_charge_status(&mut self) {
    self.charge_status = None;
  }

  pub fn set_charge_status_number(&mut self, charge_status_number: i32) {
    self.charge_status_number = Some(charge_status_number);
  }

  pub fn with_charge_status_number(mut self, charge_status_number: i32) -> NodeStatusNodeNvram {
    self.charge_status_number = Some(charge_status_number);
    self
  }

  pub fn charge_status_number(&self) -> Option<&i32> {
    self.charge_status_number.as_ref()
  }

  pub fn reset_charge_status_number(&mut self) {
    self.charge_status_number = None;
  }

  pub fn set_device(&mut self, device: String) {
    self.device = Some(device);
  }

  pub fn with_device(mut self, device: String) -> NodeStatusNodeNvram {
    self.device = Some(device);
    self
  }

  pub fn device(&self) -> Option<&String> {
    self.device.as_ref()
  }

  pub fn reset_device(&mut self) {
    self.device = None;
  }

  pub fn set_present(&mut self, present: bool) {
    self.present = Some(present);
  }

  pub fn with_present(mut self, present: bool) -> NodeStatusNodeNvram {
    self.present = Some(present);
    self
  }

  pub fn present(&self) -> Option<&bool> {
    self.present.as_ref()
  }

  pub fn reset_present(&mut self) {
    self.present = None;
  }

  pub fn set_present_flash(&mut self, present_flash: bool) {
    self.present_flash = Some(present_flash);
  }

  pub fn with_present_flash(mut self, present_flash: bool) -> NodeStatusNodeNvram {
    self.present_flash = Some(present_flash);
    self
  }

  pub fn present_flash(&self) -> Option<&bool> {
    self.present_flash.as_ref()
  }

  pub fn reset_present_flash(&mut self) {
    self.present_flash = None;
  }

  pub fn set_present_size(&mut self, present_size: i32) {
    self.present_size = Some(present_size);
  }

  pub fn with_present_size(mut self, present_size: i32) -> NodeStatusNodeNvram {
    self.present_size = Some(present_size);
    self
  }

  pub fn present_size(&self) -> Option<&i32> {
    self.present_size.as_ref()
  }

  pub fn reset_present_size(&mut self) {
    self.present_size = None;
  }

  pub fn set_present_type(&mut self, present_type: String) {
    self.present_type = Some(present_type);
  }

  pub fn with_present_type(mut self, present_type: String) -> NodeStatusNodeNvram {
    self.present_type = Some(present_type);
    self
  }

  pub fn present_type(&self) -> Option<&String> {
    self.present_type.as_ref()
  }

  pub fn reset_present_type(&mut self) {
    self.present_type = None;
  }

  pub fn set_ship_mode(&mut self, ship_mode: i32) {
    self.ship_mode = Some(ship_mode);
  }

  pub fn with_ship_mode(mut self, ship_mode: i32) -> NodeStatusNodeNvram {
    self.ship_mode = Some(ship_mode);
    self
  }

  pub fn ship_mode(&self) -> Option<&i32> {
    self.ship_mode.as_ref()
  }

  pub fn reset_ship_mode(&mut self) {
    self.ship_mode = None;
  }

  pub fn set_supported(&mut self, supported: bool) {
    self.supported = Some(supported);
  }

  pub fn with_supported(mut self, supported: bool) -> NodeStatusNodeNvram {
    self.supported = Some(supported);
    self
  }

  pub fn supported(&self) -> Option<&bool> {
    self.supported.as_ref()
  }

  pub fn reset_supported(&mut self) {
    self.supported = None;
  }

  pub fn set_supported_flash(&mut self, supported_flash: bool) {
    self.supported_flash = Some(supported_flash);
  }

  pub fn with_supported_flash(mut self, supported_flash: bool) -> NodeStatusNodeNvram {
    self.supported_flash = Some(supported_flash);
    self
  }

  pub fn supported_flash(&self) -> Option<&bool> {
    self.supported_flash.as_ref()
  }

  pub fn reset_supported_flash(&mut self) {
    self.supported_flash = None;
  }

  pub fn set_supported_size(&mut self, supported_size: i32) {
    self.supported_size = Some(supported_size);
  }

  pub fn with_supported_size(mut self, supported_size: i32) -> NodeStatusNodeNvram {
    self.supported_size = Some(supported_size);
    self
  }

  pub fn supported_size(&self) -> Option<&i32> {
    self.supported_size.as_ref()
  }

  pub fn reset_supported_size(&mut self) {
    self.supported_size = None;
  }

  pub fn set_supported_type(&mut self, supported_type: String) {
    self.supported_type = Some(supported_type);
  }

  pub fn with_supported_type(mut self, supported_type: String) -> NodeStatusNodeNvram {
    self.supported_type = Some(supported_type);
    self
  }

  pub fn supported_type(&self) -> Option<&String> {
    self.supported_type.as_ref()
  }

  pub fn reset_supported_type(&mut self) {
    self.supported_type = None;
  }

}



