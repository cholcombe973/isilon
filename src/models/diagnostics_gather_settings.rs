/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DiagnosticsGatherSettings {
  /// Use ESRS for upload of gather.
  #[serde(rename = "esrs")]
  esrs: Option<bool>,
  #[serde(rename = "ftp_upload")]
  ftp_upload: Option<bool>,
  /// Alternate FTP host to upload to.
  #[serde(rename = "ftp_upload_host")]
  ftp_upload_host: Option<String>,
  /// FTP upload mode.
  #[serde(rename = "ftp_upload_mode")]
  ftp_upload_mode: Option<String>,
  /// Alternate FTP path to upload to.
  #[serde(rename = "ftp_upload_path")]
  ftp_upload_path: Option<String>,
  /// FTP proxy to use for upload.
  #[serde(rename = "ftp_upload_proxy")]
  ftp_upload_proxy: Option<String>,
  /// FTP proxy port to use for upload.
  #[serde(rename = "ftp_upload_proxy_port")]
  ftp_upload_proxy_port: Option<i32>,
  /// FTP user for upload.
  #[serde(rename = "ftp_upload_user")]
  ftp_upload_user: Option<String>,
  /// Set gather to full or incremental.
  #[serde(rename = "gather_mode")]
  gather_mode: Option<String>,
  /// Whether or not to use HTTP upload on completed gather.
  #[serde(rename = "http_upload")]
  http_upload: Option<bool>,
  /// Alternate HTTP Host to upload to.
  #[serde(rename = "http_upload_host")]
  http_upload_host: Option<String>,
  /// Alternate path to write gather to.
  #[serde(rename = "http_upload_path")]
  http_upload_path: Option<String>,
  /// Proxy to use for HTTP upload.
  #[serde(rename = "http_upload_proxy")]
  http_upload_proxy: Option<String>,
  /// Alternate port for proxy server
  #[serde(rename = "http_upload_proxy_port")]
  http_upload_proxy_port: Option<i32>,
  /// Upload gather to EMC.
  #[serde(rename = "upload")]
  upload: Option<bool>
}

impl DiagnosticsGatherSettings {
  pub fn new() -> DiagnosticsGatherSettings {
    DiagnosticsGatherSettings {
      esrs: None,
      ftp_upload: None,
      ftp_upload_host: None,
      ftp_upload_mode: None,
      ftp_upload_path: None,
      ftp_upload_proxy: None,
      ftp_upload_proxy_port: None,
      ftp_upload_user: None,
      gather_mode: None,
      http_upload: None,
      http_upload_host: None,
      http_upload_path: None,
      http_upload_proxy: None,
      http_upload_proxy_port: None,
      upload: None
    }
  }

  pub fn set_esrs(&mut self, esrs: bool) {
    self.esrs = Some(esrs);
  }

  pub fn with_esrs(mut self, esrs: bool) -> DiagnosticsGatherSettings {
    self.esrs = Some(esrs);
    self
  }

  pub fn esrs(&self) -> Option<&bool> {
    self.esrs.as_ref()
  }

  pub fn reset_esrs(&mut self) {
    self.esrs = None;
  }

  pub fn set_ftp_upload(&mut self, ftp_upload: bool) {
    self.ftp_upload = Some(ftp_upload);
  }

  pub fn with_ftp_upload(mut self, ftp_upload: bool) -> DiagnosticsGatherSettings {
    self.ftp_upload = Some(ftp_upload);
    self
  }

  pub fn ftp_upload(&self) -> Option<&bool> {
    self.ftp_upload.as_ref()
  }

  pub fn reset_ftp_upload(&mut self) {
    self.ftp_upload = None;
  }

  pub fn set_ftp_upload_host(&mut self, ftp_upload_host: String) {
    self.ftp_upload_host = Some(ftp_upload_host);
  }

  pub fn with_ftp_upload_host(mut self, ftp_upload_host: String) -> DiagnosticsGatherSettings {
    self.ftp_upload_host = Some(ftp_upload_host);
    self
  }

  pub fn ftp_upload_host(&self) -> Option<&String> {
    self.ftp_upload_host.as_ref()
  }

  pub fn reset_ftp_upload_host(&mut self) {
    self.ftp_upload_host = None;
  }

  pub fn set_ftp_upload_mode(&mut self, ftp_upload_mode: String) {
    self.ftp_upload_mode = Some(ftp_upload_mode);
  }

  pub fn with_ftp_upload_mode(mut self, ftp_upload_mode: String) -> DiagnosticsGatherSettings {
    self.ftp_upload_mode = Some(ftp_upload_mode);
    self
  }

  pub fn ftp_upload_mode(&self) -> Option<&String> {
    self.ftp_upload_mode.as_ref()
  }

  pub fn reset_ftp_upload_mode(&mut self) {
    self.ftp_upload_mode = None;
  }

  pub fn set_ftp_upload_path(&mut self, ftp_upload_path: String) {
    self.ftp_upload_path = Some(ftp_upload_path);
  }

  pub fn with_ftp_upload_path(mut self, ftp_upload_path: String) -> DiagnosticsGatherSettings {
    self.ftp_upload_path = Some(ftp_upload_path);
    self
  }

  pub fn ftp_upload_path(&self) -> Option<&String> {
    self.ftp_upload_path.as_ref()
  }

  pub fn reset_ftp_upload_path(&mut self) {
    self.ftp_upload_path = None;
  }

  pub fn set_ftp_upload_proxy(&mut self, ftp_upload_proxy: String) {
    self.ftp_upload_proxy = Some(ftp_upload_proxy);
  }

  pub fn with_ftp_upload_proxy(mut self, ftp_upload_proxy: String) -> DiagnosticsGatherSettings {
    self.ftp_upload_proxy = Some(ftp_upload_proxy);
    self
  }

  pub fn ftp_upload_proxy(&self) -> Option<&String> {
    self.ftp_upload_proxy.as_ref()
  }

  pub fn reset_ftp_upload_proxy(&mut self) {
    self.ftp_upload_proxy = None;
  }

  pub fn set_ftp_upload_proxy_port(&mut self, ftp_upload_proxy_port: i32) {
    self.ftp_upload_proxy_port = Some(ftp_upload_proxy_port);
  }

  pub fn with_ftp_upload_proxy_port(mut self, ftp_upload_proxy_port: i32) -> DiagnosticsGatherSettings {
    self.ftp_upload_proxy_port = Some(ftp_upload_proxy_port);
    self
  }

  pub fn ftp_upload_proxy_port(&self) -> Option<&i32> {
    self.ftp_upload_proxy_port.as_ref()
  }

  pub fn reset_ftp_upload_proxy_port(&mut self) {
    self.ftp_upload_proxy_port = None;
  }

  pub fn set_ftp_upload_user(&mut self, ftp_upload_user: String) {
    self.ftp_upload_user = Some(ftp_upload_user);
  }

  pub fn with_ftp_upload_user(mut self, ftp_upload_user: String) -> DiagnosticsGatherSettings {
    self.ftp_upload_user = Some(ftp_upload_user);
    self
  }

  pub fn ftp_upload_user(&self) -> Option<&String> {
    self.ftp_upload_user.as_ref()
  }

  pub fn reset_ftp_upload_user(&mut self) {
    self.ftp_upload_user = None;
  }

  pub fn set_gather_mode(&mut self, gather_mode: String) {
    self.gather_mode = Some(gather_mode);
  }

  pub fn with_gather_mode(mut self, gather_mode: String) -> DiagnosticsGatherSettings {
    self.gather_mode = Some(gather_mode);
    self
  }

  pub fn gather_mode(&self) -> Option<&String> {
    self.gather_mode.as_ref()
  }

  pub fn reset_gather_mode(&mut self) {
    self.gather_mode = None;
  }

  pub fn set_http_upload(&mut self, http_upload: bool) {
    self.http_upload = Some(http_upload);
  }

  pub fn with_http_upload(mut self, http_upload: bool) -> DiagnosticsGatherSettings {
    self.http_upload = Some(http_upload);
    self
  }

  pub fn http_upload(&self) -> Option<&bool> {
    self.http_upload.as_ref()
  }

  pub fn reset_http_upload(&mut self) {
    self.http_upload = None;
  }

  pub fn set_http_upload_host(&mut self, http_upload_host: String) {
    self.http_upload_host = Some(http_upload_host);
  }

  pub fn with_http_upload_host(mut self, http_upload_host: String) -> DiagnosticsGatherSettings {
    self.http_upload_host = Some(http_upload_host);
    self
  }

  pub fn http_upload_host(&self) -> Option<&String> {
    self.http_upload_host.as_ref()
  }

  pub fn reset_http_upload_host(&mut self) {
    self.http_upload_host = None;
  }

  pub fn set_http_upload_path(&mut self, http_upload_path: String) {
    self.http_upload_path = Some(http_upload_path);
  }

  pub fn with_http_upload_path(mut self, http_upload_path: String) -> DiagnosticsGatherSettings {
    self.http_upload_path = Some(http_upload_path);
    self
  }

  pub fn http_upload_path(&self) -> Option<&String> {
    self.http_upload_path.as_ref()
  }

  pub fn reset_http_upload_path(&mut self) {
    self.http_upload_path = None;
  }

  pub fn set_http_upload_proxy(&mut self, http_upload_proxy: String) {
    self.http_upload_proxy = Some(http_upload_proxy);
  }

  pub fn with_http_upload_proxy(mut self, http_upload_proxy: String) -> DiagnosticsGatherSettings {
    self.http_upload_proxy = Some(http_upload_proxy);
    self
  }

  pub fn http_upload_proxy(&self) -> Option<&String> {
    self.http_upload_proxy.as_ref()
  }

  pub fn reset_http_upload_proxy(&mut self) {
    self.http_upload_proxy = None;
  }

  pub fn set_http_upload_proxy_port(&mut self, http_upload_proxy_port: i32) {
    self.http_upload_proxy_port = Some(http_upload_proxy_port);
  }

  pub fn with_http_upload_proxy_port(mut self, http_upload_proxy_port: i32) -> DiagnosticsGatherSettings {
    self.http_upload_proxy_port = Some(http_upload_proxy_port);
    self
  }

  pub fn http_upload_proxy_port(&self) -> Option<&i32> {
    self.http_upload_proxy_port.as_ref()
  }

  pub fn reset_http_upload_proxy_port(&mut self) {
    self.http_upload_proxy_port = None;
  }

  pub fn set_upload(&mut self, upload: bool) {
    self.upload = Some(upload);
  }

  pub fn with_upload(mut self, upload: bool) -> DiagnosticsGatherSettings {
    self.upload = Some(upload);
    self
  }

  pub fn upload(&self) -> Option<&bool> {
    self.upload.as_ref()
  }

  pub fn reset_upload(&mut self) {
    self.upload = None;
  }

}



