/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HdfsProxyuser {
  /// The ID of the role.
  #[serde(rename = "id")]
  id: String,
  /// Users or groups impersonated by proxyuser.
  #[serde(rename = "members")]
  members: Vec<::models::AuthAccessAccessItemFileGroup>,
  /// The name of the proxyuser.
  #[serde(rename = "name")]
  name: String
}

impl HdfsProxyuser {
  pub fn new(id: String, members: Vec<::models::AuthAccessAccessItemFileGroup>, name: String) -> HdfsProxyuser {
    HdfsProxyuser {
      id: id,
      members: members,
      name: name
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> HdfsProxyuser {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_members(&mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) {
    self.members = members;
  }

  pub fn with_members(mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) -> HdfsProxyuser {
    self.members = members;
    self
  }

  pub fn members(&self) -> &Vec<::models::AuthAccessAccessItemFileGroup> {
    &self.members
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> HdfsProxyuser {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


}



