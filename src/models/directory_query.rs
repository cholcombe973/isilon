/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DirectoryQuery {
  #[serde(rename = "result")]
  result: Option<Vec<String>>,
  #[serde(rename = "scope")]
  scope: Option<::models::DirectoryQueryScope>
}

impl DirectoryQuery {
  pub fn new() -> DirectoryQuery {
    DirectoryQuery {
      result: None,
      scope: None
    }
  }

  pub fn set_result(&mut self, result: Vec<String>) {
    self.result = Some(result);
  }

  pub fn with_result(mut self, result: Vec<String>) -> DirectoryQuery {
    self.result = Some(result);
    self
  }

  pub fn result(&self) -> Option<&Vec<String>> {
    self.result.as_ref()
  }

  pub fn reset_result(&mut self) {
    self.result = None;
  }

  pub fn set_scope(&mut self, scope: ::models::DirectoryQueryScope) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: ::models::DirectoryQueryScope) -> DirectoryQuery {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&::models::DirectoryQueryScope> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

}



