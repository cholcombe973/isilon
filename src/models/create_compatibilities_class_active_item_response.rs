/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateCompatibilitiesClassActiveItemResponse {
  /// A list of all merges that will occur given this compatibility operation
  #[serde(rename = "merges")]
  merges: Option<Vec<::models::CreateCompatibilitiesClassActiveItemResponseMerge>>,
  /// A string describing the effects of the compatibility operation.
  #[serde(rename = "message")]
  message: String,
  /// A list of all splits that will occur given this compatibility operation
  #[serde(rename = "splits")]
  splits: Option<Vec<::models::CreateCompatibilitiesClassActiveItemResponseSplit>>
}

impl CreateCompatibilitiesClassActiveItemResponse {
  pub fn new(message: String) -> CreateCompatibilitiesClassActiveItemResponse {
    CreateCompatibilitiesClassActiveItemResponse {
      merges: None,
      message: message,
      splits: None
    }
  }

  pub fn set_merges(&mut self, merges: Vec<::models::CreateCompatibilitiesClassActiveItemResponseMerge>) {
    self.merges = Some(merges);
  }

  pub fn with_merges(mut self, merges: Vec<::models::CreateCompatibilitiesClassActiveItemResponseMerge>) -> CreateCompatibilitiesClassActiveItemResponse {
    self.merges = Some(merges);
    self
  }

  pub fn merges(&self) -> Option<&Vec<::models::CreateCompatibilitiesClassActiveItemResponseMerge>> {
    self.merges.as_ref()
  }

  pub fn reset_merges(&mut self) {
    self.merges = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = message;
  }

  pub fn with_message(mut self, message: String) -> CreateCompatibilitiesClassActiveItemResponse {
    self.message = message;
    self
  }

  pub fn message(&self) -> &String {
    &self.message
  }


  pub fn set_splits(&mut self, splits: Vec<::models::CreateCompatibilitiesClassActiveItemResponseSplit>) {
    self.splits = Some(splits);
  }

  pub fn with_splits(mut self, splits: Vec<::models::CreateCompatibilitiesClassActiveItemResponseSplit>) -> CreateCompatibilitiesClassActiveItemResponse {
    self.splits = Some(splits);
    self
  }

  pub fn splits(&self) -> Option<&Vec<::models::CreateCompatibilitiesClassActiveItemResponseSplit>> {
    self.splits.as_ref()
  }

  pub fn reset_splits(&mut self) {
    self.splits = None;
  }

}



