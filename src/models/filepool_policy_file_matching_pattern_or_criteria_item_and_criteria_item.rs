/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
  /// Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')
  #[serde(rename = "attribute_exists")]
  attribute_exists: Option<bool>,
  /// True to match files recursively under the given path. (valid only with 'type' = 'path')
  #[serde(rename = "begins_with")]
  begins_with: Option<bool>,
  /// True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')
  #[serde(rename = "case_sensitive")]
  case_sensitive: Option<bool>,
  /// File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')
  #[serde(rename = "field")]
  field: Option<String>,
  /// The comparison operator to use while comparing an attribute with its value
  #[serde(rename = "operator")]
  operator: Option<String>,
  /// The file attribute to be compared to a given value
  #[serde(rename = "type")]
  _type: String,
  /// Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')
  #[serde(rename = "units")]
  units: Option<String>,
  /// Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}
  #[serde(rename = "use_relative_time")]
  use_relative_time: Option<bool>,
  /// The value to be compared against a file attribute
  #[serde(rename = "value")]
  value: Option<String>
}

impl FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
  pub fn new(_type: String) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
      attribute_exists: None,
      begins_with: None,
      case_sensitive: None,
      field: None,
      operator: None,
      _type: _type,
      units: None,
      use_relative_time: None,
      value: None
    }
  }

  pub fn set_attribute_exists(&mut self, attribute_exists: bool) {
    self.attribute_exists = Some(attribute_exists);
  }

  pub fn with_attribute_exists(mut self, attribute_exists: bool) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.attribute_exists = Some(attribute_exists);
    self
  }

  pub fn attribute_exists(&self) -> Option<&bool> {
    self.attribute_exists.as_ref()
  }

  pub fn reset_attribute_exists(&mut self) {
    self.attribute_exists = None;
  }

  pub fn set_begins_with(&mut self, begins_with: bool) {
    self.begins_with = Some(begins_with);
  }

  pub fn with_begins_with(mut self, begins_with: bool) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.begins_with = Some(begins_with);
    self
  }

  pub fn begins_with(&self) -> Option<&bool> {
    self.begins_with.as_ref()
  }

  pub fn reset_begins_with(&mut self) {
    self.begins_with = None;
  }

  pub fn set_case_sensitive(&mut self, case_sensitive: bool) {
    self.case_sensitive = Some(case_sensitive);
  }

  pub fn with_case_sensitive(mut self, case_sensitive: bool) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.case_sensitive = Some(case_sensitive);
    self
  }

  pub fn case_sensitive(&self) -> Option<&bool> {
    self.case_sensitive.as_ref()
  }

  pub fn reset_case_sensitive(&mut self) {
    self.case_sensitive = None;
  }

  pub fn set_field(&mut self, field: String) {
    self.field = Some(field);
  }

  pub fn with_field(mut self, field: String) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.field = Some(field);
    self
  }

  pub fn field(&self) -> Option<&String> {
    self.field.as_ref()
  }

  pub fn reset_field(&mut self) {
    self.field = None;
  }

  pub fn set_operator(&mut self, operator: String) {
    self.operator = Some(operator);
  }

  pub fn with_operator(mut self, operator: String) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.operator = Some(operator);
    self
  }

  pub fn operator(&self) -> Option<&String> {
    self.operator.as_ref()
  }

  pub fn reset_operator(&mut self) {
    self.operator = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_units(&mut self, units: String) {
    self.units = Some(units);
  }

  pub fn with_units(mut self, units: String) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.units = Some(units);
    self
  }

  pub fn units(&self) -> Option<&String> {
    self.units.as_ref()
  }

  pub fn reset_units(&mut self) {
    self.units = None;
  }

  pub fn set_use_relative_time(&mut self, use_relative_time: bool) {
    self.use_relative_time = Some(use_relative_time);
  }

  pub fn with_use_relative_time(mut self, use_relative_time: bool) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.use_relative_time = Some(use_relative_time);
    self
  }

  pub fn use_relative_time(&self) -> Option<&bool> {
    self.use_relative_time.as_ref()
  }

  pub fn reset_use_relative_time(&mut self) {
    self.use_relative_time = None;
  }

  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



