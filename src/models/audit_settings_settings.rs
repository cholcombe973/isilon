/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuditSettingsSettings {
  /// Filter of protocol operations to Audit when they fail.
  #[serde(rename = "audit_failure")]
  audit_failure: Option<Vec<String>>,
  /// Filter of protocol operations to Audit when they succeed.
  #[serde(rename = "audit_success")]
  audit_success: Option<Vec<String>>,
  /// Filter of Audit operations to forward to syslog.
  #[serde(rename = "syslog_audit_events")]
  syslog_audit_events: Option<Vec<String>>,
  /// Enables forwarding of events to syslog.
  #[serde(rename = "syslog_forwarding_enabled")]
  syslog_forwarding_enabled: Option<bool>
}

impl AuditSettingsSettings {
  pub fn new() -> AuditSettingsSettings {
    AuditSettingsSettings {
      audit_failure: None,
      audit_success: None,
      syslog_audit_events: None,
      syslog_forwarding_enabled: None
    }
  }

  pub fn set_audit_failure(&mut self, audit_failure: Vec<String>) {
    self.audit_failure = Some(audit_failure);
  }

  pub fn with_audit_failure(mut self, audit_failure: Vec<String>) -> AuditSettingsSettings {
    self.audit_failure = Some(audit_failure);
    self
  }

  pub fn audit_failure(&self) -> Option<&Vec<String>> {
    self.audit_failure.as_ref()
  }

  pub fn reset_audit_failure(&mut self) {
    self.audit_failure = None;
  }

  pub fn set_audit_success(&mut self, audit_success: Vec<String>) {
    self.audit_success = Some(audit_success);
  }

  pub fn with_audit_success(mut self, audit_success: Vec<String>) -> AuditSettingsSettings {
    self.audit_success = Some(audit_success);
    self
  }

  pub fn audit_success(&self) -> Option<&Vec<String>> {
    self.audit_success.as_ref()
  }

  pub fn reset_audit_success(&mut self) {
    self.audit_success = None;
  }

  pub fn set_syslog_audit_events(&mut self, syslog_audit_events: Vec<String>) {
    self.syslog_audit_events = Some(syslog_audit_events);
  }

  pub fn with_syslog_audit_events(mut self, syslog_audit_events: Vec<String>) -> AuditSettingsSettings {
    self.syslog_audit_events = Some(syslog_audit_events);
    self
  }

  pub fn syslog_audit_events(&self) -> Option<&Vec<String>> {
    self.syslog_audit_events.as_ref()
  }

  pub fn reset_syslog_audit_events(&mut self) {
    self.syslog_audit_events = None;
  }

  pub fn set_syslog_forwarding_enabled(&mut self, syslog_forwarding_enabled: bool) {
    self.syslog_forwarding_enabled = Some(syslog_forwarding_enabled);
  }

  pub fn with_syslog_forwarding_enabled(mut self, syslog_forwarding_enabled: bool) -> AuditSettingsSettings {
    self.syslog_forwarding_enabled = Some(syslog_forwarding_enabled);
    self
  }

  pub fn syslog_forwarding_enabled(&self) -> Option<&bool> {
    self.syslog_forwarding_enabled.as_ref()
  }

  pub fn reset_syslog_forwarding_enabled(&mut self) {
    self.syslog_forwarding_enabled = None;
  }

}



