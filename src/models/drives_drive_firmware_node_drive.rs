/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DrivesDriveFirmwareNodeDrive {
  /// Numerical representation of this drive's bay.
  #[serde(rename = "baynum")]
  baynum: Option<i32>,
  /// This drive's current firmware revision
  #[serde(rename = "current_firmware")]
  current_firmware: Option<String>,
  /// This drive's desired firmware revision.
  #[serde(rename = "desired_firmware")]
  desired_firmware: Option<String>,
  /// This drive's device name.
  #[serde(rename = "devname")]
  devname: Option<String>,
  /// This drive's logical drive number in IFS.
  #[serde(rename = "lnum")]
  lnum: Option<i32>,
  /// String representation of this drive's physical location.
  #[serde(rename = "locnstr")]
  locnstr: Option<String>,
  /// This drive's manufacturer and model.
  #[serde(rename = "model")]
  model: Option<String>
}

impl DrivesDriveFirmwareNodeDrive {
  pub fn new() -> DrivesDriveFirmwareNodeDrive {
    DrivesDriveFirmwareNodeDrive {
      baynum: None,
      current_firmware: None,
      desired_firmware: None,
      devname: None,
      lnum: None,
      locnstr: None,
      model: None
    }
  }

  pub fn set_baynum(&mut self, baynum: i32) {
    self.baynum = Some(baynum);
  }

  pub fn with_baynum(mut self, baynum: i32) -> DrivesDriveFirmwareNodeDrive {
    self.baynum = Some(baynum);
    self
  }

  pub fn baynum(&self) -> Option<&i32> {
    self.baynum.as_ref()
  }

  pub fn reset_baynum(&mut self) {
    self.baynum = None;
  }

  pub fn set_current_firmware(&mut self, current_firmware: String) {
    self.current_firmware = Some(current_firmware);
  }

  pub fn with_current_firmware(mut self, current_firmware: String) -> DrivesDriveFirmwareNodeDrive {
    self.current_firmware = Some(current_firmware);
    self
  }

  pub fn current_firmware(&self) -> Option<&String> {
    self.current_firmware.as_ref()
  }

  pub fn reset_current_firmware(&mut self) {
    self.current_firmware = None;
  }

  pub fn set_desired_firmware(&mut self, desired_firmware: String) {
    self.desired_firmware = Some(desired_firmware);
  }

  pub fn with_desired_firmware(mut self, desired_firmware: String) -> DrivesDriveFirmwareNodeDrive {
    self.desired_firmware = Some(desired_firmware);
    self
  }

  pub fn desired_firmware(&self) -> Option<&String> {
    self.desired_firmware.as_ref()
  }

  pub fn reset_desired_firmware(&mut self) {
    self.desired_firmware = None;
  }

  pub fn set_devname(&mut self, devname: String) {
    self.devname = Some(devname);
  }

  pub fn with_devname(mut self, devname: String) -> DrivesDriveFirmwareNodeDrive {
    self.devname = Some(devname);
    self
  }

  pub fn devname(&self) -> Option<&String> {
    self.devname.as_ref()
  }

  pub fn reset_devname(&mut self) {
    self.devname = None;
  }

  pub fn set_lnum(&mut self, lnum: i32) {
    self.lnum = Some(lnum);
  }

  pub fn with_lnum(mut self, lnum: i32) -> DrivesDriveFirmwareNodeDrive {
    self.lnum = Some(lnum);
    self
  }

  pub fn lnum(&self) -> Option<&i32> {
    self.lnum.as_ref()
  }

  pub fn reset_lnum(&mut self) {
    self.lnum = None;
  }

  pub fn set_locnstr(&mut self, locnstr: String) {
    self.locnstr = Some(locnstr);
  }

  pub fn with_locnstr(mut self, locnstr: String) -> DrivesDriveFirmwareNodeDrive {
    self.locnstr = Some(locnstr);
    self
  }

  pub fn locnstr(&self) -> Option<&String> {
    self.locnstr.as_ref()
  }

  pub fn reset_locnstr(&mut self) {
    self.locnstr = None;
  }

  pub fn set_model(&mut self, model: String) {
    self.model = Some(model);
  }

  pub fn with_model(mut self, model: String) -> DrivesDriveFirmwareNodeDrive {
    self.model = Some(model);
    self
  }

  pub fn model(&self) -> Option<&String> {
    self.model.as_ref()
  }

  pub fn reset_model(&mut self) {
    self.model = None;
  }

}



