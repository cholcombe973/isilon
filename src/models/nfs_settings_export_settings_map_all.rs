/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NfsSettingsExportSettingsMapAll {
  /// True if the user mapping is applied.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "primary_group")]
  primary_group: Option<::models::AuthAccessAccessItemFileGroup>,
  /// Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.
  #[serde(rename = "secondary_groups")]
  secondary_groups: Option<Vec<::models::NfsSettingsExportSettingsMapAllSecondaryGroups>>,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "user")]
  user: Option<::models::AuthAccessAccessItemFileGroup>
}

impl NfsSettingsExportSettingsMapAll {
  pub fn new() -> NfsSettingsExportSettingsMapAll {
    NfsSettingsExportSettingsMapAll {
      enabled: None,
      primary_group: None,
      secondary_groups: None,
      user: None
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> NfsSettingsExportSettingsMapAll {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_primary_group(&mut self, primary_group: ::models::AuthAccessAccessItemFileGroup) {
    self.primary_group = Some(primary_group);
  }

  pub fn with_primary_group(mut self, primary_group: ::models::AuthAccessAccessItemFileGroup) -> NfsSettingsExportSettingsMapAll {
    self.primary_group = Some(primary_group);
    self
  }

  pub fn primary_group(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.primary_group.as_ref()
  }

  pub fn reset_primary_group(&mut self) {
    self.primary_group = None;
  }

  pub fn set_secondary_groups(&mut self, secondary_groups: Vec<::models::NfsSettingsExportSettingsMapAllSecondaryGroups>) {
    self.secondary_groups = Some(secondary_groups);
  }

  pub fn with_secondary_groups(mut self, secondary_groups: Vec<::models::NfsSettingsExportSettingsMapAllSecondaryGroups>) -> NfsSettingsExportSettingsMapAll {
    self.secondary_groups = Some(secondary_groups);
    self
  }

  pub fn secondary_groups(&self) -> Option<&Vec<::models::NfsSettingsExportSettingsMapAllSecondaryGroups>> {
    self.secondary_groups.as_ref()
  }

  pub fn reset_secondary_groups(&mut self) {
    self.secondary_groups = None;
  }

  pub fn set_user(&mut self, user: ::models::AuthAccessAccessItemFileGroup) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::AuthAccessAccessItemFileGroup) -> NfsSettingsExportSettingsMapAll {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



