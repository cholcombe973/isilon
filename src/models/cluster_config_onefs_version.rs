/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterConfigOnefsVersion {
  /// OneFS build string.
  #[serde(rename = "build")]
  build: String,
  /// Cluster copyright information.
  #[serde(rename = "copyright")]
  copyright: String,
  /// Timestamp of release date.
  #[serde(rename = "reldate")]
  reldate: i32,
  /// Kernel release number.
  #[serde(rename = "release")]
  release: String,
  /// OneFS build number.
  #[serde(rename = "revision")]
  revision: String,
  /// Kernel release type.
  #[serde(rename = "type")]
  _type: String,
  /// Kernel full version information.
  #[serde(rename = "version")]
  version: String
}

impl ClusterConfigOnefsVersion {
  pub fn new(build: String, copyright: String, reldate: i32, release: String, revision: String, _type: String, version: String) -> ClusterConfigOnefsVersion {
    ClusterConfigOnefsVersion {
      build: build,
      copyright: copyright,
      reldate: reldate,
      release: release,
      revision: revision,
      _type: _type,
      version: version
    }
  }

  pub fn set_build(&mut self, build: String) {
    self.build = build;
  }

  pub fn with_build(mut self, build: String) -> ClusterConfigOnefsVersion {
    self.build = build;
    self
  }

  pub fn build(&self) -> &String {
    &self.build
  }


  pub fn set_copyright(&mut self, copyright: String) {
    self.copyright = copyright;
  }

  pub fn with_copyright(mut self, copyright: String) -> ClusterConfigOnefsVersion {
    self.copyright = copyright;
    self
  }

  pub fn copyright(&self) -> &String {
    &self.copyright
  }


  pub fn set_reldate(&mut self, reldate: i32) {
    self.reldate = reldate;
  }

  pub fn with_reldate(mut self, reldate: i32) -> ClusterConfigOnefsVersion {
    self.reldate = reldate;
    self
  }

  pub fn reldate(&self) -> &i32 {
    &self.reldate
  }


  pub fn set_release(&mut self, release: String) {
    self.release = release;
  }

  pub fn with_release(mut self, release: String) -> ClusterConfigOnefsVersion {
    self.release = release;
    self
  }

  pub fn release(&self) -> &String {
    &self.release
  }


  pub fn set_revision(&mut self, revision: String) {
    self.revision = revision;
  }

  pub fn with_revision(mut self, revision: String) -> ClusterConfigOnefsVersion {
    self.revision = revision;
    self
  }

  pub fn revision(&self) -> &String {
    &self.revision
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ClusterConfigOnefsVersion {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_version(&mut self, version: String) {
    self.version = version;
  }

  pub fn with_version(mut self, version: String) -> ClusterConfigOnefsVersion {
    self.version = version;
    self
  }

  pub fn version(&self) -> &String {
    &self.version
  }


}



