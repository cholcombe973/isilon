/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudAccountExtended {
  /// (S3 only) The user id of the S3 account
  #[serde(rename = "account_id")]
  account_id: Option<String>,
  /// The username required to authenticate against the cloud service
  #[serde(rename = "account_username")]
  account_username: Option<String>,
  /// The guid of the cluster where this account was created
  #[serde(rename = "birth_cluster_id")]
  birth_cluster_id: Option<String>,
  /// Whether this account is explicitly enabled or disabled by a user
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// A valid authentication key for connecting to the cloud
  #[serde(rename = "key")]
  key: Option<String>,
  /// A unique name for this account
  #[serde(rename = "name")]
  name: Option<String>,
  /// The id or name of a proxy to be used by this account
  #[serde(rename = "proxy")]
  proxy: Option<String>,
  /// (Not recommended) Indicates whether to skip validation that the cloud account is still accessible
  #[serde(rename = "skip_account_check")]
  skip_account_check: Option<bool>,
  /// Indicates whether to skip SSL certificate validation when connecting to the cloud
  #[serde(rename = "skip_ssl_validation")]
  skip_ssl_validation: Option<bool>,
  /// (S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region
  #[serde(rename = "storage_region")]
  storage_region: Option<String>,
  /// (S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider
  #[serde(rename = "telemetry_bucket")]
  telemetry_bucket: Option<String>,
  /// A valid URI pointing to the location of the cloud storage
  #[serde(rename = "uri")]
  uri: Option<String>,
  /// The machine generated name of the account bucket to store data
  #[serde(rename = "bucket")]
  bucket: Option<String>,
  /// A globally unique name for this account
  #[serde(rename = "id")]
  id: Option<String>,
  /// The machine generated name of the account bucket to store metadata
  #[serde(rename = "metadata_bucket")]
  metadata_bucket: Option<String>,
  /// Name of the pool referencing this account.  Empty if none.
  #[serde(rename = "pool")]
  pool: Option<String>,
  /// Indicates whether this account is in a good state (\"OK\"), disabled (\"disabled\") or inaccessible via the network (\"unreachable\")
  #[serde(rename = "state")]
  state: Option<String>,
  /// Gives further information to describe the state of this account
  #[serde(rename = "state_details")]
  state_details: Option<String>,
  /// The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3
  #[serde(rename = "type")]
  _type: Option<String>
}

impl CloudAccountExtended {
  pub fn new() -> CloudAccountExtended {
    CloudAccountExtended {
      account_id: None,
      account_username: None,
      birth_cluster_id: None,
      enabled: None,
      key: None,
      name: None,
      proxy: None,
      skip_account_check: None,
      skip_ssl_validation: None,
      storage_region: None,
      telemetry_bucket: None,
      uri: None,
      bucket: None,
      id: None,
      metadata_bucket: None,
      pool: None,
      state: None,
      state_details: None,
      _type: None
    }
  }

  pub fn set_account_id(&mut self, account_id: String) {
    self.account_id = Some(account_id);
  }

  pub fn with_account_id(mut self, account_id: String) -> CloudAccountExtended {
    self.account_id = Some(account_id);
    self
  }

  pub fn account_id(&self) -> Option<&String> {
    self.account_id.as_ref()
  }

  pub fn reset_account_id(&mut self) {
    self.account_id = None;
  }

  pub fn set_account_username(&mut self, account_username: String) {
    self.account_username = Some(account_username);
  }

  pub fn with_account_username(mut self, account_username: String) -> CloudAccountExtended {
    self.account_username = Some(account_username);
    self
  }

  pub fn account_username(&self) -> Option<&String> {
    self.account_username.as_ref()
  }

  pub fn reset_account_username(&mut self) {
    self.account_username = None;
  }

  pub fn set_birth_cluster_id(&mut self, birth_cluster_id: String) {
    self.birth_cluster_id = Some(birth_cluster_id);
  }

  pub fn with_birth_cluster_id(mut self, birth_cluster_id: String) -> CloudAccountExtended {
    self.birth_cluster_id = Some(birth_cluster_id);
    self
  }

  pub fn birth_cluster_id(&self) -> Option<&String> {
    self.birth_cluster_id.as_ref()
  }

  pub fn reset_birth_cluster_id(&mut self) {
    self.birth_cluster_id = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> CloudAccountExtended {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> CloudAccountExtended {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> CloudAccountExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_proxy(&mut self, proxy: String) {
    self.proxy = Some(proxy);
  }

  pub fn with_proxy(mut self, proxy: String) -> CloudAccountExtended {
    self.proxy = Some(proxy);
    self
  }

  pub fn proxy(&self) -> Option<&String> {
    self.proxy.as_ref()
  }

  pub fn reset_proxy(&mut self) {
    self.proxy = None;
  }

  pub fn set_skip_account_check(&mut self, skip_account_check: bool) {
    self.skip_account_check = Some(skip_account_check);
  }

  pub fn with_skip_account_check(mut self, skip_account_check: bool) -> CloudAccountExtended {
    self.skip_account_check = Some(skip_account_check);
    self
  }

  pub fn skip_account_check(&self) -> Option<&bool> {
    self.skip_account_check.as_ref()
  }

  pub fn reset_skip_account_check(&mut self) {
    self.skip_account_check = None;
  }

  pub fn set_skip_ssl_validation(&mut self, skip_ssl_validation: bool) {
    self.skip_ssl_validation = Some(skip_ssl_validation);
  }

  pub fn with_skip_ssl_validation(mut self, skip_ssl_validation: bool) -> CloudAccountExtended {
    self.skip_ssl_validation = Some(skip_ssl_validation);
    self
  }

  pub fn skip_ssl_validation(&self) -> Option<&bool> {
    self.skip_ssl_validation.as_ref()
  }

  pub fn reset_skip_ssl_validation(&mut self) {
    self.skip_ssl_validation = None;
  }

  pub fn set_storage_region(&mut self, storage_region: String) {
    self.storage_region = Some(storage_region);
  }

  pub fn with_storage_region(mut self, storage_region: String) -> CloudAccountExtended {
    self.storage_region = Some(storage_region);
    self
  }

  pub fn storage_region(&self) -> Option<&String> {
    self.storage_region.as_ref()
  }

  pub fn reset_storage_region(&mut self) {
    self.storage_region = None;
  }

  pub fn set_telemetry_bucket(&mut self, telemetry_bucket: String) {
    self.telemetry_bucket = Some(telemetry_bucket);
  }

  pub fn with_telemetry_bucket(mut self, telemetry_bucket: String) -> CloudAccountExtended {
    self.telemetry_bucket = Some(telemetry_bucket);
    self
  }

  pub fn telemetry_bucket(&self) -> Option<&String> {
    self.telemetry_bucket.as_ref()
  }

  pub fn reset_telemetry_bucket(&mut self) {
    self.telemetry_bucket = None;
  }

  pub fn set_uri(&mut self, uri: String) {
    self.uri = Some(uri);
  }

  pub fn with_uri(mut self, uri: String) -> CloudAccountExtended {
    self.uri = Some(uri);
    self
  }

  pub fn uri(&self) -> Option<&String> {
    self.uri.as_ref()
  }

  pub fn reset_uri(&mut self) {
    self.uri = None;
  }

  pub fn set_bucket(&mut self, bucket: String) {
    self.bucket = Some(bucket);
  }

  pub fn with_bucket(mut self, bucket: String) -> CloudAccountExtended {
    self.bucket = Some(bucket);
    self
  }

  pub fn bucket(&self) -> Option<&String> {
    self.bucket.as_ref()
  }

  pub fn reset_bucket(&mut self) {
    self.bucket = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> CloudAccountExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_metadata_bucket(&mut self, metadata_bucket: String) {
    self.metadata_bucket = Some(metadata_bucket);
  }

  pub fn with_metadata_bucket(mut self, metadata_bucket: String) -> CloudAccountExtended {
    self.metadata_bucket = Some(metadata_bucket);
    self
  }

  pub fn metadata_bucket(&self) -> Option<&String> {
    self.metadata_bucket.as_ref()
  }

  pub fn reset_metadata_bucket(&mut self) {
    self.metadata_bucket = None;
  }

  pub fn set_pool(&mut self, pool: String) {
    self.pool = Some(pool);
  }

  pub fn with_pool(mut self, pool: String) -> CloudAccountExtended {
    self.pool = Some(pool);
    self
  }

  pub fn pool(&self) -> Option<&String> {
    self.pool.as_ref()
  }

  pub fn reset_pool(&mut self) {
    self.pool = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> CloudAccountExtended {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_state_details(&mut self, state_details: String) {
    self.state_details = Some(state_details);
  }

  pub fn with_state_details(mut self, state_details: String) -> CloudAccountExtended {
    self.state_details = Some(state_details);
    self
  }

  pub fn state_details(&self) -> Option<&String> {
    self.state_details.as_ref()
  }

  pub fn reset_state_details(&mut self) {
    self.state_details = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with_type(mut self, _type: String) -> CloudAccountExtended {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset_type(&mut self) {
    self._type = None;
  }

}



