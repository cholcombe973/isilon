/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventEventlist {
  /// Number of events linked to this eventgroup.
  #[serde(rename = "event_count")]
  event_count: Option<i32>,
  /// Unique identifier of eventgroup instance.
  #[serde(rename = "eventgroup_instance")]
  eventgroup_instance: Option<String>,
  /// list of all events linked to this eventgroup in chronological order.
  #[serde(rename = "events")]
  events: Option<Vec<::models::EventEventlistEvent>>,
  /// Same as eventgroup_instance.
  #[serde(rename = "id")]
  id: Option<String>
}

impl EventEventlist {
  pub fn new() -> EventEventlist {
    EventEventlist {
      event_count: None,
      eventgroup_instance: None,
      events: None,
      id: None
    }
  }

  pub fn set_event_count(&mut self, event_count: i32) {
    self.event_count = Some(event_count);
  }

  pub fn with_event_count(mut self, event_count: i32) -> EventEventlist {
    self.event_count = Some(event_count);
    self
  }

  pub fn event_count(&self) -> Option<&i32> {
    self.event_count.as_ref()
  }

  pub fn reset_event_count(&mut self) {
    self.event_count = None;
  }

  pub fn set_eventgroup_instance(&mut self, eventgroup_instance: String) {
    self.eventgroup_instance = Some(eventgroup_instance);
  }

  pub fn with_eventgroup_instance(mut self, eventgroup_instance: String) -> EventEventlist {
    self.eventgroup_instance = Some(eventgroup_instance);
    self
  }

  pub fn eventgroup_instance(&self) -> Option<&String> {
    self.eventgroup_instance.as_ref()
  }

  pub fn reset_eventgroup_instance(&mut self) {
    self.eventgroup_instance = None;
  }

  pub fn set_events(&mut self, events: Vec<::models::EventEventlistEvent>) {
    self.events = Some(events);
  }

  pub fn with_events(mut self, events: Vec<::models::EventEventlistEvent>) -> EventEventlist {
    self.events = Some(events);
    self
  }

  pub fn events(&self) -> Option<&Vec<::models::EventEventlistEvent>> {
    self.events.as_ref()
  }

  pub fn reset_events(&mut self) {
    self.events = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> EventEventlist {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

}



