/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotLockExtended {
  /// User supplied lock comment.
  #[serde(rename = "comment")]
  comment: Option<String>,
  /// Recursive lock count.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// The Unix Epoch time the snapshot lock will expire and be eligible for automatic deletion.
  #[serde(rename = "expires")]
  expires: Option<i32>,
  /// System generated lock ID.
  #[serde(rename = "id")]
  id: Option<i32>
}

impl SnapshotLockExtended {
  pub fn new() -> SnapshotLockExtended {
    SnapshotLockExtended {
      comment: None,
      count: None,
      expires: None,
      id: None
    }
  }

  pub fn set_comment(&mut self, comment: String) {
    self.comment = Some(comment);
  }

  pub fn with_comment(mut self, comment: String) -> SnapshotLockExtended {
    self.comment = Some(comment);
    self
  }

  pub fn comment(&self) -> Option<&String> {
    self.comment.as_ref()
  }

  pub fn reset_comment(&mut self) {
    self.comment = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> SnapshotLockExtended {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_expires(&mut self, expires: i32) {
    self.expires = Some(expires);
  }

  pub fn with_expires(mut self, expires: i32) -> SnapshotLockExtended {
    self.expires = Some(expires);
    self
  }

  pub fn expires(&self) -> Option<&i32> {
    self.expires.as_ref()
  }

  pub fn reset_expires(&mut self) {
    self.expires = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SnapshotLockExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

}



