/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterNodes : The node details useful during an upgrade or assessment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterNodes {
  /// The current OneFS version before upgrade.
  #[serde(rename = "error")]
  error: Option<::models::ClusterNodesError>,
  /// The last action performed to completion/failure on this node.  Null if the node_state is 'committed' or 'assessing.' One of the following values: 'upgrade', 'rollback'.
  #[serde(rename = "last_action")]
  last_action: Option<String>,
  /// Did the node pass upgrade or rollback without failing? Null if the node_state is 'committed.' One of the following values: 'pass', 'fail', null
  #[serde(rename = "last_action_result")]
  last_action_result: Option<String>,
  /// The lnn of the node.
  #[serde(rename = "lnn")]
  lnn: Option<i32>,
  /// \\e The state of the node during the upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'upgrading', 'rolling back', 'assessing', 'error'
  #[serde(rename = "node_state")]
  node_state: Option<String>,
  /// The current OneFS version before upgrade.
  #[serde(rename = "onefs_version")]
  onefs_version: Option<::models::ClusterNodesOnefsVersion>,
  /// What step is the upgrade, assessment, or rollback in? To show via progress indicator. NOTE: the value is an integer between 0 and 100 (percent)
  #[serde(rename = "progress")]
  progress: Option<i32>
}

impl ClusterNodes {
  /// The node details useful during an upgrade or assessment.
  pub fn new() -> ClusterNodes {
    ClusterNodes {
      error: None,
      last_action: None,
      last_action_result: None,
      lnn: None,
      node_state: None,
      onefs_version: None,
      progress: None
    }
  }

  pub fn set_error(&mut self, error: ::models::ClusterNodesError) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: ::models::ClusterNodesError) -> ClusterNodes {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&::models::ClusterNodesError> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_last_action(&mut self, last_action: String) {
    self.last_action = Some(last_action);
  }

  pub fn with_last_action(mut self, last_action: String) -> ClusterNodes {
    self.last_action = Some(last_action);
    self
  }

  pub fn last_action(&self) -> Option<&String> {
    self.last_action.as_ref()
  }

  pub fn reset_last_action(&mut self) {
    self.last_action = None;
  }

  pub fn set_last_action_result(&mut self, last_action_result: String) {
    self.last_action_result = Some(last_action_result);
  }

  pub fn with_last_action_result(mut self, last_action_result: String) -> ClusterNodes {
    self.last_action_result = Some(last_action_result);
    self
  }

  pub fn last_action_result(&self) -> Option<&String> {
    self.last_action_result.as_ref()
  }

  pub fn reset_last_action_result(&mut self) {
    self.last_action_result = None;
  }

  pub fn set_lnn(&mut self, lnn: i32) {
    self.lnn = Some(lnn);
  }

  pub fn with_lnn(mut self, lnn: i32) -> ClusterNodes {
    self.lnn = Some(lnn);
    self
  }

  pub fn lnn(&self) -> Option<&i32> {
    self.lnn.as_ref()
  }

  pub fn reset_lnn(&mut self) {
    self.lnn = None;
  }

  pub fn set_node_state(&mut self, node_state: String) {
    self.node_state = Some(node_state);
  }

  pub fn with_node_state(mut self, node_state: String) -> ClusterNodes {
    self.node_state = Some(node_state);
    self
  }

  pub fn node_state(&self) -> Option<&String> {
    self.node_state.as_ref()
  }

  pub fn reset_node_state(&mut self) {
    self.node_state = None;
  }

  pub fn set_onefs_version(&mut self, onefs_version: ::models::ClusterNodesOnefsVersion) {
    self.onefs_version = Some(onefs_version);
  }

  pub fn with_onefs_version(mut self, onefs_version: ::models::ClusterNodesOnefsVersion) -> ClusterNodes {
    self.onefs_version = Some(onefs_version);
    self
  }

  pub fn onefs_version(&self) -> Option<&::models::ClusterNodesOnefsVersion> {
    self.onefs_version.as_ref()
  }

  pub fn reset_onefs_version(&mut self) {
    self.onefs_version = None;
  }

  pub fn set_progress(&mut self, progress: i32) {
    self.progress = Some(progress);
  }

  pub fn with_progress(mut self, progress: i32) -> ClusterNodes {
    self.progress = Some(progress);
    self
  }

  pub fn progress(&self) -> Option<&i32> {
    self.progress.as_ref()
  }

  pub fn reset_progress(&mut self) {
    self.progress = None;
  }

}



