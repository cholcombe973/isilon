/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupnetSubnetExtended {
  /// A description of the subnet.
  #[serde(rename = "description")]
  description: Option<String>,
  /// List of Direct Server Return addresses.
  #[serde(rename = "dsr_addrs")]
  dsr_addrs: Option<Vec<String>>,
  /// Gateway IP address.
  #[serde(rename = "gateway")]
  gateway: Option<String>,
  /// Gateway priority.
  #[serde(rename = "gateway_priority")]
  gateway_priority: Option<i32>,
  /// MTU of the subnet.
  #[serde(rename = "mtu")]
  mtu: Option<i32>,
  /// The name of the subnet.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Subnet Prefix Length.
  #[serde(rename = "prefixlen")]
  prefixlen: Option<i32>,
  /// The address that SmartConnect listens for DNS requests.
  #[serde(rename = "sc_service_addr")]
  sc_service_addr: Option<String>,
  /// Domain Name corresponding to the SmartConnect Service Address.
  #[serde(rename = "sc_service_name")]
  sc_service_name: Option<String>,
  /// VLAN tagging enabled or disabled.
  #[serde(rename = "vlan_enabled")]
  vlan_enabled: Option<bool>,
  /// VLAN ID for all interfaces in the subnet.
  #[serde(rename = "vlan_id")]
  vlan_id: Option<i32>,
  /// IP address format.
  #[serde(rename = "addr_family")]
  addr_family: Option<String>,
  /// The base IP address.
  #[serde(rename = "base_addr")]
  base_addr: Option<String>,
  /// Name of the groupnet this subnet belongs to.
  #[serde(rename = "groupnet")]
  groupnet: Option<String>,
  /// Unique Subnet ID.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Name of the pools in the subnet.
  #[serde(rename = "pools")]
  pools: Option<Vec<String>>
}

impl GroupnetSubnetExtended {
  pub fn new() -> GroupnetSubnetExtended {
    GroupnetSubnetExtended {
      description: None,
      dsr_addrs: None,
      gateway: None,
      gateway_priority: None,
      mtu: None,
      name: None,
      prefixlen: None,
      sc_service_addr: None,
      sc_service_name: None,
      vlan_enabled: None,
      vlan_id: None,
      addr_family: None,
      base_addr: None,
      groupnet: None,
      id: None,
      pools: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> GroupnetSubnetExtended {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_dsr_addrs(&mut self, dsr_addrs: Vec<String>) {
    self.dsr_addrs = Some(dsr_addrs);
  }

  pub fn with_dsr_addrs(mut self, dsr_addrs: Vec<String>) -> GroupnetSubnetExtended {
    self.dsr_addrs = Some(dsr_addrs);
    self
  }

  pub fn dsr_addrs(&self) -> Option<&Vec<String>> {
    self.dsr_addrs.as_ref()
  }

  pub fn reset_dsr_addrs(&mut self) {
    self.dsr_addrs = None;
  }

  pub fn set_gateway(&mut self, gateway: String) {
    self.gateway = Some(gateway);
  }

  pub fn with_gateway(mut self, gateway: String) -> GroupnetSubnetExtended {
    self.gateway = Some(gateway);
    self
  }

  pub fn gateway(&self) -> Option<&String> {
    self.gateway.as_ref()
  }

  pub fn reset_gateway(&mut self) {
    self.gateway = None;
  }

  pub fn set_gateway_priority(&mut self, gateway_priority: i32) {
    self.gateway_priority = Some(gateway_priority);
  }

  pub fn with_gateway_priority(mut self, gateway_priority: i32) -> GroupnetSubnetExtended {
    self.gateway_priority = Some(gateway_priority);
    self
  }

  pub fn gateway_priority(&self) -> Option<&i32> {
    self.gateway_priority.as_ref()
  }

  pub fn reset_gateway_priority(&mut self) {
    self.gateway_priority = None;
  }

  pub fn set_mtu(&mut self, mtu: i32) {
    self.mtu = Some(mtu);
  }

  pub fn with_mtu(mut self, mtu: i32) -> GroupnetSubnetExtended {
    self.mtu = Some(mtu);
    self
  }

  pub fn mtu(&self) -> Option<&i32> {
    self.mtu.as_ref()
  }

  pub fn reset_mtu(&mut self) {
    self.mtu = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GroupnetSubnetExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_prefixlen(&mut self, prefixlen: i32) {
    self.prefixlen = Some(prefixlen);
  }

  pub fn with_prefixlen(mut self, prefixlen: i32) -> GroupnetSubnetExtended {
    self.prefixlen = Some(prefixlen);
    self
  }

  pub fn prefixlen(&self) -> Option<&i32> {
    self.prefixlen.as_ref()
  }

  pub fn reset_prefixlen(&mut self) {
    self.prefixlen = None;
  }

  pub fn set_sc_service_addr(&mut self, sc_service_addr: String) {
    self.sc_service_addr = Some(sc_service_addr);
  }

  pub fn with_sc_service_addr(mut self, sc_service_addr: String) -> GroupnetSubnetExtended {
    self.sc_service_addr = Some(sc_service_addr);
    self
  }

  pub fn sc_service_addr(&self) -> Option<&String> {
    self.sc_service_addr.as_ref()
  }

  pub fn reset_sc_service_addr(&mut self) {
    self.sc_service_addr = None;
  }

  pub fn set_sc_service_name(&mut self, sc_service_name: String) {
    self.sc_service_name = Some(sc_service_name);
  }

  pub fn with_sc_service_name(mut self, sc_service_name: String) -> GroupnetSubnetExtended {
    self.sc_service_name = Some(sc_service_name);
    self
  }

  pub fn sc_service_name(&self) -> Option<&String> {
    self.sc_service_name.as_ref()
  }

  pub fn reset_sc_service_name(&mut self) {
    self.sc_service_name = None;
  }

  pub fn set_vlan_enabled(&mut self, vlan_enabled: bool) {
    self.vlan_enabled = Some(vlan_enabled);
  }

  pub fn with_vlan_enabled(mut self, vlan_enabled: bool) -> GroupnetSubnetExtended {
    self.vlan_enabled = Some(vlan_enabled);
    self
  }

  pub fn vlan_enabled(&self) -> Option<&bool> {
    self.vlan_enabled.as_ref()
  }

  pub fn reset_vlan_enabled(&mut self) {
    self.vlan_enabled = None;
  }

  pub fn set_vlan_id(&mut self, vlan_id: i32) {
    self.vlan_id = Some(vlan_id);
  }

  pub fn with_vlan_id(mut self, vlan_id: i32) -> GroupnetSubnetExtended {
    self.vlan_id = Some(vlan_id);
    self
  }

  pub fn vlan_id(&self) -> Option<&i32> {
    self.vlan_id.as_ref()
  }

  pub fn reset_vlan_id(&mut self) {
    self.vlan_id = None;
  }

  pub fn set_addr_family(&mut self, addr_family: String) {
    self.addr_family = Some(addr_family);
  }

  pub fn with_addr_family(mut self, addr_family: String) -> GroupnetSubnetExtended {
    self.addr_family = Some(addr_family);
    self
  }

  pub fn addr_family(&self) -> Option<&String> {
    self.addr_family.as_ref()
  }

  pub fn reset_addr_family(&mut self) {
    self.addr_family = None;
  }

  pub fn set_base_addr(&mut self, base_addr: String) {
    self.base_addr = Some(base_addr);
  }

  pub fn with_base_addr(mut self, base_addr: String) -> GroupnetSubnetExtended {
    self.base_addr = Some(base_addr);
    self
  }

  pub fn base_addr(&self) -> Option<&String> {
    self.base_addr.as_ref()
  }

  pub fn reset_base_addr(&mut self) {
    self.base_addr = None;
  }

  pub fn set_groupnet(&mut self, groupnet: String) {
    self.groupnet = Some(groupnet);
  }

  pub fn with_groupnet(mut self, groupnet: String) -> GroupnetSubnetExtended {
    self.groupnet = Some(groupnet);
    self
  }

  pub fn groupnet(&self) -> Option<&String> {
    self.groupnet.as_ref()
  }

  pub fn reset_groupnet(&mut self) {
    self.groupnet = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> GroupnetSubnetExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_pools(&mut self, pools: Vec<String>) {
    self.pools = Some(pools);
  }

  pub fn with_pools(mut self, pools: Vec<String>) -> GroupnetSubnetExtended {
    self.pools = Some(pools);
    self
  }

  pub fn pools(&self) -> Option<&Vec<String>> {
    self.pools.as_ref()
  }

  pub fn reset_pools(&mut self) {
    self.pools = None;
  }

}



