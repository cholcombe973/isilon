/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthRoleExtended {
  /// Specifies the description of the role.
  #[serde(rename = "description")]
  description: Option<String>,
  /// Specifies the users or groups that have this role.
  #[serde(rename = "members")]
  members: Vec<::models::AuthAccessAccessItemFileGroup>,
  /// Specifies the name of the role.
  #[serde(rename = "name")]
  name: String,
  /// Specifies the privileges granted by this role.
  #[serde(rename = "privileges")]
  privileges: Vec<::models::AuthIdNtokenPrivilegeItem>,
  /// Specifies the ID of the role.
  #[serde(rename = "id")]
  id: String
}

impl AuthRoleExtended {
  pub fn new(members: Vec<::models::AuthAccessAccessItemFileGroup>, name: String, privileges: Vec<::models::AuthIdNtokenPrivilegeItem>, id: String) -> AuthRoleExtended {
    AuthRoleExtended {
      description: None,
      members: members,
      name: name,
      privileges: privileges,
      id: id
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> AuthRoleExtended {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_members(&mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) {
    self.members = members;
  }

  pub fn with_members(mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) -> AuthRoleExtended {
    self.members = members;
    self
  }

  pub fn members(&self) -> &Vec<::models::AuthAccessAccessItemFileGroup> {
    &self.members
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> AuthRoleExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_privileges(&mut self, privileges: Vec<::models::AuthIdNtokenPrivilegeItem>) {
    self.privileges = privileges;
  }

  pub fn with_privileges(mut self, privileges: Vec<::models::AuthIdNtokenPrivilegeItem>) -> AuthRoleExtended {
    self.privileges = privileges;
    self
  }

  pub fn privileges(&self) -> &Vec<::models::AuthIdNtokenPrivilegeItem> {
    &self.privileges
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> AuthRoleExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


}



