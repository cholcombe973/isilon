/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MappingUsersRulesRules {
  /// Specifies the default UNIX user information that can be applied if the final credentials do not have valid UID and GID information.
  #[serde(rename = "parameters")]
  parameters: Option<::models::MappingUsersRulesRulesParameters>,
  /// Specifies the list of user mapping rules.
  #[serde(rename = "rules")]
  rules: Option<Vec<::models::MappingUsersRulesRule>>
}

impl MappingUsersRulesRules {
  pub fn new() -> MappingUsersRulesRules {
    MappingUsersRulesRules {
      parameters: None,
      rules: None
    }
  }

  pub fn set_parameters(&mut self, parameters: ::models::MappingUsersRulesRulesParameters) {
    self.parameters = Some(parameters);
  }

  pub fn with_parameters(mut self, parameters: ::models::MappingUsersRulesRulesParameters) -> MappingUsersRulesRules {
    self.parameters = Some(parameters);
    self
  }

  pub fn parameters(&self) -> Option<&::models::MappingUsersRulesRulesParameters> {
    self.parameters.as_ref()
  }

  pub fn reset_parameters(&mut self) {
    self.parameters = None;
  }

  pub fn set_rules(&mut self, rules: Vec<::models::MappingUsersRulesRule>) {
    self.rules = Some(rules);
  }

  pub fn with_rules(mut self, rules: Vec<::models::MappingUsersRulesRule>) -> MappingUsersRulesRules {
    self.rules = Some(rules);
    self
  }

  pub fn rules(&self) -> Option<&Vec<::models::MappingUsersRulesRule>> {
    self.rules.as_ref()
  }

  pub fn reset_rules(&mut self) {
    self.rules = None;
  }

}



