/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SyncJobWorker {
  /// Whether there is a connection between the source and target.
  #[serde(rename = "connected")]
  connected: Option<bool>,
  /// The last time a network split occurred.
  #[serde(rename = "last_split")]
  last_split: Option<i32>,
  /// The last time the worker performed work.
  #[serde(rename = "last_work")]
  last_work: Option<i32>,
  /// The LIN being worked on.
  #[serde(rename = "lin")]
  lin: Option<i32>,
  /// The lnn the worker is assigned to run on.
  #[serde(rename = "lnn")]
  lnn: Option<i32>,
  /// The process ID of the worker.
  #[serde(rename = "process_id")]
  process_id: Option<i32>,
  /// The source host for this worker.
  #[serde(rename = "source_host")]
  source_host: Option<String>,
  /// The target host for this worker.
  #[serde(rename = "target_host")]
  target_host: Option<String>,
  /// The ID of the worker.
  #[serde(rename = "worker_id")]
  worker_id: Option<i32>
}

impl SyncJobWorker {
  pub fn new() -> SyncJobWorker {
    SyncJobWorker {
      connected: None,
      last_split: None,
      last_work: None,
      lin: None,
      lnn: None,
      process_id: None,
      source_host: None,
      target_host: None,
      worker_id: None
    }
  }

  pub fn set_connected(&mut self, connected: bool) {
    self.connected = Some(connected);
  }

  pub fn with_connected(mut self, connected: bool) -> SyncJobWorker {
    self.connected = Some(connected);
    self
  }

  pub fn connected(&self) -> Option<&bool> {
    self.connected.as_ref()
  }

  pub fn reset_connected(&mut self) {
    self.connected = None;
  }

  pub fn set_last_split(&mut self, last_split: i32) {
    self.last_split = Some(last_split);
  }

  pub fn with_last_split(mut self, last_split: i32) -> SyncJobWorker {
    self.last_split = Some(last_split);
    self
  }

  pub fn last_split(&self) -> Option<&i32> {
    self.last_split.as_ref()
  }

  pub fn reset_last_split(&mut self) {
    self.last_split = None;
  }

  pub fn set_last_work(&mut self, last_work: i32) {
    self.last_work = Some(last_work);
  }

  pub fn with_last_work(mut self, last_work: i32) -> SyncJobWorker {
    self.last_work = Some(last_work);
    self
  }

  pub fn last_work(&self) -> Option<&i32> {
    self.last_work.as_ref()
  }

  pub fn reset_last_work(&mut self) {
    self.last_work = None;
  }

  pub fn set_lin(&mut self, lin: i32) {
    self.lin = Some(lin);
  }

  pub fn with_lin(mut self, lin: i32) -> SyncJobWorker {
    self.lin = Some(lin);
    self
  }

  pub fn lin(&self) -> Option<&i32> {
    self.lin.as_ref()
  }

  pub fn reset_lin(&mut self) {
    self.lin = None;
  }

  pub fn set_lnn(&mut self, lnn: i32) {
    self.lnn = Some(lnn);
  }

  pub fn with_lnn(mut self, lnn: i32) -> SyncJobWorker {
    self.lnn = Some(lnn);
    self
  }

  pub fn lnn(&self) -> Option<&i32> {
    self.lnn.as_ref()
  }

  pub fn reset_lnn(&mut self) {
    self.lnn = None;
  }

  pub fn set_process_id(&mut self, process_id: i32) {
    self.process_id = Some(process_id);
  }

  pub fn with_process_id(mut self, process_id: i32) -> SyncJobWorker {
    self.process_id = Some(process_id);
    self
  }

  pub fn process_id(&self) -> Option<&i32> {
    self.process_id.as_ref()
  }

  pub fn reset_process_id(&mut self) {
    self.process_id = None;
  }

  pub fn set_source_host(&mut self, source_host: String) {
    self.source_host = Some(source_host);
  }

  pub fn with_source_host(mut self, source_host: String) -> SyncJobWorker {
    self.source_host = Some(source_host);
    self
  }

  pub fn source_host(&self) -> Option<&String> {
    self.source_host.as_ref()
  }

  pub fn reset_source_host(&mut self) {
    self.source_host = None;
  }

  pub fn set_target_host(&mut self, target_host: String) {
    self.target_host = Some(target_host);
  }

  pub fn with_target_host(mut self, target_host: String) -> SyncJobWorker {
    self.target_host = Some(target_host);
    self
  }

  pub fn target_host(&self) -> Option<&String> {
    self.target_host.as_ref()
  }

  pub fn reset_target_host(&mut self) {
    self.target_host = None;
  }

  pub fn set_worker_id(&mut self, worker_id: i32) {
    self.worker_id = Some(worker_id);
  }

  pub fn with_worker_id(mut self, worker_id: i32) -> SyncJobWorker {
    self.worker_id = Some(worker_id);
    self
  }

  pub fn worker_id(&self) -> Option<&i32> {
    self.worker_id.as_ref()
  }

  pub fn reset_worker_id(&mut self) {
    self.worker_id = None;
  }

}



