/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HistogramStatBy {
  /// Unix Epoch time of start of results collection job.
  #[serde(rename = "begin_time")]
  begin_time: i32,
  /// Histogram breakout data according to breakout parameter.
  #[serde(rename = "breakouts")]
  breakouts: Vec<::models::HistogramStatByBreakout>,
  /// Total length of the result list.
  #[serde(rename = "result_length")]
  result_length: i32
}

impl HistogramStatBy {
  pub fn new(begin_time: i32, breakouts: Vec<::models::HistogramStatByBreakout>, result_length: i32) -> HistogramStatBy {
    HistogramStatBy {
      begin_time: begin_time,
      breakouts: breakouts,
      result_length: result_length
    }
  }

  pub fn set_begin_time(&mut self, begin_time: i32) {
    self.begin_time = begin_time;
  }

  pub fn with_begin_time(mut self, begin_time: i32) -> HistogramStatBy {
    self.begin_time = begin_time;
    self
  }

  pub fn begin_time(&self) -> &i32 {
    &self.begin_time
  }


  pub fn set_breakouts(&mut self, breakouts: Vec<::models::HistogramStatByBreakout>) {
    self.breakouts = breakouts;
  }

  pub fn with_breakouts(mut self, breakouts: Vec<::models::HistogramStatByBreakout>) -> HistogramStatBy {
    self.breakouts = breakouts;
    self
  }

  pub fn breakouts(&self) -> &Vec<::models::HistogramStatByBreakout> {
    &self.breakouts
  }


  pub fn set_result_length(&mut self, result_length: i32) {
    self.result_length = result_length;
  }

  pub fn with_result_length(mut self, result_length: i32) -> HistogramStatBy {
    self.result_length = result_length;
    self
  }

  pub fn result_length(&self) -> &i32 {
    &self.result_length
  }


}



