/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterVersionNode {
  /// OneFS build string.
  #[serde(rename = "build")]
  build: String,
  /// Error message, if the HTTP status returned from this node was not 200.
  #[serde(rename = "error")]
  error: Option<String>,
  /// Node ID of the node reporting this information.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Logical node number of the node reporting this information.
  #[serde(rename = "lnn")]
  lnn: Option<i32>,
  /// Kernel release number.
  #[serde(rename = "release")]
  release: String,
  /// OneFS build number.
  #[serde(rename = "revision")]
  revision: String,
  /// Status of the HTTP response from this node if not 200.  If 200, this field does not appear.
  #[serde(rename = "status")]
  status: Option<i32>,
  /// Kernel release type.
  #[serde(rename = "type")]
  _type: String,
  /// Kernel full version information.
  #[serde(rename = "version")]
  version: String
}

impl ClusterVersionNode {
  pub fn new(build: String, release: String, revision: String, _type: String, version: String) -> ClusterVersionNode {
    ClusterVersionNode {
      build: build,
      error: None,
      id: None,
      lnn: None,
      release: release,
      revision: revision,
      status: None,
      _type: _type,
      version: version
    }
  }

  pub fn set_build(&mut self, build: String) {
    self.build = build;
  }

  pub fn with_build(mut self, build: String) -> ClusterVersionNode {
    self.build = build;
    self
  }

  pub fn build(&self) -> &String {
    &self.build
  }


  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> ClusterVersionNode {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> ClusterVersionNode {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_lnn(&mut self, lnn: i32) {
    self.lnn = Some(lnn);
  }

  pub fn with_lnn(mut self, lnn: i32) -> ClusterVersionNode {
    self.lnn = Some(lnn);
    self
  }

  pub fn lnn(&self) -> Option<&i32> {
    self.lnn.as_ref()
  }

  pub fn reset_lnn(&mut self) {
    self.lnn = None;
  }

  pub fn set_release(&mut self, release: String) {
    self.release = release;
  }

  pub fn with_release(mut self, release: String) -> ClusterVersionNode {
    self.release = release;
    self
  }

  pub fn release(&self) -> &String {
    &self.release
  }


  pub fn set_revision(&mut self, revision: String) {
    self.revision = revision;
  }

  pub fn with_revision(mut self, revision: String) -> ClusterVersionNode {
    self.revision = revision;
    self
  }

  pub fn revision(&self) -> &String {
    &self.revision
  }


  pub fn set_status(&mut self, status: i32) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: i32) -> ClusterVersionNode {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&i32> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ClusterVersionNode {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_version(&mut self, version: String) {
    self.version = version;
  }

  pub fn with_version(mut self, version: String) -> ClusterVersionNode {
    self.version = version;
    self
  }

  pub fn version(&self) -> &String {
    &self.version
  }


}



