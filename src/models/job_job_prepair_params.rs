/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobJobPrepairParams {
  /// Type of permissions; not accepted with mode=clone or mode=inherit.
  #[serde(rename = "mapping_type")]
  mapping_type: Option<String>,
  /// Type of PermissionRepair operation.
  #[serde(rename = "mode")]
  mode: String,
  /// IFS file or directory to use as a template; required with mode=clone and mode=inherit, not accepted with mode=convert.
  #[serde(rename = "template")]
  template: Option<String>,
  /// Authentication zone; not accepted with mode=clone or mode=inherit.
  #[serde(rename = "zone")]
  zone: Option<String>
}

impl JobJobPrepairParams {
  pub fn new(mode: String) -> JobJobPrepairParams {
    JobJobPrepairParams {
      mapping_type: None,
      mode: mode,
      template: None,
      zone: None
    }
  }

  pub fn set_mapping_type(&mut self, mapping_type: String) {
    self.mapping_type = Some(mapping_type);
  }

  pub fn with_mapping_type(mut self, mapping_type: String) -> JobJobPrepairParams {
    self.mapping_type = Some(mapping_type);
    self
  }

  pub fn mapping_type(&self) -> Option<&String> {
    self.mapping_type.as_ref()
  }

  pub fn reset_mapping_type(&mut self) {
    self.mapping_type = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = mode;
  }

  pub fn with_mode(mut self, mode: String) -> JobJobPrepairParams {
    self.mode = mode;
    self
  }

  pub fn mode(&self) -> &String {
    &self.mode
  }


  pub fn set_template(&mut self, template: String) {
    self.template = Some(template);
  }

  pub fn with_template(mut self, template: String) -> JobJobPrepairParams {
    self.template = Some(template);
    self
  }

  pub fn template(&self) -> Option<&String> {
    self.template.as_ref()
  }

  pub fn reset_template(&mut self) {
    self.template = None;
  }

  pub fn set_zone(&mut self, zone: String) {
    self.zone = Some(zone);
  }

  pub fn with_zone(mut self, zone: String) -> JobJobPrepairParams {
    self.zone = Some(zone);
    self
  }

  pub fn zone(&self) -> Option<&String> {
    self.zone.as_ref()
  }

  pub fn reset_zone(&mut self) {
    self.zone = None;
  }

}



