/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterUpgrade : Add nodes to a running upgrade.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterUpgrade {
  /// The nodes (to be) scheduled for an existing upgrade ordered by queue position number. [<lnn-1>, <lnn-2>, ... ], 'All', null
  #[serde(rename = "nodes_to_rolling_upgrade")]
  nodes_to_rolling_upgrade: Option<Vec<i32>>
}

impl ClusterUpgrade {
  /// Add nodes to a running upgrade.
  pub fn new() -> ClusterUpgrade {
    ClusterUpgrade {
      nodes_to_rolling_upgrade: None
    }
  }

  pub fn set_nodes_to_rolling_upgrade(&mut self, nodes_to_rolling_upgrade: Vec<i32>) {
    self.nodes_to_rolling_upgrade = Some(nodes_to_rolling_upgrade);
  }

  pub fn with_nodes_to_rolling_upgrade(mut self, nodes_to_rolling_upgrade: Vec<i32>) -> ClusterUpgrade {
    self.nodes_to_rolling_upgrade = Some(nodes_to_rolling_upgrade);
    self
  }

  pub fn nodes_to_rolling_upgrade(&self) -> Option<&Vec<i32>> {
    self.nodes_to_rolling_upgrade.as_ref()
  }

  pub fn reset_nodes_to_rolling_upgrade(&mut self) {
    self.nodes_to_rolling_upgrade = None;
  }

}



