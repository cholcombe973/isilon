/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthNetgroup {
  #[serde(rename = "domainname")]
  domainname: Option<String>,
  #[serde(rename = "hostname")]
  hostname: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "netgroup")]
  netgroup: Option<String>,
  #[serde(rename = "username")]
  username: Option<String>
}

impl AuthNetgroup {
  pub fn new() -> AuthNetgroup {
    AuthNetgroup {
      domainname: None,
      hostname: None,
      id: None,
      netgroup: None,
      username: None
    }
  }

  pub fn set_domainname(&mut self, domainname: String) {
    self.domainname = Some(domainname);
  }

  pub fn with_domainname(mut self, domainname: String) -> AuthNetgroup {
    self.domainname = Some(domainname);
    self
  }

  pub fn domainname(&self) -> Option<&String> {
    self.domainname.as_ref()
  }

  pub fn reset_domainname(&mut self) {
    self.domainname = None;
  }

  pub fn set_hostname(&mut self, hostname: String) {
    self.hostname = Some(hostname);
  }

  pub fn with_hostname(mut self, hostname: String) -> AuthNetgroup {
    self.hostname = Some(hostname);
    self
  }

  pub fn hostname(&self) -> Option<&String> {
    self.hostname.as_ref()
  }

  pub fn reset_hostname(&mut self) {
    self.hostname = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> AuthNetgroup {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_netgroup(&mut self, netgroup: String) {
    self.netgroup = Some(netgroup);
  }

  pub fn with_netgroup(mut self, netgroup: String) -> AuthNetgroup {
    self.netgroup = Some(netgroup);
    self
  }

  pub fn netgroup(&self) -> Option<&String> {
    self.netgroup.as_ref()
  }

  pub fn reset_netgroup(&mut self) {
    self.netgroup = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> AuthNetgroup {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



