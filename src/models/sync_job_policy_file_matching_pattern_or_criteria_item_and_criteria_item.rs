/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
  /// For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.
  #[serde(rename = "attribute_exists")]
  attribute_exists: Option<bool>,
  /// If true, the value comparison will be case sensitive.  Default is true.
  #[serde(rename = "case_sensitive")]
  case_sensitive: Option<bool>,
  /// The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".
  #[serde(rename = "field")]
  field: Option<String>,
  /// How to compare the specified attribute of each file to the specified value.
  #[serde(rename = "operator")]
  operator: Option<String>,
  /// The type of this criterion, that is, which file attribute to match on.
  #[serde(rename = "type")]
  _type: String,
  /// The value to compare the specified attribute of each file to.
  #[serde(rename = "value")]
  value: Option<String>,
  /// If true, the attribute must match the entire word.  Default is true.
  #[serde(rename = "whole_word")]
  whole_word: Option<bool>
}

impl SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
  pub fn new(_type: String) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
      attribute_exists: None,
      case_sensitive: None,
      field: None,
      operator: None,
      _type: _type,
      value: None,
      whole_word: None
    }
  }

  pub fn set_attribute_exists(&mut self, attribute_exists: bool) {
    self.attribute_exists = Some(attribute_exists);
  }

  pub fn with_attribute_exists(mut self, attribute_exists: bool) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.attribute_exists = Some(attribute_exists);
    self
  }

  pub fn attribute_exists(&self) -> Option<&bool> {
    self.attribute_exists.as_ref()
  }

  pub fn reset_attribute_exists(&mut self) {
    self.attribute_exists = None;
  }

  pub fn set_case_sensitive(&mut self, case_sensitive: bool) {
    self.case_sensitive = Some(case_sensitive);
  }

  pub fn with_case_sensitive(mut self, case_sensitive: bool) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.case_sensitive = Some(case_sensitive);
    self
  }

  pub fn case_sensitive(&self) -> Option<&bool> {
    self.case_sensitive.as_ref()
  }

  pub fn reset_case_sensitive(&mut self) {
    self.case_sensitive = None;
  }

  pub fn set_field(&mut self, field: String) {
    self.field = Some(field);
  }

  pub fn with_field(mut self, field: String) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.field = Some(field);
    self
  }

  pub fn field(&self) -> Option<&String> {
    self.field.as_ref()
  }

  pub fn reset_field(&mut self) {
    self.field = None;
  }

  pub fn set_operator(&mut self, operator: String) {
    self.operator = Some(operator);
  }

  pub fn with_operator(mut self, operator: String) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.operator = Some(operator);
    self
  }

  pub fn operator(&self) -> Option<&String> {
    self.operator.as_ref()
  }

  pub fn reset_operator(&mut self) {
    self.operator = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

  pub fn set_whole_word(&mut self, whole_word: bool) {
    self.whole_word = Some(whole_word);
  }

  pub fn with_whole_word(mut self, whole_word: bool) -> SyncJobPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
    self.whole_word = Some(whole_word);
    self
  }

  pub fn whole_word(&self) -> Option<&bool> {
    self.whole_word.as_ref()
  }

  pub fn reset_whole_word(&mut self) {
    self.whole_word = None;
  }

}



