/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LicenseGenerate {
  /// Array of licenses included in activation file.
  #[serde(rename = "activated_license_list")]
  activated_license_list: Option<Vec<String>>,
  /// Contents of licensing activation file.
  #[serde(rename = "activation")]
  activation: Option<String>,
  /// Array of licenses included in activation file.
  #[serde(rename = "hardware")]
  hardware: Option<Vec<::models::LicenseGenerateHardwareItem>>,
  /// An array of licenses not included in activation file.
  #[serde(rename = "not_activated_license_list")]
  not_activated_license_list: Option<Vec<String>>
}

impl LicenseGenerate {
  pub fn new() -> LicenseGenerate {
    LicenseGenerate {
      activated_license_list: None,
      activation: None,
      hardware: None,
      not_activated_license_list: None
    }
  }

  pub fn set_activated_license_list(&mut self, activated_license_list: Vec<String>) {
    self.activated_license_list = Some(activated_license_list);
  }

  pub fn with_activated_license_list(mut self, activated_license_list: Vec<String>) -> LicenseGenerate {
    self.activated_license_list = Some(activated_license_list);
    self
  }

  pub fn activated_license_list(&self) -> Option<&Vec<String>> {
    self.activated_license_list.as_ref()
  }

  pub fn reset_activated_license_list(&mut self) {
    self.activated_license_list = None;
  }

  pub fn set_activation(&mut self, activation: String) {
    self.activation = Some(activation);
  }

  pub fn with_activation(mut self, activation: String) -> LicenseGenerate {
    self.activation = Some(activation);
    self
  }

  pub fn activation(&self) -> Option<&String> {
    self.activation.as_ref()
  }

  pub fn reset_activation(&mut self) {
    self.activation = None;
  }

  pub fn set_hardware(&mut self, hardware: Vec<::models::LicenseGenerateHardwareItem>) {
    self.hardware = Some(hardware);
  }

  pub fn with_hardware(mut self, hardware: Vec<::models::LicenseGenerateHardwareItem>) -> LicenseGenerate {
    self.hardware = Some(hardware);
    self
  }

  pub fn hardware(&self) -> Option<&Vec<::models::LicenseGenerateHardwareItem>> {
    self.hardware.as_ref()
  }

  pub fn reset_hardware(&mut self) {
    self.hardware = None;
  }

  pub fn set_not_activated_license_list(&mut self, not_activated_license_list: Vec<String>) {
    self.not_activated_license_list = Some(not_activated_license_list);
  }

  pub fn with_not_activated_license_list(mut self, not_activated_license_list: Vec<String>) -> LicenseGenerate {
    self.not_activated_license_list = Some(not_activated_license_list);
    self
  }

  pub fn not_activated_license_list(&self) -> Option<&Vec<String>> {
    self.not_activated_license_list.as_ref()
  }

  pub fn reset_not_activated_license_list(&mut self) {
    self.not_activated_license_list = None;
  }

}



