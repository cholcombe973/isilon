/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobTypeExtended {
  /// Whether the job type is enabled and able to run.
  #[serde(rename = "enabled")]
  enabled: bool,
  /// Default impact policy of this job type.
  #[serde(rename = "policy")]
  policy: String,
  /// Default priority of this job type; lower numbers preempt higher numbers.
  #[serde(rename = "priority")]
  priority: i32,
  /// The schedule on which this job type is queued, if any.
  #[serde(rename = "schedule")]
  schedule: Option<String>,
  /// Whether multiple instances of this job type may run simultaneously.
  #[serde(rename = "allow_multiple_instances")]
  allow_multiple_instances: bool,
  /// Brief description of the job type.
  #[serde(rename = "description")]
  description: String,
  /// The set(s) of mutually-exclusive job types to which this job belongs.  No job in this set may run with any other job in this set.  Obsolete; this value will always be an empty string, as exclusion sets are no longer a job type property.
  #[serde(rename = "exclusion_set")]
  exclusion_set: String,
  /// Whether this job type is normally visible in the UI.
  #[serde(rename = "hidden")]
  hidden: bool,
  /// Job type ID.
  #[serde(rename = "id")]
  id: String
}

impl JobTypeExtended {
  pub fn new(enabled: bool, policy: String, priority: i32, allow_multiple_instances: bool, description: String, exclusion_set: String, hidden: bool, id: String) -> JobTypeExtended {
    JobTypeExtended {
      enabled: enabled,
      policy: policy,
      priority: priority,
      schedule: None,
      allow_multiple_instances: allow_multiple_instances,
      description: description,
      exclusion_set: exclusion_set,
      hidden: hidden,
      id: id
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = enabled;
  }

  pub fn with_enabled(mut self, enabled: bool) -> JobTypeExtended {
    self.enabled = enabled;
    self
  }

  pub fn enabled(&self) -> &bool {
    &self.enabled
  }


  pub fn set_policy(&mut self, policy: String) {
    self.policy = policy;
  }

  pub fn with_policy(mut self, policy: String) -> JobTypeExtended {
    self.policy = policy;
    self
  }

  pub fn policy(&self) -> &String {
    &self.policy
  }


  pub fn set_priority(&mut self, priority: i32) {
    self.priority = priority;
  }

  pub fn with_priority(mut self, priority: i32) -> JobTypeExtended {
    self.priority = priority;
    self
  }

  pub fn priority(&self) -> &i32 {
    &self.priority
  }


  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = Some(schedule);
  }

  pub fn with_schedule(mut self, schedule: String) -> JobTypeExtended {
    self.schedule = Some(schedule);
    self
  }

  pub fn schedule(&self) -> Option<&String> {
    self.schedule.as_ref()
  }

  pub fn reset_schedule(&mut self) {
    self.schedule = None;
  }

  pub fn set_allow_multiple_instances(&mut self, allow_multiple_instances: bool) {
    self.allow_multiple_instances = allow_multiple_instances;
  }

  pub fn with_allow_multiple_instances(mut self, allow_multiple_instances: bool) -> JobTypeExtended {
    self.allow_multiple_instances = allow_multiple_instances;
    self
  }

  pub fn allow_multiple_instances(&self) -> &bool {
    &self.allow_multiple_instances
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> JobTypeExtended {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_exclusion_set(&mut self, exclusion_set: String) {
    self.exclusion_set = exclusion_set;
  }

  pub fn with_exclusion_set(mut self, exclusion_set: String) -> JobTypeExtended {
    self.exclusion_set = exclusion_set;
    self
  }

  pub fn exclusion_set(&self) -> &String {
    &self.exclusion_set
  }


  pub fn set_hidden(&mut self, hidden: bool) {
    self.hidden = hidden;
  }

  pub fn with_hidden(mut self, hidden: bool) -> JobTypeExtended {
    self.hidden = hidden;
    self
  }

  pub fn hidden(&self) -> &bool {
    &self.hidden
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> JobTypeExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


}



