/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DiagnosticsNetloggerSettings {
  /// IP Addresses or host names of clients
  #[serde(rename = "clients")]
  clients: Option<String>,
  /// Count of capture files to keep, 0 is infinite.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// Duration in minutes of each capture file
  #[serde(rename = "duration")]
  duration: Option<i32>,
  /// Network interfaces to capture on.
  #[serde(rename = "interfaces")]
  interfaces: Option<String>,
  /// List of nodes, or empty for all
  #[serde(rename = "nodelist")]
  nodelist: Option<String>,
  /// List of Integers of TCP or UDP ports
  #[serde(rename = "ports")]
  ports: Option<String>,
  /// which protocol(s) to gather on
  #[serde(rename = "protocols")]
  protocols: Option<String>,
  /// Amount of bytes per packet to capture
  #[serde(rename = "snaplength")]
  snaplength: Option<i32>
}

impl DiagnosticsNetloggerSettings {
  pub fn new() -> DiagnosticsNetloggerSettings {
    DiagnosticsNetloggerSettings {
      clients: None,
      count: None,
      duration: None,
      interfaces: None,
      nodelist: None,
      ports: None,
      protocols: None,
      snaplength: None
    }
  }

  pub fn set_clients(&mut self, clients: String) {
    self.clients = Some(clients);
  }

  pub fn with_clients(mut self, clients: String) -> DiagnosticsNetloggerSettings {
    self.clients = Some(clients);
    self
  }

  pub fn clients(&self) -> Option<&String> {
    self.clients.as_ref()
  }

  pub fn reset_clients(&mut self) {
    self.clients = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> DiagnosticsNetloggerSettings {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_duration(&mut self, duration: i32) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i32) -> DiagnosticsNetloggerSettings {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i32> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_interfaces(&mut self, interfaces: String) {
    self.interfaces = Some(interfaces);
  }

  pub fn with_interfaces(mut self, interfaces: String) -> DiagnosticsNetloggerSettings {
    self.interfaces = Some(interfaces);
    self
  }

  pub fn interfaces(&self) -> Option<&String> {
    self.interfaces.as_ref()
  }

  pub fn reset_interfaces(&mut self) {
    self.interfaces = None;
  }

  pub fn set_nodelist(&mut self, nodelist: String) {
    self.nodelist = Some(nodelist);
  }

  pub fn with_nodelist(mut self, nodelist: String) -> DiagnosticsNetloggerSettings {
    self.nodelist = Some(nodelist);
    self
  }

  pub fn nodelist(&self) -> Option<&String> {
    self.nodelist.as_ref()
  }

  pub fn reset_nodelist(&mut self) {
    self.nodelist = None;
  }

  pub fn set_ports(&mut self, ports: String) {
    self.ports = Some(ports);
  }

  pub fn with_ports(mut self, ports: String) -> DiagnosticsNetloggerSettings {
    self.ports = Some(ports);
    self
  }

  pub fn ports(&self) -> Option<&String> {
    self.ports.as_ref()
  }

  pub fn reset_ports(&mut self) {
    self.ports = None;
  }

  pub fn set_protocols(&mut self, protocols: String) {
    self.protocols = Some(protocols);
  }

  pub fn with_protocols(mut self, protocols: String) -> DiagnosticsNetloggerSettings {
    self.protocols = Some(protocols);
    self
  }

  pub fn protocols(&self) -> Option<&String> {
    self.protocols.as_ref()
  }

  pub fn reset_protocols(&mut self) {
    self.protocols = None;
  }

  pub fn set_snaplength(&mut self, snaplength: i32) {
    self.snaplength = Some(snaplength);
  }

  pub fn with_snaplength(mut self, snaplength: i32) -> DiagnosticsNetloggerSettings {
    self.snaplength = Some(snaplength);
    self
  }

  pub fn snaplength(&self) -> Option<&i32> {
    self.snaplength.as_ref()
  }

  pub fn reset_snaplength(&mut self) {
    self.snaplength = None;
  }

}



