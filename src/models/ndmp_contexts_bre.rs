/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NdmpContextsBre : View a NDMP restartable backup Context

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpContextsBre {
  /// Backup type
  #[serde(rename = "backup type")]
  backup_type: Option<String>,
  /// Backup Context ID
  #[serde(rename = "bkp_context_id")]
  bkp_context_id: Option<String>,
  /// Unique ID of NDMP BRE context
  #[serde(rename = "bre_context_id")]
  bre_context_id: Option<String>,
  /// Context creation time
  #[serde(rename = "create_time")]
  create_time: Option<i32>,
  /// List of environment variables for restartable backup
  #[serde(rename = "env_variables")]
  env_variables: Option<Vec<::models::NdmpContextsBreEnvVariable>>,
  /// Unique display id.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Backup result
  #[serde(rename = "results")]
  results: Option<i32>,
  /// Snapshot name of backup
  #[serde(rename = "snap_name")]
  snap_name: Option<String>,
  /// Context status bits
  #[serde(rename = "status")]
  status: Option<i32>,
  /// Backup Stream ID
  #[serde(rename = "stream_id")]
  stream_id: Option<i32>
}

impl NdmpContextsBre {
  /// View a NDMP restartable backup Context
  pub fn new() -> NdmpContextsBre {
    NdmpContextsBre {
      backup_type: None,
      bkp_context_id: None,
      bre_context_id: None,
      create_time: None,
      env_variables: None,
      id: None,
      results: None,
      snap_name: None,
      status: None,
      stream_id: None
    }
  }

  pub fn set_backup_type(&mut self, backup_type: String) {
    self.backup_type = Some(backup_type);
  }

  pub fn with_backup_type(mut self, backup_type: String) -> NdmpContextsBre {
    self.backup_type = Some(backup_type);
    self
  }

  pub fn backup_type(&self) -> Option<&String> {
    self.backup_type.as_ref()
  }

  pub fn reset_backup_type(&mut self) {
    self.backup_type = None;
  }

  pub fn set_bkp_context_id(&mut self, bkp_context_id: String) {
    self.bkp_context_id = Some(bkp_context_id);
  }

  pub fn with_bkp_context_id(mut self, bkp_context_id: String) -> NdmpContextsBre {
    self.bkp_context_id = Some(bkp_context_id);
    self
  }

  pub fn bkp_context_id(&self) -> Option<&String> {
    self.bkp_context_id.as_ref()
  }

  pub fn reset_bkp_context_id(&mut self) {
    self.bkp_context_id = None;
  }

  pub fn set_bre_context_id(&mut self, bre_context_id: String) {
    self.bre_context_id = Some(bre_context_id);
  }

  pub fn with_bre_context_id(mut self, bre_context_id: String) -> NdmpContextsBre {
    self.bre_context_id = Some(bre_context_id);
    self
  }

  pub fn bre_context_id(&self) -> Option<&String> {
    self.bre_context_id.as_ref()
  }

  pub fn reset_bre_context_id(&mut self) {
    self.bre_context_id = None;
  }

  pub fn set_create_time(&mut self, create_time: i32) {
    self.create_time = Some(create_time);
  }

  pub fn with_create_time(mut self, create_time: i32) -> NdmpContextsBre {
    self.create_time = Some(create_time);
    self
  }

  pub fn create_time(&self) -> Option<&i32> {
    self.create_time.as_ref()
  }

  pub fn reset_create_time(&mut self) {
    self.create_time = None;
  }

  pub fn set_env_variables(&mut self, env_variables: Vec<::models::NdmpContextsBreEnvVariable>) {
    self.env_variables = Some(env_variables);
  }

  pub fn with_env_variables(mut self, env_variables: Vec<::models::NdmpContextsBreEnvVariable>) -> NdmpContextsBre {
    self.env_variables = Some(env_variables);
    self
  }

  pub fn env_variables(&self) -> Option<&Vec<::models::NdmpContextsBreEnvVariable>> {
    self.env_variables.as_ref()
  }

  pub fn reset_env_variables(&mut self) {
    self.env_variables = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NdmpContextsBre {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_results(&mut self, results: i32) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: i32) -> NdmpContextsBre {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&i32> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

  pub fn set_snap_name(&mut self, snap_name: String) {
    self.snap_name = Some(snap_name);
  }

  pub fn with_snap_name(mut self, snap_name: String) -> NdmpContextsBre {
    self.snap_name = Some(snap_name);
    self
  }

  pub fn snap_name(&self) -> Option<&String> {
    self.snap_name.as_ref()
  }

  pub fn reset_snap_name(&mut self) {
    self.snap_name = None;
  }

  pub fn set_status(&mut self, status: i32) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: i32) -> NdmpContextsBre {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&i32> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_stream_id(&mut self, stream_id: i32) {
    self.stream_id = Some(stream_id);
  }

  pub fn with_stream_id(mut self, stream_id: i32) -> NdmpContextsBre {
    self.stream_id = Some(stream_id);
    self
  }

  pub fn stream_id(&self) -> Option<&i32> {
    self.stream_id.as_ref()
  }

  pub fn reset_stream_id(&mut self) {
    self.stream_id = None;
  }

}



