/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SyncJobExtended {
  /// The action to be taken by this job.
  #[serde(rename = "action")]
  action: String,
  /// The number of ads streams replicated by this job.
  #[serde(rename = "ads_streams_replicated")]
  ads_streams_replicated: i32,
  /// The number of block specs replicated by this job.
  #[serde(rename = "block_specs_replicated")]
  block_specs_replicated: i32,
  /// The number of bytes recoverable by this job.
  #[serde(rename = "bytes_recoverable")]
  bytes_recoverable: i32,
  /// The number of bytes that have been transferred by this job.
  #[serde(rename = "bytes_transferred")]
  bytes_transferred: i32,
  /// The number of char specs replicated by this job.
  #[serde(rename = "char_specs_replicated")]
  char_specs_replicated: i32,
  /// The number of LINs corrected by this job.
  #[serde(rename = "corrected_lins")]
  corrected_lins: i32,
  /// This field is true if the node running this job is dead.
  #[serde(rename = "dead_node")]
  dead_node: bool,
  /// The number of directories replicated.
  #[serde(rename = "directories_replicated")]
  directories_replicated: i32,
  /// The number of directories changed by this job.
  #[serde(rename = "dirs_changed")]
  dirs_changed: i32,
  /// The number of directories deleted by this job.
  #[serde(rename = "dirs_deleted")]
  dirs_deleted: i32,
  /// The number of directories moved by this job.
  #[serde(rename = "dirs_moved")]
  dirs_moved: i32,
  /// The number of directories created by this job.
  #[serde(rename = "dirs_new")]
  dirs_new: i32,
  /// The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.
  #[serde(rename = "duration")]
  duration: Option<i32>,
  /// The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.
  #[serde(rename = "end_time")]
  end_time: Option<i32>,
  /// The primary error message for this job.
  #[serde(rename = "error")]
  error: String,
  /// The number of files with checksum errors skipped by this job.
  #[serde(rename = "error_checksum_files_skipped")]
  error_checksum_files_skipped: i32,
  /// The number of files with io errors skipped by this job.
  #[serde(rename = "error_io_files_skipped")]
  error_io_files_skipped: i32,
  /// The number of files with network errors skipped by this job.
  #[serde(rename = "error_net_files_skipped")]
  error_net_files_skipped: i32,
  /// A list of error messages for this job.
  #[serde(rename = "errors")]
  errors: Vec<String>,
  /// Tyhe number of data chunks that failed transmission.
  #[serde(rename = "failed_chunks")]
  failed_chunks: i32,
  /// The number of fifos replicated by this job.
  #[serde(rename = "fifos_replicated")]
  fifos_replicated: i32,
  /// The number of bytes transferred that belong to files.
  #[serde(rename = "file_data_bytes")]
  file_data_bytes: i32,
  /// The number of files changed by this job.
  #[serde(rename = "files_changed")]
  files_changed: i32,
  /// The number of files linked by this job.
  #[serde(rename = "files_linked")]
  files_linked: i32,
  /// The number of files created by this job.
  #[serde(rename = "files_new")]
  files_new: i32,
  /// The number of files selected by this job.
  #[serde(rename = "files_selected")]
  files_selected: i32,
  /// The number of files transferred by this job.
  #[serde(rename = "files_transferred")]
  files_transferred: i32,
  /// The number of files unlinked by this job.
  #[serde(rename = "files_unlinked")]
  files_unlinked: i32,
  /// The number of files with ads replicated by this job.
  #[serde(rename = "files_with_ads_replicated")]
  files_with_ads_replicated: i32,
  /// The number of LINs flipped by this job.
  #[serde(rename = "flipped_lins")]
  flipped_lins: i32,
  /// The number of hard links replicated by this job.
  #[serde(rename = "hard_links_replicated")]
  hard_links_replicated: i32,
  /// The number of hash exceptions fixed by this job.
  #[serde(rename = "hash_exceptions_fixed")]
  hash_exceptions_fixed: i32,
  /// The number of hash exceptions found by this job.
  #[serde(rename = "hash_exceptions_found")]
  hash_exceptions_found: i32,
  /// A unique identifier for this object.
  #[serde(rename = "id")]
  id: String,
  /// The ID of the job.
  #[serde(rename = "job_id")]
  job_id: Option<i32>,
  /// The number of LINs transferred by this job.
  #[serde(rename = "lins_total")]
  lins_total: i32,
  /// The total number of bytes sent to the source by this job.
  #[serde(rename = "network_bytes_to_source")]
  network_bytes_to_source: i32,
  /// The total number of bytes sent to the target by this job.
  #[serde(rename = "network_bytes_to_target")]
  network_bytes_to_target: i32,
  /// The number of new files replicated by this job.
  #[serde(rename = "new_files_replicated")]
  new_files_replicated: i32,
  /// The number of files that have been retransmitted by this job.
  #[serde(rename = "num_retransmitted_files")]
  num_retransmitted_files: i32,
  /// Data for each phase of this job.
  #[serde(rename = "phases")]
  phases: Vec<::models::SyncJobPhase>,
  /// The policy associated with this job, or null if there is currently no policy associated with this job (this can happen if the job is newly created and not yet fully populated in the underlying database).
  #[serde(rename = "policy")]
  policy: Option<::models::SyncJobPolicy>,
  /// This is the action the policy is configured to perform.
  #[serde(rename = "policy_action")]
  policy_action: String,
  /// The ID of the policy.
  #[serde(rename = "policy_id")]
  policy_id: String,
  /// The name of the policy.
  #[serde(rename = "policy_name")]
  policy_name: String,
  /// The number of regular files replicated by this job.
  #[serde(rename = "regular_files_replicated")]
  regular_files_replicated: i32,
  /// The number of LINs resynched by this job.
  #[serde(rename = "resynced_lins")]
  resynced_lins: i32,
  /// The files that have been retransmitted by this job.
  #[serde(rename = "retransmitted_files")]
  retransmitted_files: Vec<String>,
  /// The number of times the job has been retried.
  #[serde(rename = "retry")]
  retry: i32,
  /// The number of data chunks currently being transmitted.
  #[serde(rename = "running_chunks")]
  running_chunks: i32,
  /// The number of sockets replicated by this job.
  #[serde(rename = "sockets_replicated")]
  sockets_replicated: i32,
  /// The number of bytes recovered on the source.
  #[serde(rename = "source_bytes_recovered")]
  source_bytes_recovered: i32,
  /// The number of directories created on the source.
  #[serde(rename = "source_directories_created")]
  source_directories_created: i32,
  /// The number of directories deleted on the source.
  #[serde(rename = "source_directories_deleted")]
  source_directories_deleted: i32,
  /// The number of directories linked on the source.
  #[serde(rename = "source_directories_linked")]
  source_directories_linked: i32,
  /// The number of directories unlinked on the source.
  #[serde(rename = "source_directories_unlinked")]
  source_directories_unlinked: i32,
  /// The number of directories visited on the source.
  #[serde(rename = "source_directories_visited")]
  source_directories_visited: i32,
  /// The number of files deleted on the source.
  #[serde(rename = "source_files_deleted")]
  source_files_deleted: i32,
  /// The number of files linked on the source.
  #[serde(rename = "source_files_linked")]
  source_files_linked: i32,
  /// The number of files unlinked on the source.
  #[serde(rename = "source_files_unlinked")]
  source_files_unlinked: i32,
  /// The number of sparse data bytes transferred by this job.
  #[serde(rename = "sparse_data_bytes")]
  sparse_data_bytes: i32,
  /// The time the job started in unix epoch seconds. The field is null if the job hasn't started.
  #[serde(rename = "start_time")]
  start_time: Option<i32>,
  /// The state of the job.
  #[serde(rename = "state")]
  state: String,
  /// The number of data chunks that have been transmitted successfully.
  #[serde(rename = "succeeded_chunks")]
  succeeded_chunks: i32,
  /// The number of symlinks replicated by this job.
  #[serde(rename = "symlinks_replicated")]
  symlinks_replicated: i32,
  /// The type of sync being performed by this job.
  #[serde(rename = "sync_type")]
  sync_type: String,
  /// The number of bytes recovered on the target.
  #[serde(rename = "target_bytes_recovered")]
  target_bytes_recovered: i32,
  /// The number of directories created on the target.
  #[serde(rename = "target_directories_created")]
  target_directories_created: i32,
  /// The number of directories deleted on the target.
  #[serde(rename = "target_directories_deleted")]
  target_directories_deleted: i32,
  /// The number of directories linked on the target.
  #[serde(rename = "target_directories_linked")]
  target_directories_linked: i32,
  /// The number of directories unlinked on the target.
  #[serde(rename = "target_directories_unlinked")]
  target_directories_unlinked: i32,
  /// The number of files deleted on the target.
  #[serde(rename = "target_files_deleted")]
  target_files_deleted: i32,
  /// The number of files linked on the target.
  #[serde(rename = "target_files_linked")]
  target_files_linked: i32,
  /// The number of files unlinked on the target.
  #[serde(rename = "target_files_unlinked")]
  target_files_unlinked: i32,
  /// The target snapshots created by this job.
  #[serde(rename = "target_snapshots")]
  target_snapshots: Vec<String>,
  /// The total number of data chunks transmitted by this job.
  #[serde(rename = "total_chunks")]
  total_chunks: i32,
  /// The total number of bytes transferred by this job.
  #[serde(rename = "total_data_bytes")]
  total_data_bytes: i32,
  /// The number of files affected by this job.
  #[serde(rename = "total_files")]
  total_files: i32,
  /// The total number of bytes sent over the network by this job.
  #[serde(rename = "total_network_bytes")]
  total_network_bytes: i32,
  /// The total number of phases for this job.
  #[serde(rename = "total_phases")]
  total_phases: i32,
  /// The number of bytes unchanged by this job.
  #[serde(rename = "unchanged_data_bytes")]
  unchanged_data_bytes: i32,
  /// The number of up-to-date files skipped by this job.
  #[serde(rename = "up_to_date_files_skipped")]
  up_to_date_files_skipped: i32,
  /// The number of updated files replicated by this job.
  #[serde(rename = "updated_files_replicated")]
  updated_files_replicated: i32,
  /// The number of files with user conflicts skipped by this job.
  #[serde(rename = "user_conflict_files_skipped")]
  user_conflict_files_skipped: i32,
  /// A list of warning messages for this job.
  #[serde(rename = "warnings")]
  warnings: Vec<String>,
  /// A list of workers for this job.
  #[serde(rename = "workers")]
  workers: Vec<::models::SyncJobWorker>
}

impl SyncJobExtended {
  pub fn new(action: String, ads_streams_replicated: i32, block_specs_replicated: i32, bytes_recoverable: i32, bytes_transferred: i32, char_specs_replicated: i32, corrected_lins: i32, dead_node: bool, directories_replicated: i32, dirs_changed: i32, dirs_deleted: i32, dirs_moved: i32, dirs_new: i32, error: String, error_checksum_files_skipped: i32, error_io_files_skipped: i32, error_net_files_skipped: i32, errors: Vec<String>, failed_chunks: i32, fifos_replicated: i32, file_data_bytes: i32, files_changed: i32, files_linked: i32, files_new: i32, files_selected: i32, files_transferred: i32, files_unlinked: i32, files_with_ads_replicated: i32, flipped_lins: i32, hard_links_replicated: i32, hash_exceptions_fixed: i32, hash_exceptions_found: i32, id: String, lins_total: i32, network_bytes_to_source: i32, network_bytes_to_target: i32, new_files_replicated: i32, num_retransmitted_files: i32, phases: Vec<::models::SyncJobPhase>, policy_action: String, policy_id: String, policy_name: String, regular_files_replicated: i32, resynced_lins: i32, retransmitted_files: Vec<String>, retry: i32, running_chunks: i32, sockets_replicated: i32, source_bytes_recovered: i32, source_directories_created: i32, source_directories_deleted: i32, source_directories_linked: i32, source_directories_unlinked: i32, source_directories_visited: i32, source_files_deleted: i32, source_files_linked: i32, source_files_unlinked: i32, sparse_data_bytes: i32, state: String, succeeded_chunks: i32, symlinks_replicated: i32, sync_type: String, target_bytes_recovered: i32, target_directories_created: i32, target_directories_deleted: i32, target_directories_linked: i32, target_directories_unlinked: i32, target_files_deleted: i32, target_files_linked: i32, target_files_unlinked: i32, target_snapshots: Vec<String>, total_chunks: i32, total_data_bytes: i32, total_files: i32, total_network_bytes: i32, total_phases: i32, unchanged_data_bytes: i32, up_to_date_files_skipped: i32, updated_files_replicated: i32, user_conflict_files_skipped: i32, warnings: Vec<String>, workers: Vec<::models::SyncJobWorker>) -> SyncJobExtended {
    SyncJobExtended {
      action: action,
      ads_streams_replicated: ads_streams_replicated,
      block_specs_replicated: block_specs_replicated,
      bytes_recoverable: bytes_recoverable,
      bytes_transferred: bytes_transferred,
      char_specs_replicated: char_specs_replicated,
      corrected_lins: corrected_lins,
      dead_node: dead_node,
      directories_replicated: directories_replicated,
      dirs_changed: dirs_changed,
      dirs_deleted: dirs_deleted,
      dirs_moved: dirs_moved,
      dirs_new: dirs_new,
      duration: None,
      end_time: None,
      error: error,
      error_checksum_files_skipped: error_checksum_files_skipped,
      error_io_files_skipped: error_io_files_skipped,
      error_net_files_skipped: error_net_files_skipped,
      errors: errors,
      failed_chunks: failed_chunks,
      fifos_replicated: fifos_replicated,
      file_data_bytes: file_data_bytes,
      files_changed: files_changed,
      files_linked: files_linked,
      files_new: files_new,
      files_selected: files_selected,
      files_transferred: files_transferred,
      files_unlinked: files_unlinked,
      files_with_ads_replicated: files_with_ads_replicated,
      flipped_lins: flipped_lins,
      hard_links_replicated: hard_links_replicated,
      hash_exceptions_fixed: hash_exceptions_fixed,
      hash_exceptions_found: hash_exceptions_found,
      id: id,
      job_id: None,
      lins_total: lins_total,
      network_bytes_to_source: network_bytes_to_source,
      network_bytes_to_target: network_bytes_to_target,
      new_files_replicated: new_files_replicated,
      num_retransmitted_files: num_retransmitted_files,
      phases: phases,
      policy: None,
      policy_action: policy_action,
      policy_id: policy_id,
      policy_name: policy_name,
      regular_files_replicated: regular_files_replicated,
      resynced_lins: resynced_lins,
      retransmitted_files: retransmitted_files,
      retry: retry,
      running_chunks: running_chunks,
      sockets_replicated: sockets_replicated,
      source_bytes_recovered: source_bytes_recovered,
      source_directories_created: source_directories_created,
      source_directories_deleted: source_directories_deleted,
      source_directories_linked: source_directories_linked,
      source_directories_unlinked: source_directories_unlinked,
      source_directories_visited: source_directories_visited,
      source_files_deleted: source_files_deleted,
      source_files_linked: source_files_linked,
      source_files_unlinked: source_files_unlinked,
      sparse_data_bytes: sparse_data_bytes,
      start_time: None,
      state: state,
      succeeded_chunks: succeeded_chunks,
      symlinks_replicated: symlinks_replicated,
      sync_type: sync_type,
      target_bytes_recovered: target_bytes_recovered,
      target_directories_created: target_directories_created,
      target_directories_deleted: target_directories_deleted,
      target_directories_linked: target_directories_linked,
      target_directories_unlinked: target_directories_unlinked,
      target_files_deleted: target_files_deleted,
      target_files_linked: target_files_linked,
      target_files_unlinked: target_files_unlinked,
      target_snapshots: target_snapshots,
      total_chunks: total_chunks,
      total_data_bytes: total_data_bytes,
      total_files: total_files,
      total_network_bytes: total_network_bytes,
      total_phases: total_phases,
      unchanged_data_bytes: unchanged_data_bytes,
      up_to_date_files_skipped: up_to_date_files_skipped,
      updated_files_replicated: updated_files_replicated,
      user_conflict_files_skipped: user_conflict_files_skipped,
      warnings: warnings,
      workers: workers
    }
  }

  pub fn set_action(&mut self, action: String) {
    self.action = action;
  }

  pub fn with_action(mut self, action: String) -> SyncJobExtended {
    self.action = action;
    self
  }

  pub fn action(&self) -> &String {
    &self.action
  }


  pub fn set_ads_streams_replicated(&mut self, ads_streams_replicated: i32) {
    self.ads_streams_replicated = ads_streams_replicated;
  }

  pub fn with_ads_streams_replicated(mut self, ads_streams_replicated: i32) -> SyncJobExtended {
    self.ads_streams_replicated = ads_streams_replicated;
    self
  }

  pub fn ads_streams_replicated(&self) -> &i32 {
    &self.ads_streams_replicated
  }


  pub fn set_block_specs_replicated(&mut self, block_specs_replicated: i32) {
    self.block_specs_replicated = block_specs_replicated;
  }

  pub fn with_block_specs_replicated(mut self, block_specs_replicated: i32) -> SyncJobExtended {
    self.block_specs_replicated = block_specs_replicated;
    self
  }

  pub fn block_specs_replicated(&self) -> &i32 {
    &self.block_specs_replicated
  }


  pub fn set_bytes_recoverable(&mut self, bytes_recoverable: i32) {
    self.bytes_recoverable = bytes_recoverable;
  }

  pub fn with_bytes_recoverable(mut self, bytes_recoverable: i32) -> SyncJobExtended {
    self.bytes_recoverable = bytes_recoverable;
    self
  }

  pub fn bytes_recoverable(&self) -> &i32 {
    &self.bytes_recoverable
  }


  pub fn set_bytes_transferred(&mut self, bytes_transferred: i32) {
    self.bytes_transferred = bytes_transferred;
  }

  pub fn with_bytes_transferred(mut self, bytes_transferred: i32) -> SyncJobExtended {
    self.bytes_transferred = bytes_transferred;
    self
  }

  pub fn bytes_transferred(&self) -> &i32 {
    &self.bytes_transferred
  }


  pub fn set_char_specs_replicated(&mut self, char_specs_replicated: i32) {
    self.char_specs_replicated = char_specs_replicated;
  }

  pub fn with_char_specs_replicated(mut self, char_specs_replicated: i32) -> SyncJobExtended {
    self.char_specs_replicated = char_specs_replicated;
    self
  }

  pub fn char_specs_replicated(&self) -> &i32 {
    &self.char_specs_replicated
  }


  pub fn set_corrected_lins(&mut self, corrected_lins: i32) {
    self.corrected_lins = corrected_lins;
  }

  pub fn with_corrected_lins(mut self, corrected_lins: i32) -> SyncJobExtended {
    self.corrected_lins = corrected_lins;
    self
  }

  pub fn corrected_lins(&self) -> &i32 {
    &self.corrected_lins
  }


  pub fn set_dead_node(&mut self, dead_node: bool) {
    self.dead_node = dead_node;
  }

  pub fn with_dead_node(mut self, dead_node: bool) -> SyncJobExtended {
    self.dead_node = dead_node;
    self
  }

  pub fn dead_node(&self) -> &bool {
    &self.dead_node
  }


  pub fn set_directories_replicated(&mut self, directories_replicated: i32) {
    self.directories_replicated = directories_replicated;
  }

  pub fn with_directories_replicated(mut self, directories_replicated: i32) -> SyncJobExtended {
    self.directories_replicated = directories_replicated;
    self
  }

  pub fn directories_replicated(&self) -> &i32 {
    &self.directories_replicated
  }


  pub fn set_dirs_changed(&mut self, dirs_changed: i32) {
    self.dirs_changed = dirs_changed;
  }

  pub fn with_dirs_changed(mut self, dirs_changed: i32) -> SyncJobExtended {
    self.dirs_changed = dirs_changed;
    self
  }

  pub fn dirs_changed(&self) -> &i32 {
    &self.dirs_changed
  }


  pub fn set_dirs_deleted(&mut self, dirs_deleted: i32) {
    self.dirs_deleted = dirs_deleted;
  }

  pub fn with_dirs_deleted(mut self, dirs_deleted: i32) -> SyncJobExtended {
    self.dirs_deleted = dirs_deleted;
    self
  }

  pub fn dirs_deleted(&self) -> &i32 {
    &self.dirs_deleted
  }


  pub fn set_dirs_moved(&mut self, dirs_moved: i32) {
    self.dirs_moved = dirs_moved;
  }

  pub fn with_dirs_moved(mut self, dirs_moved: i32) -> SyncJobExtended {
    self.dirs_moved = dirs_moved;
    self
  }

  pub fn dirs_moved(&self) -> &i32 {
    &self.dirs_moved
  }


  pub fn set_dirs_new(&mut self, dirs_new: i32) {
    self.dirs_new = dirs_new;
  }

  pub fn with_dirs_new(mut self, dirs_new: i32) -> SyncJobExtended {
    self.dirs_new = dirs_new;
    self
  }

  pub fn dirs_new(&self) -> &i32 {
    &self.dirs_new
  }


  pub fn set_duration(&mut self, duration: i32) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i32) -> SyncJobExtended {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i32> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_end_time(&mut self, end_time: i32) {
    self.end_time = Some(end_time);
  }

  pub fn with_end_time(mut self, end_time: i32) -> SyncJobExtended {
    self.end_time = Some(end_time);
    self
  }

  pub fn end_time(&self) -> Option<&i32> {
    self.end_time.as_ref()
  }

  pub fn reset_end_time(&mut self) {
    self.end_time = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = error;
  }

  pub fn with_error(mut self, error: String) -> SyncJobExtended {
    self.error = error;
    self
  }

  pub fn error(&self) -> &String {
    &self.error
  }


  pub fn set_error_checksum_files_skipped(&mut self, error_checksum_files_skipped: i32) {
    self.error_checksum_files_skipped = error_checksum_files_skipped;
  }

  pub fn with_error_checksum_files_skipped(mut self, error_checksum_files_skipped: i32) -> SyncJobExtended {
    self.error_checksum_files_skipped = error_checksum_files_skipped;
    self
  }

  pub fn error_checksum_files_skipped(&self) -> &i32 {
    &self.error_checksum_files_skipped
  }


  pub fn set_error_io_files_skipped(&mut self, error_io_files_skipped: i32) {
    self.error_io_files_skipped = error_io_files_skipped;
  }

  pub fn with_error_io_files_skipped(mut self, error_io_files_skipped: i32) -> SyncJobExtended {
    self.error_io_files_skipped = error_io_files_skipped;
    self
  }

  pub fn error_io_files_skipped(&self) -> &i32 {
    &self.error_io_files_skipped
  }


  pub fn set_error_net_files_skipped(&mut self, error_net_files_skipped: i32) {
    self.error_net_files_skipped = error_net_files_skipped;
  }

  pub fn with_error_net_files_skipped(mut self, error_net_files_skipped: i32) -> SyncJobExtended {
    self.error_net_files_skipped = error_net_files_skipped;
    self
  }

  pub fn error_net_files_skipped(&self) -> &i32 {
    &self.error_net_files_skipped
  }


  pub fn set_errors(&mut self, errors: Vec<String>) {
    self.errors = errors;
  }

  pub fn with_errors(mut self, errors: Vec<String>) -> SyncJobExtended {
    self.errors = errors;
    self
  }

  pub fn errors(&self) -> &Vec<String> {
    &self.errors
  }


  pub fn set_failed_chunks(&mut self, failed_chunks: i32) {
    self.failed_chunks = failed_chunks;
  }

  pub fn with_failed_chunks(mut self, failed_chunks: i32) -> SyncJobExtended {
    self.failed_chunks = failed_chunks;
    self
  }

  pub fn failed_chunks(&self) -> &i32 {
    &self.failed_chunks
  }


  pub fn set_fifos_replicated(&mut self, fifos_replicated: i32) {
    self.fifos_replicated = fifos_replicated;
  }

  pub fn with_fifos_replicated(mut self, fifos_replicated: i32) -> SyncJobExtended {
    self.fifos_replicated = fifos_replicated;
    self
  }

  pub fn fifos_replicated(&self) -> &i32 {
    &self.fifos_replicated
  }


  pub fn set_file_data_bytes(&mut self, file_data_bytes: i32) {
    self.file_data_bytes = file_data_bytes;
  }

  pub fn with_file_data_bytes(mut self, file_data_bytes: i32) -> SyncJobExtended {
    self.file_data_bytes = file_data_bytes;
    self
  }

  pub fn file_data_bytes(&self) -> &i32 {
    &self.file_data_bytes
  }


  pub fn set_files_changed(&mut self, files_changed: i32) {
    self.files_changed = files_changed;
  }

  pub fn with_files_changed(mut self, files_changed: i32) -> SyncJobExtended {
    self.files_changed = files_changed;
    self
  }

  pub fn files_changed(&self) -> &i32 {
    &self.files_changed
  }


  pub fn set_files_linked(&mut self, files_linked: i32) {
    self.files_linked = files_linked;
  }

  pub fn with_files_linked(mut self, files_linked: i32) -> SyncJobExtended {
    self.files_linked = files_linked;
    self
  }

  pub fn files_linked(&self) -> &i32 {
    &self.files_linked
  }


  pub fn set_files_new(&mut self, files_new: i32) {
    self.files_new = files_new;
  }

  pub fn with_files_new(mut self, files_new: i32) -> SyncJobExtended {
    self.files_new = files_new;
    self
  }

  pub fn files_new(&self) -> &i32 {
    &self.files_new
  }


  pub fn set_files_selected(&mut self, files_selected: i32) {
    self.files_selected = files_selected;
  }

  pub fn with_files_selected(mut self, files_selected: i32) -> SyncJobExtended {
    self.files_selected = files_selected;
    self
  }

  pub fn files_selected(&self) -> &i32 {
    &self.files_selected
  }


  pub fn set_files_transferred(&mut self, files_transferred: i32) {
    self.files_transferred = files_transferred;
  }

  pub fn with_files_transferred(mut self, files_transferred: i32) -> SyncJobExtended {
    self.files_transferred = files_transferred;
    self
  }

  pub fn files_transferred(&self) -> &i32 {
    &self.files_transferred
  }


  pub fn set_files_unlinked(&mut self, files_unlinked: i32) {
    self.files_unlinked = files_unlinked;
  }

  pub fn with_files_unlinked(mut self, files_unlinked: i32) -> SyncJobExtended {
    self.files_unlinked = files_unlinked;
    self
  }

  pub fn files_unlinked(&self) -> &i32 {
    &self.files_unlinked
  }


  pub fn set_files_with_ads_replicated(&mut self, files_with_ads_replicated: i32) {
    self.files_with_ads_replicated = files_with_ads_replicated;
  }

  pub fn with_files_with_ads_replicated(mut self, files_with_ads_replicated: i32) -> SyncJobExtended {
    self.files_with_ads_replicated = files_with_ads_replicated;
    self
  }

  pub fn files_with_ads_replicated(&self) -> &i32 {
    &self.files_with_ads_replicated
  }


  pub fn set_flipped_lins(&mut self, flipped_lins: i32) {
    self.flipped_lins = flipped_lins;
  }

  pub fn with_flipped_lins(mut self, flipped_lins: i32) -> SyncJobExtended {
    self.flipped_lins = flipped_lins;
    self
  }

  pub fn flipped_lins(&self) -> &i32 {
    &self.flipped_lins
  }


  pub fn set_hard_links_replicated(&mut self, hard_links_replicated: i32) {
    self.hard_links_replicated = hard_links_replicated;
  }

  pub fn with_hard_links_replicated(mut self, hard_links_replicated: i32) -> SyncJobExtended {
    self.hard_links_replicated = hard_links_replicated;
    self
  }

  pub fn hard_links_replicated(&self) -> &i32 {
    &self.hard_links_replicated
  }


  pub fn set_hash_exceptions_fixed(&mut self, hash_exceptions_fixed: i32) {
    self.hash_exceptions_fixed = hash_exceptions_fixed;
  }

  pub fn with_hash_exceptions_fixed(mut self, hash_exceptions_fixed: i32) -> SyncJobExtended {
    self.hash_exceptions_fixed = hash_exceptions_fixed;
    self
  }

  pub fn hash_exceptions_fixed(&self) -> &i32 {
    &self.hash_exceptions_fixed
  }


  pub fn set_hash_exceptions_found(&mut self, hash_exceptions_found: i32) {
    self.hash_exceptions_found = hash_exceptions_found;
  }

  pub fn with_hash_exceptions_found(mut self, hash_exceptions_found: i32) -> SyncJobExtended {
    self.hash_exceptions_found = hash_exceptions_found;
    self
  }

  pub fn hash_exceptions_found(&self) -> &i32 {
    &self.hash_exceptions_found
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> SyncJobExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_job_id(&mut self, job_id: i32) {
    self.job_id = Some(job_id);
  }

  pub fn with_job_id(mut self, job_id: i32) -> SyncJobExtended {
    self.job_id = Some(job_id);
    self
  }

  pub fn job_id(&self) -> Option<&i32> {
    self.job_id.as_ref()
  }

  pub fn reset_job_id(&mut self) {
    self.job_id = None;
  }

  pub fn set_lins_total(&mut self, lins_total: i32) {
    self.lins_total = lins_total;
  }

  pub fn with_lins_total(mut self, lins_total: i32) -> SyncJobExtended {
    self.lins_total = lins_total;
    self
  }

  pub fn lins_total(&self) -> &i32 {
    &self.lins_total
  }


  pub fn set_network_bytes_to_source(&mut self, network_bytes_to_source: i32) {
    self.network_bytes_to_source = network_bytes_to_source;
  }

  pub fn with_network_bytes_to_source(mut self, network_bytes_to_source: i32) -> SyncJobExtended {
    self.network_bytes_to_source = network_bytes_to_source;
    self
  }

  pub fn network_bytes_to_source(&self) -> &i32 {
    &self.network_bytes_to_source
  }


  pub fn set_network_bytes_to_target(&mut self, network_bytes_to_target: i32) {
    self.network_bytes_to_target = network_bytes_to_target;
  }

  pub fn with_network_bytes_to_target(mut self, network_bytes_to_target: i32) -> SyncJobExtended {
    self.network_bytes_to_target = network_bytes_to_target;
    self
  }

  pub fn network_bytes_to_target(&self) -> &i32 {
    &self.network_bytes_to_target
  }


  pub fn set_new_files_replicated(&mut self, new_files_replicated: i32) {
    self.new_files_replicated = new_files_replicated;
  }

  pub fn with_new_files_replicated(mut self, new_files_replicated: i32) -> SyncJobExtended {
    self.new_files_replicated = new_files_replicated;
    self
  }

  pub fn new_files_replicated(&self) -> &i32 {
    &self.new_files_replicated
  }


  pub fn set_num_retransmitted_files(&mut self, num_retransmitted_files: i32) {
    self.num_retransmitted_files = num_retransmitted_files;
  }

  pub fn with_num_retransmitted_files(mut self, num_retransmitted_files: i32) -> SyncJobExtended {
    self.num_retransmitted_files = num_retransmitted_files;
    self
  }

  pub fn num_retransmitted_files(&self) -> &i32 {
    &self.num_retransmitted_files
  }


  pub fn set_phases(&mut self, phases: Vec<::models::SyncJobPhase>) {
    self.phases = phases;
  }

  pub fn with_phases(mut self, phases: Vec<::models::SyncJobPhase>) -> SyncJobExtended {
    self.phases = phases;
    self
  }

  pub fn phases(&self) -> &Vec<::models::SyncJobPhase> {
    &self.phases
  }


  pub fn set_policy(&mut self, policy: ::models::SyncJobPolicy) {
    self.policy = Some(policy);
  }

  pub fn with_policy(mut self, policy: ::models::SyncJobPolicy) -> SyncJobExtended {
    self.policy = Some(policy);
    self
  }

  pub fn policy(&self) -> Option<&::models::SyncJobPolicy> {
    self.policy.as_ref()
  }

  pub fn reset_policy(&mut self) {
    self.policy = None;
  }

  pub fn set_policy_action(&mut self, policy_action: String) {
    self.policy_action = policy_action;
  }

  pub fn with_policy_action(mut self, policy_action: String) -> SyncJobExtended {
    self.policy_action = policy_action;
    self
  }

  pub fn policy_action(&self) -> &String {
    &self.policy_action
  }


  pub fn set_policy_id(&mut self, policy_id: String) {
    self.policy_id = policy_id;
  }

  pub fn with_policy_id(mut self, policy_id: String) -> SyncJobExtended {
    self.policy_id = policy_id;
    self
  }

  pub fn policy_id(&self) -> &String {
    &self.policy_id
  }


  pub fn set_policy_name(&mut self, policy_name: String) {
    self.policy_name = policy_name;
  }

  pub fn with_policy_name(mut self, policy_name: String) -> SyncJobExtended {
    self.policy_name = policy_name;
    self
  }

  pub fn policy_name(&self) -> &String {
    &self.policy_name
  }


  pub fn set_regular_files_replicated(&mut self, regular_files_replicated: i32) {
    self.regular_files_replicated = regular_files_replicated;
  }

  pub fn with_regular_files_replicated(mut self, regular_files_replicated: i32) -> SyncJobExtended {
    self.regular_files_replicated = regular_files_replicated;
    self
  }

  pub fn regular_files_replicated(&self) -> &i32 {
    &self.regular_files_replicated
  }


  pub fn set_resynced_lins(&mut self, resynced_lins: i32) {
    self.resynced_lins = resynced_lins;
  }

  pub fn with_resynced_lins(mut self, resynced_lins: i32) -> SyncJobExtended {
    self.resynced_lins = resynced_lins;
    self
  }

  pub fn resynced_lins(&self) -> &i32 {
    &self.resynced_lins
  }


  pub fn set_retransmitted_files(&mut self, retransmitted_files: Vec<String>) {
    self.retransmitted_files = retransmitted_files;
  }

  pub fn with_retransmitted_files(mut self, retransmitted_files: Vec<String>) -> SyncJobExtended {
    self.retransmitted_files = retransmitted_files;
    self
  }

  pub fn retransmitted_files(&self) -> &Vec<String> {
    &self.retransmitted_files
  }


  pub fn set_retry(&mut self, retry: i32) {
    self.retry = retry;
  }

  pub fn with_retry(mut self, retry: i32) -> SyncJobExtended {
    self.retry = retry;
    self
  }

  pub fn retry(&self) -> &i32 {
    &self.retry
  }


  pub fn set_running_chunks(&mut self, running_chunks: i32) {
    self.running_chunks = running_chunks;
  }

  pub fn with_running_chunks(mut self, running_chunks: i32) -> SyncJobExtended {
    self.running_chunks = running_chunks;
    self
  }

  pub fn running_chunks(&self) -> &i32 {
    &self.running_chunks
  }


  pub fn set_sockets_replicated(&mut self, sockets_replicated: i32) {
    self.sockets_replicated = sockets_replicated;
  }

  pub fn with_sockets_replicated(mut self, sockets_replicated: i32) -> SyncJobExtended {
    self.sockets_replicated = sockets_replicated;
    self
  }

  pub fn sockets_replicated(&self) -> &i32 {
    &self.sockets_replicated
  }


  pub fn set_source_bytes_recovered(&mut self, source_bytes_recovered: i32) {
    self.source_bytes_recovered = source_bytes_recovered;
  }

  pub fn with_source_bytes_recovered(mut self, source_bytes_recovered: i32) -> SyncJobExtended {
    self.source_bytes_recovered = source_bytes_recovered;
    self
  }

  pub fn source_bytes_recovered(&self) -> &i32 {
    &self.source_bytes_recovered
  }


  pub fn set_source_directories_created(&mut self, source_directories_created: i32) {
    self.source_directories_created = source_directories_created;
  }

  pub fn with_source_directories_created(mut self, source_directories_created: i32) -> SyncJobExtended {
    self.source_directories_created = source_directories_created;
    self
  }

  pub fn source_directories_created(&self) -> &i32 {
    &self.source_directories_created
  }


  pub fn set_source_directories_deleted(&mut self, source_directories_deleted: i32) {
    self.source_directories_deleted = source_directories_deleted;
  }

  pub fn with_source_directories_deleted(mut self, source_directories_deleted: i32) -> SyncJobExtended {
    self.source_directories_deleted = source_directories_deleted;
    self
  }

  pub fn source_directories_deleted(&self) -> &i32 {
    &self.source_directories_deleted
  }


  pub fn set_source_directories_linked(&mut self, source_directories_linked: i32) {
    self.source_directories_linked = source_directories_linked;
  }

  pub fn with_source_directories_linked(mut self, source_directories_linked: i32) -> SyncJobExtended {
    self.source_directories_linked = source_directories_linked;
    self
  }

  pub fn source_directories_linked(&self) -> &i32 {
    &self.source_directories_linked
  }


  pub fn set_source_directories_unlinked(&mut self, source_directories_unlinked: i32) {
    self.source_directories_unlinked = source_directories_unlinked;
  }

  pub fn with_source_directories_unlinked(mut self, source_directories_unlinked: i32) -> SyncJobExtended {
    self.source_directories_unlinked = source_directories_unlinked;
    self
  }

  pub fn source_directories_unlinked(&self) -> &i32 {
    &self.source_directories_unlinked
  }


  pub fn set_source_directories_visited(&mut self, source_directories_visited: i32) {
    self.source_directories_visited = source_directories_visited;
  }

  pub fn with_source_directories_visited(mut self, source_directories_visited: i32) -> SyncJobExtended {
    self.source_directories_visited = source_directories_visited;
    self
  }

  pub fn source_directories_visited(&self) -> &i32 {
    &self.source_directories_visited
  }


  pub fn set_source_files_deleted(&mut self, source_files_deleted: i32) {
    self.source_files_deleted = source_files_deleted;
  }

  pub fn with_source_files_deleted(mut self, source_files_deleted: i32) -> SyncJobExtended {
    self.source_files_deleted = source_files_deleted;
    self
  }

  pub fn source_files_deleted(&self) -> &i32 {
    &self.source_files_deleted
  }


  pub fn set_source_files_linked(&mut self, source_files_linked: i32) {
    self.source_files_linked = source_files_linked;
  }

  pub fn with_source_files_linked(mut self, source_files_linked: i32) -> SyncJobExtended {
    self.source_files_linked = source_files_linked;
    self
  }

  pub fn source_files_linked(&self) -> &i32 {
    &self.source_files_linked
  }


  pub fn set_source_files_unlinked(&mut self, source_files_unlinked: i32) {
    self.source_files_unlinked = source_files_unlinked;
  }

  pub fn with_source_files_unlinked(mut self, source_files_unlinked: i32) -> SyncJobExtended {
    self.source_files_unlinked = source_files_unlinked;
    self
  }

  pub fn source_files_unlinked(&self) -> &i32 {
    &self.source_files_unlinked
  }


  pub fn set_sparse_data_bytes(&mut self, sparse_data_bytes: i32) {
    self.sparse_data_bytes = sparse_data_bytes;
  }

  pub fn with_sparse_data_bytes(mut self, sparse_data_bytes: i32) -> SyncJobExtended {
    self.sparse_data_bytes = sparse_data_bytes;
    self
  }

  pub fn sparse_data_bytes(&self) -> &i32 {
    &self.sparse_data_bytes
  }


  pub fn set_start_time(&mut self, start_time: i32) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: i32) -> SyncJobExtended {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&i32> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = state;
  }

  pub fn with_state(mut self, state: String) -> SyncJobExtended {
    self.state = state;
    self
  }

  pub fn state(&self) -> &String {
    &self.state
  }


  pub fn set_succeeded_chunks(&mut self, succeeded_chunks: i32) {
    self.succeeded_chunks = succeeded_chunks;
  }

  pub fn with_succeeded_chunks(mut self, succeeded_chunks: i32) -> SyncJobExtended {
    self.succeeded_chunks = succeeded_chunks;
    self
  }

  pub fn succeeded_chunks(&self) -> &i32 {
    &self.succeeded_chunks
  }


  pub fn set_symlinks_replicated(&mut self, symlinks_replicated: i32) {
    self.symlinks_replicated = symlinks_replicated;
  }

  pub fn with_symlinks_replicated(mut self, symlinks_replicated: i32) -> SyncJobExtended {
    self.symlinks_replicated = symlinks_replicated;
    self
  }

  pub fn symlinks_replicated(&self) -> &i32 {
    &self.symlinks_replicated
  }


  pub fn set_sync_type(&mut self, sync_type: String) {
    self.sync_type = sync_type;
  }

  pub fn with_sync_type(mut self, sync_type: String) -> SyncJobExtended {
    self.sync_type = sync_type;
    self
  }

  pub fn sync_type(&self) -> &String {
    &self.sync_type
  }


  pub fn set_target_bytes_recovered(&mut self, target_bytes_recovered: i32) {
    self.target_bytes_recovered = target_bytes_recovered;
  }

  pub fn with_target_bytes_recovered(mut self, target_bytes_recovered: i32) -> SyncJobExtended {
    self.target_bytes_recovered = target_bytes_recovered;
    self
  }

  pub fn target_bytes_recovered(&self) -> &i32 {
    &self.target_bytes_recovered
  }


  pub fn set_target_directories_created(&mut self, target_directories_created: i32) {
    self.target_directories_created = target_directories_created;
  }

  pub fn with_target_directories_created(mut self, target_directories_created: i32) -> SyncJobExtended {
    self.target_directories_created = target_directories_created;
    self
  }

  pub fn target_directories_created(&self) -> &i32 {
    &self.target_directories_created
  }


  pub fn set_target_directories_deleted(&mut self, target_directories_deleted: i32) {
    self.target_directories_deleted = target_directories_deleted;
  }

  pub fn with_target_directories_deleted(mut self, target_directories_deleted: i32) -> SyncJobExtended {
    self.target_directories_deleted = target_directories_deleted;
    self
  }

  pub fn target_directories_deleted(&self) -> &i32 {
    &self.target_directories_deleted
  }


  pub fn set_target_directories_linked(&mut self, target_directories_linked: i32) {
    self.target_directories_linked = target_directories_linked;
  }

  pub fn with_target_directories_linked(mut self, target_directories_linked: i32) -> SyncJobExtended {
    self.target_directories_linked = target_directories_linked;
    self
  }

  pub fn target_directories_linked(&self) -> &i32 {
    &self.target_directories_linked
  }


  pub fn set_target_directories_unlinked(&mut self, target_directories_unlinked: i32) {
    self.target_directories_unlinked = target_directories_unlinked;
  }

  pub fn with_target_directories_unlinked(mut self, target_directories_unlinked: i32) -> SyncJobExtended {
    self.target_directories_unlinked = target_directories_unlinked;
    self
  }

  pub fn target_directories_unlinked(&self) -> &i32 {
    &self.target_directories_unlinked
  }


  pub fn set_target_files_deleted(&mut self, target_files_deleted: i32) {
    self.target_files_deleted = target_files_deleted;
  }

  pub fn with_target_files_deleted(mut self, target_files_deleted: i32) -> SyncJobExtended {
    self.target_files_deleted = target_files_deleted;
    self
  }

  pub fn target_files_deleted(&self) -> &i32 {
    &self.target_files_deleted
  }


  pub fn set_target_files_linked(&mut self, target_files_linked: i32) {
    self.target_files_linked = target_files_linked;
  }

  pub fn with_target_files_linked(mut self, target_files_linked: i32) -> SyncJobExtended {
    self.target_files_linked = target_files_linked;
    self
  }

  pub fn target_files_linked(&self) -> &i32 {
    &self.target_files_linked
  }


  pub fn set_target_files_unlinked(&mut self, target_files_unlinked: i32) {
    self.target_files_unlinked = target_files_unlinked;
  }

  pub fn with_target_files_unlinked(mut self, target_files_unlinked: i32) -> SyncJobExtended {
    self.target_files_unlinked = target_files_unlinked;
    self
  }

  pub fn target_files_unlinked(&self) -> &i32 {
    &self.target_files_unlinked
  }


  pub fn set_target_snapshots(&mut self, target_snapshots: Vec<String>) {
    self.target_snapshots = target_snapshots;
  }

  pub fn with_target_snapshots(mut self, target_snapshots: Vec<String>) -> SyncJobExtended {
    self.target_snapshots = target_snapshots;
    self
  }

  pub fn target_snapshots(&self) -> &Vec<String> {
    &self.target_snapshots
  }


  pub fn set_total_chunks(&mut self, total_chunks: i32) {
    self.total_chunks = total_chunks;
  }

  pub fn with_total_chunks(mut self, total_chunks: i32) -> SyncJobExtended {
    self.total_chunks = total_chunks;
    self
  }

  pub fn total_chunks(&self) -> &i32 {
    &self.total_chunks
  }


  pub fn set_total_data_bytes(&mut self, total_data_bytes: i32) {
    self.total_data_bytes = total_data_bytes;
  }

  pub fn with_total_data_bytes(mut self, total_data_bytes: i32) -> SyncJobExtended {
    self.total_data_bytes = total_data_bytes;
    self
  }

  pub fn total_data_bytes(&self) -> &i32 {
    &self.total_data_bytes
  }


  pub fn set_total_files(&mut self, total_files: i32) {
    self.total_files = total_files;
  }

  pub fn with_total_files(mut self, total_files: i32) -> SyncJobExtended {
    self.total_files = total_files;
    self
  }

  pub fn total_files(&self) -> &i32 {
    &self.total_files
  }


  pub fn set_total_network_bytes(&mut self, total_network_bytes: i32) {
    self.total_network_bytes = total_network_bytes;
  }

  pub fn with_total_network_bytes(mut self, total_network_bytes: i32) -> SyncJobExtended {
    self.total_network_bytes = total_network_bytes;
    self
  }

  pub fn total_network_bytes(&self) -> &i32 {
    &self.total_network_bytes
  }


  pub fn set_total_phases(&mut self, total_phases: i32) {
    self.total_phases = total_phases;
  }

  pub fn with_total_phases(mut self, total_phases: i32) -> SyncJobExtended {
    self.total_phases = total_phases;
    self
  }

  pub fn total_phases(&self) -> &i32 {
    &self.total_phases
  }


  pub fn set_unchanged_data_bytes(&mut self, unchanged_data_bytes: i32) {
    self.unchanged_data_bytes = unchanged_data_bytes;
  }

  pub fn with_unchanged_data_bytes(mut self, unchanged_data_bytes: i32) -> SyncJobExtended {
    self.unchanged_data_bytes = unchanged_data_bytes;
    self
  }

  pub fn unchanged_data_bytes(&self) -> &i32 {
    &self.unchanged_data_bytes
  }


  pub fn set_up_to_date_files_skipped(&mut self, up_to_date_files_skipped: i32) {
    self.up_to_date_files_skipped = up_to_date_files_skipped;
  }

  pub fn with_up_to_date_files_skipped(mut self, up_to_date_files_skipped: i32) -> SyncJobExtended {
    self.up_to_date_files_skipped = up_to_date_files_skipped;
    self
  }

  pub fn up_to_date_files_skipped(&self) -> &i32 {
    &self.up_to_date_files_skipped
  }


  pub fn set_updated_files_replicated(&mut self, updated_files_replicated: i32) {
    self.updated_files_replicated = updated_files_replicated;
  }

  pub fn with_updated_files_replicated(mut self, updated_files_replicated: i32) -> SyncJobExtended {
    self.updated_files_replicated = updated_files_replicated;
    self
  }

  pub fn updated_files_replicated(&self) -> &i32 {
    &self.updated_files_replicated
  }


  pub fn set_user_conflict_files_skipped(&mut self, user_conflict_files_skipped: i32) {
    self.user_conflict_files_skipped = user_conflict_files_skipped;
  }

  pub fn with_user_conflict_files_skipped(mut self, user_conflict_files_skipped: i32) -> SyncJobExtended {
    self.user_conflict_files_skipped = user_conflict_files_skipped;
    self
  }

  pub fn user_conflict_files_skipped(&self) -> &i32 {
    &self.user_conflict_files_skipped
  }


  pub fn set_warnings(&mut self, warnings: Vec<String>) {
    self.warnings = warnings;
  }

  pub fn with_warnings(mut self, warnings: Vec<String>) -> SyncJobExtended {
    self.warnings = warnings;
    self
  }

  pub fn warnings(&self) -> &Vec<String> {
    &self.warnings
  }


  pub fn set_workers(&mut self, workers: Vec<::models::SyncJobWorker>) {
    self.workers = workers;
  }

  pub fn with_workers(mut self, workers: Vec<::models::SyncJobWorker>) -> SyncJobExtended {
    self.workers = workers;
    self
  }

  pub fn workers(&self) -> &Vec<::models::SyncJobWorker> {
    &self.workers
  }


}



