/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobStatisticsJobNodeCpu {
  /// The average CPU utilization of the job on this node.
  #[serde(rename = "average")]
  average: Option<f32>,
  /// The current CPU utilization of the job on this node.
  #[serde(rename = "current")]
  current: f32,
  /// The maximum CPU utilization of the job on this node.
  #[serde(rename = "maximum")]
  maximum: f32,
  /// The minimum CPU utilization of the job on this node.
  #[serde(rename = "minimum")]
  minimum: f32
}

impl JobStatisticsJobNodeCpu {
  pub fn new(current: f32, maximum: f32, minimum: f32) -> JobStatisticsJobNodeCpu {
    JobStatisticsJobNodeCpu {
      average: None,
      current: current,
      maximum: maximum,
      minimum: minimum
    }
  }

  pub fn set_average(&mut self, average: f32) {
    self.average = Some(average);
  }

  pub fn with_average(mut self, average: f32) -> JobStatisticsJobNodeCpu {
    self.average = Some(average);
    self
  }

  pub fn average(&self) -> Option<&f32> {
    self.average.as_ref()
  }

  pub fn reset_average(&mut self) {
    self.average = None;
  }

  pub fn set_current(&mut self, current: f32) {
    self.current = current;
  }

  pub fn with_current(mut self, current: f32) -> JobStatisticsJobNodeCpu {
    self.current = current;
    self
  }

  pub fn current(&self) -> &f32 {
    &self.current
  }


  pub fn set_maximum(&mut self, maximum: f32) {
    self.maximum = maximum;
  }

  pub fn with_maximum(mut self, maximum: f32) -> JobStatisticsJobNodeCpu {
    self.maximum = maximum;
    self
  }

  pub fn maximum(&self) -> &f32 {
    &self.maximum
  }


  pub fn set_minimum(&mut self, minimum: f32) {
    self.minimum = minimum;
  }

  pub fn with_minimum(mut self, minimum: f32) -> JobStatisticsJobNodeCpu {
    self.minimum = minimum;
    self
  }

  pub fn minimum(&self) -> &f32 {
    &self.minimum
  }


}



