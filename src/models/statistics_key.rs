/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StatisticsKey {
  /// Type of aggregation used in down-sampling.
  #[serde(rename = "aggregation_type")]
  aggregation_type: String,
  /// Name of key this keys is derived from, if any.
  #[serde(rename = "base_name")]
  base_name: Option<String>,
  /// Default time in seconds system will used cached values.
  #[serde(rename = "default_cache_time")]
  default_cache_time: i32,
  /// Description of statistics key.
  #[serde(rename = "description")]
  description: String,
  /// Key name.
  #[serde(rename = "key")]
  key: String,
  /// List of effective history policies for key.
  #[serde(rename = "policies")]
  policies: Option<Vec<::models::StatisticsKeyPolicy>>,
  /// Configured time in seconds system will used cached values.
  #[serde(rename = "policy_cache_time")]
  policy_cache_time: Option<i32>,
  /// Name of real key if this is an alias.
  #[serde(rename = "real_name")]
  real_name: Option<String>,
  /// Scope of key.
  #[serde(rename = "scope")]
  scope: String,
  /// Data type of key values.
  #[serde(rename = "type")]
  _type: String,
  /// Units of key values.
  #[serde(rename = "units")]
  units: String
}

impl StatisticsKey {
  pub fn new(aggregation_type: String, default_cache_time: i32, description: String, key: String, scope: String, _type: String, units: String) -> StatisticsKey {
    StatisticsKey {
      aggregation_type: aggregation_type,
      base_name: None,
      default_cache_time: default_cache_time,
      description: description,
      key: key,
      policies: None,
      policy_cache_time: None,
      real_name: None,
      scope: scope,
      _type: _type,
      units: units
    }
  }

  pub fn set_aggregation_type(&mut self, aggregation_type: String) {
    self.aggregation_type = aggregation_type;
  }

  pub fn with_aggregation_type(mut self, aggregation_type: String) -> StatisticsKey {
    self.aggregation_type = aggregation_type;
    self
  }

  pub fn aggregation_type(&self) -> &String {
    &self.aggregation_type
  }


  pub fn set_base_name(&mut self, base_name: String) {
    self.base_name = Some(base_name);
  }

  pub fn with_base_name(mut self, base_name: String) -> StatisticsKey {
    self.base_name = Some(base_name);
    self
  }

  pub fn base_name(&self) -> Option<&String> {
    self.base_name.as_ref()
  }

  pub fn reset_base_name(&mut self) {
    self.base_name = None;
  }

  pub fn set_default_cache_time(&mut self, default_cache_time: i32) {
    self.default_cache_time = default_cache_time;
  }

  pub fn with_default_cache_time(mut self, default_cache_time: i32) -> StatisticsKey {
    self.default_cache_time = default_cache_time;
    self
  }

  pub fn default_cache_time(&self) -> &i32 {
    &self.default_cache_time
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> StatisticsKey {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_key(&mut self, key: String) {
    self.key = key;
  }

  pub fn with_key(mut self, key: String) -> StatisticsKey {
    self.key = key;
    self
  }

  pub fn key(&self) -> &String {
    &self.key
  }


  pub fn set_policies(&mut self, policies: Vec<::models::StatisticsKeyPolicy>) {
    self.policies = Some(policies);
  }

  pub fn with_policies(mut self, policies: Vec<::models::StatisticsKeyPolicy>) -> StatisticsKey {
    self.policies = Some(policies);
    self
  }

  pub fn policies(&self) -> Option<&Vec<::models::StatisticsKeyPolicy>> {
    self.policies.as_ref()
  }

  pub fn reset_policies(&mut self) {
    self.policies = None;
  }

  pub fn set_policy_cache_time(&mut self, policy_cache_time: i32) {
    self.policy_cache_time = Some(policy_cache_time);
  }

  pub fn with_policy_cache_time(mut self, policy_cache_time: i32) -> StatisticsKey {
    self.policy_cache_time = Some(policy_cache_time);
    self
  }

  pub fn policy_cache_time(&self) -> Option<&i32> {
    self.policy_cache_time.as_ref()
  }

  pub fn reset_policy_cache_time(&mut self) {
    self.policy_cache_time = None;
  }

  pub fn set_real_name(&mut self, real_name: String) {
    self.real_name = Some(real_name);
  }

  pub fn with_real_name(mut self, real_name: String) -> StatisticsKey {
    self.real_name = Some(real_name);
    self
  }

  pub fn real_name(&self) -> Option<&String> {
    self.real_name.as_ref()
  }

  pub fn reset_real_name(&mut self) {
    self.real_name = None;
  }

  pub fn set_scope(&mut self, scope: String) {
    self.scope = scope;
  }

  pub fn with_scope(mut self, scope: String) -> StatisticsKey {
    self.scope = scope;
    self
  }

  pub fn scope(&self) -> &String {
    &self.scope
  }


  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> StatisticsKey {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_units(&mut self, units: String) {
    self.units = units;
  }

  pub fn with_units(mut self, units: String) -> StatisticsKey {
    self.units = units;
    self
  }

  pub fn units(&self) -> &String {
    &self.units
  }


}



