/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeHardwareFastNode {
  /// Node ID (Device Number) of this node.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Logical Node Number (LNN) of this node.
  #[serde(rename = "lnn")]
  lnn: Option<i32>,
  /// Isilon product name.
  #[serde(rename = "product")]
  product: Option<String>,
  /// Serial number of this node.
  #[serde(rename = "serial_number")]
  serial_number: Option<String>,
  /// Storage class of this node (storage or diskless).
  #[serde(rename = "storage_class")]
  storage_class: Option<String>
}

impl NodeHardwareFastNode {
  pub fn new() -> NodeHardwareFastNode {
    NodeHardwareFastNode {
      id: None,
      lnn: None,
      product: None,
      serial_number: None,
      storage_class: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> NodeHardwareFastNode {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_lnn(&mut self, lnn: i32) {
    self.lnn = Some(lnn);
  }

  pub fn with_lnn(mut self, lnn: i32) -> NodeHardwareFastNode {
    self.lnn = Some(lnn);
    self
  }

  pub fn lnn(&self) -> Option<&i32> {
    self.lnn.as_ref()
  }

  pub fn reset_lnn(&mut self) {
    self.lnn = None;
  }

  pub fn set_product(&mut self, product: String) {
    self.product = Some(product);
  }

  pub fn with_product(mut self, product: String) -> NodeHardwareFastNode {
    self.product = Some(product);
    self
  }

  pub fn product(&self) -> Option<&String> {
    self.product.as_ref()
  }

  pub fn reset_product(&mut self) {
    self.product = None;
  }

  pub fn set_serial_number(&mut self, serial_number: String) {
    self.serial_number = Some(serial_number);
  }

  pub fn with_serial_number(mut self, serial_number: String) -> NodeHardwareFastNode {
    self.serial_number = Some(serial_number);
    self
  }

  pub fn serial_number(&self) -> Option<&String> {
    self.serial_number.as_ref()
  }

  pub fn reset_serial_number(&mut self) {
    self.serial_number = None;
  }

  pub fn set_storage_class(&mut self, storage_class: String) {
    self.storage_class = Some(storage_class);
  }

  pub fn with_storage_class(mut self, storage_class: String) -> NodeHardwareFastNode {
    self.storage_class = Some(storage_class);
    self
  }

  pub fn storage_class(&self) -> Option<&String> {
    self.storage_class.as_ref()
  }

  pub fn reset_storage_class(&mut self) {
    self.storage_class = None;
  }

}



