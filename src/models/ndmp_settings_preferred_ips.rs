/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NdmpSettingsPreferredIps : Get a list of preferred ip preferences.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpSettingsPreferredIps {
  #[serde(rename = "preferences")]
  preferences: Option<Vec<::models::NdmpSettingsPreferredIpsPreference>>,
  /// Resume string returned by previous query.
  #[serde(rename = "resume")]
  resume: Option<String>,
  /// The number of preferences.
  #[serde(rename = "total")]
  total: Option<i32>
}

impl NdmpSettingsPreferredIps {
  /// Get a list of preferred ip preferences.
  pub fn new() -> NdmpSettingsPreferredIps {
    NdmpSettingsPreferredIps {
      preferences: None,
      resume: None,
      total: None
    }
  }

  pub fn set_preferences(&mut self, preferences: Vec<::models::NdmpSettingsPreferredIpsPreference>) {
    self.preferences = Some(preferences);
  }

  pub fn with_preferences(mut self, preferences: Vec<::models::NdmpSettingsPreferredIpsPreference>) -> NdmpSettingsPreferredIps {
    self.preferences = Some(preferences);
    self
  }

  pub fn preferences(&self) -> Option<&Vec<::models::NdmpSettingsPreferredIpsPreference>> {
    self.preferences.as_ref()
  }

  pub fn reset_preferences(&mut self) {
    self.preferences = None;
  }

  pub fn set_resume(&mut self, resume: String) {
    self.resume = Some(resume);
  }

  pub fn with_resume(mut self, resume: String) -> NdmpSettingsPreferredIps {
    self.resume = Some(resume);
    self
  }

  pub fn resume(&self) -> Option<&String> {
    self.resume.as_ref()
  }

  pub fn reset_resume(&mut self) {
    self.resume = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> NdmpSettingsPreferredIps {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

}



