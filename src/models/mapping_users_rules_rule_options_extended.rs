/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MappingUsersRulesRuleOptionsExtended {
  /// If true, and the rule was applied successfully, stop processing further.
  #[serde(rename = "break")]
  _break: Option<bool>,
  /// 
  #[serde(rename = "default_user")]
  default_user: Option<::models::MappingUsersRulesRuleOptionsDefaultUser>,
  /// If true, the primary GID and primary group SID should be copied to the existing credential.
  #[serde(rename = "group")]
  group: Option<bool>,
  /// If true, all additional identifiers should be copied to the existing credential.
  #[serde(rename = "groups")]
  groups: Option<bool>,
  /// If true, the primary UID and primary user SID should be copied to the existing credential.
  #[serde(rename = "user")]
  user: Option<bool>
}

impl MappingUsersRulesRuleOptionsExtended {
  pub fn new() -> MappingUsersRulesRuleOptionsExtended {
    MappingUsersRulesRuleOptionsExtended {
      _break: None,
      default_user: None,
      group: None,
      groups: None,
      user: None
    }
  }

  pub fn set__break(&mut self, _break: bool) {
    self._break = Some(_break);
  }

  pub fn with__break(mut self, _break: bool) -> MappingUsersRulesRuleOptionsExtended {
    self._break = Some(_break);
    self
  }

  pub fn _break(&self) -> Option<&bool> {
    self._break.as_ref()
  }

  pub fn reset__break(&mut self) {
    self._break = None;
  }

  pub fn set_default_user(&mut self, default_user: ::models::MappingUsersRulesRuleOptionsDefaultUser) {
    self.default_user = Some(default_user);
  }

  pub fn with_default_user(mut self, default_user: ::models::MappingUsersRulesRuleOptionsDefaultUser) -> MappingUsersRulesRuleOptionsExtended {
    self.default_user = Some(default_user);
    self
  }

  pub fn default_user(&self) -> Option<&::models::MappingUsersRulesRuleOptionsDefaultUser> {
    self.default_user.as_ref()
  }

  pub fn reset_default_user(&mut self) {
    self.default_user = None;
  }

  pub fn set_group(&mut self, group: bool) {
    self.group = Some(group);
  }

  pub fn with_group(mut self, group: bool) -> MappingUsersRulesRuleOptionsExtended {
    self.group = Some(group);
    self
  }

  pub fn group(&self) -> Option<&bool> {
    self.group.as_ref()
  }

  pub fn reset_group(&mut self) {
    self.group = None;
  }

  pub fn set_groups(&mut self, groups: bool) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: bool) -> MappingUsersRulesRuleOptionsExtended {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&bool> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_user(&mut self, user: bool) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: bool) -> MappingUsersRulesRuleOptionsExtended {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&bool> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



