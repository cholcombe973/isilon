/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CertificateServerCertificate {
  /// Boolean identifying if a certificate is the default certificate.The default certificate is used as the fallback when no other certificates match a TLS enabled service's particular criteria. There must always be a configured default certificate.
  #[serde(rename = "default")]
  default: bool,
  /// Description field associated with a certificate provided for administrative convenience.
  #[serde(rename = "description")]
  description: String,
  /// A list of DNS names/patterns for which this certificate is valid. This list is extracted from the certificates CN (Common Name) and subjectAtlName extension fields.
  #[serde(rename = "dnsnames")]
  dnsnames: Vec<String>,
  /// True if the certificate has expired and is no longer valid.
  #[serde(rename = "expired")]
  expired: bool,
  /// A list of zero or more certificate fingerprints which can be used for certificate identification.
  #[serde(rename = "fingerprints")]
  fingerprints: Vec<::models::CertificateServerCertificateFingerprint>,
  /// Unique server certificate identifier.
  #[serde(rename = "id")]
  id: String,
  /// Certificate issuer field extracted from the certificate.
  #[serde(rename = "issuer")]
  issuer: String,
  /// Subject common name extracted from the certificate.
  #[serde(rename = "name")]
  name: String,
  /// Certificate notAfter field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid after this timestamp.
  #[serde(rename = "not_after")]
  not_after: i32,
  /// Certificate notBefore field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid before this timestamp.
  #[serde(rename = "not_before")]
  not_before: i32,
  /// Certificate subject field extracted from the certificate.
  #[serde(rename = "subject")]
  subject: String,
  /// True if the certificate is valid (ie: not_before <= now <= not_after).
  #[serde(rename = "valid")]
  valid: bool
}

impl CertificateServerCertificate {
  pub fn new(default: bool, description: String, dnsnames: Vec<String>, expired: bool, fingerprints: Vec<::models::CertificateServerCertificateFingerprint>, id: String, issuer: String, name: String, not_after: i32, not_before: i32, subject: String, valid: bool) -> CertificateServerCertificate {
    CertificateServerCertificate {
      default: default,
      description: description,
      dnsnames: dnsnames,
      expired: expired,
      fingerprints: fingerprints,
      id: id,
      issuer: issuer,
      name: name,
      not_after: not_after,
      not_before: not_before,
      subject: subject,
      valid: valid
    }
  }

  pub fn set_default(&mut self, default: bool) {
    self.default = default;
  }

  pub fn with_default(mut self, default: bool) -> CertificateServerCertificate {
    self.default = default;
    self
  }

  pub fn default(&self) -> &bool {
    &self.default
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> CertificateServerCertificate {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_dnsnames(&mut self, dnsnames: Vec<String>) {
    self.dnsnames = dnsnames;
  }

  pub fn with_dnsnames(mut self, dnsnames: Vec<String>) -> CertificateServerCertificate {
    self.dnsnames = dnsnames;
    self
  }

  pub fn dnsnames(&self) -> &Vec<String> {
    &self.dnsnames
  }


  pub fn set_expired(&mut self, expired: bool) {
    self.expired = expired;
  }

  pub fn with_expired(mut self, expired: bool) -> CertificateServerCertificate {
    self.expired = expired;
    self
  }

  pub fn expired(&self) -> &bool {
    &self.expired
  }


  pub fn set_fingerprints(&mut self, fingerprints: Vec<::models::CertificateServerCertificateFingerprint>) {
    self.fingerprints = fingerprints;
  }

  pub fn with_fingerprints(mut self, fingerprints: Vec<::models::CertificateServerCertificateFingerprint>) -> CertificateServerCertificate {
    self.fingerprints = fingerprints;
    self
  }

  pub fn fingerprints(&self) -> &Vec<::models::CertificateServerCertificateFingerprint> {
    &self.fingerprints
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> CertificateServerCertificate {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_issuer(&mut self, issuer: String) {
    self.issuer = issuer;
  }

  pub fn with_issuer(mut self, issuer: String) -> CertificateServerCertificate {
    self.issuer = issuer;
    self
  }

  pub fn issuer(&self) -> &String {
    &self.issuer
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> CertificateServerCertificate {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_not_after(&mut self, not_after: i32) {
    self.not_after = not_after;
  }

  pub fn with_not_after(mut self, not_after: i32) -> CertificateServerCertificate {
    self.not_after = not_after;
    self
  }

  pub fn not_after(&self) -> &i32 {
    &self.not_after
  }


  pub fn set_not_before(&mut self, not_before: i32) {
    self.not_before = not_before;
  }

  pub fn with_not_before(mut self, not_before: i32) -> CertificateServerCertificate {
    self.not_before = not_before;
    self
  }

  pub fn not_before(&self) -> &i32 {
    &self.not_before
  }


  pub fn set_subject(&mut self, subject: String) {
    self.subject = subject;
  }

  pub fn with_subject(mut self, subject: String) -> CertificateServerCertificate {
    self.subject = subject;
    self
  }

  pub fn subject(&self) -> &String {
    &self.subject
  }


  pub fn set_valid(&mut self, valid: bool) {
    self.valid = valid;
  }

  pub fn with_valid(mut self, valid: bool) -> CertificateServerCertificate {
    self.valid = valid;
    self
  }

  pub fn valid(&self) -> &bool {
    &self.valid
  }


}



