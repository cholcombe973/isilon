/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotAliasExtended {
  /// The Unix Epoch time the snapshot alias was created.
  #[serde(rename = "created")]
  created: i32,
  /// The system ID given to the snapshot alias.
  #[serde(rename = "id")]
  id: i32,
  /// The user or system supplied snapshot alias name.
  #[serde(rename = "name")]
  name: String,
  /// The ID of the snapshot pointed to.
  #[serde(rename = "target_id")]
  target_id: i32,
  /// The name of the snapshot pointed to.
  #[serde(rename = "target_name")]
  target_name: String
}

impl SnapshotAliasExtended {
  pub fn new(created: i32, id: i32, name: String, target_id: i32, target_name: String) -> SnapshotAliasExtended {
    SnapshotAliasExtended {
      created: created,
      id: id,
      name: name,
      target_id: target_id,
      target_name: target_name
    }
  }

  pub fn set_created(&mut self, created: i32) {
    self.created = created;
  }

  pub fn with_created(mut self, created: i32) -> SnapshotAliasExtended {
    self.created = created;
    self
  }

  pub fn created(&self) -> &i32 {
    &self.created
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> SnapshotAliasExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> SnapshotAliasExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_target_id(&mut self, target_id: i32) {
    self.target_id = target_id;
  }

  pub fn with_target_id(mut self, target_id: i32) -> SnapshotAliasExtended {
    self.target_id = target_id;
    self
  }

  pub fn target_id(&self) -> &i32 {
    &self.target_id
  }


  pub fn set_target_name(&mut self, target_name: String) {
    self.target_name = target_name;
  }

  pub fn with_target_name(mut self, target_name: String) -> SnapshotAliasExtended {
    self.target_name = target_name;
    self
  }

  pub fn target_name(&self) -> &String {
    &self.target_name
  }


}



