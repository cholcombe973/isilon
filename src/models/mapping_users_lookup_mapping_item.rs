/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MappingUsersLookupMappingItem {
  #[serde(rename = "groups")]
  groups: Option<Vec<::models::MappingUsersLookupMappingItemGroup>>,
  #[serde(rename = "object_history")]
  object_history: Option<Vec<::models::AuthGroupObjectHistoryItem>>,
  #[serde(rename = "privileges")]
  privileges: Option<Vec<::models::AuthIdNtokenPrivilegeItem>>,
  /// Specifies the configuration properties for a user.
  #[serde(rename = "user")]
  user: Option<::models::MappingUsersLookupMappingItemUser>,
  #[serde(rename = "zid")]
  zid: Option<i32>,
  #[serde(rename = "zone")]
  zone: Option<String>
}

impl MappingUsersLookupMappingItem {
  pub fn new() -> MappingUsersLookupMappingItem {
    MappingUsersLookupMappingItem {
      groups: None,
      object_history: None,
      privileges: None,
      user: None,
      zid: None,
      zone: None
    }
  }

  pub fn set_groups(&mut self, groups: Vec<::models::MappingUsersLookupMappingItemGroup>) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Vec<::models::MappingUsersLookupMappingItemGroup>) -> MappingUsersLookupMappingItem {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Vec<::models::MappingUsersLookupMappingItemGroup>> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_object_history(&mut self, object_history: Vec<::models::AuthGroupObjectHistoryItem>) {
    self.object_history = Some(object_history);
  }

  pub fn with_object_history(mut self, object_history: Vec<::models::AuthGroupObjectHistoryItem>) -> MappingUsersLookupMappingItem {
    self.object_history = Some(object_history);
    self
  }

  pub fn object_history(&self) -> Option<&Vec<::models::AuthGroupObjectHistoryItem>> {
    self.object_history.as_ref()
  }

  pub fn reset_object_history(&mut self) {
    self.object_history = None;
  }

  pub fn set_privileges(&mut self, privileges: Vec<::models::AuthIdNtokenPrivilegeItem>) {
    self.privileges = Some(privileges);
  }

  pub fn with_privileges(mut self, privileges: Vec<::models::AuthIdNtokenPrivilegeItem>) -> MappingUsersLookupMappingItem {
    self.privileges = Some(privileges);
    self
  }

  pub fn privileges(&self) -> Option<&Vec<::models::AuthIdNtokenPrivilegeItem>> {
    self.privileges.as_ref()
  }

  pub fn reset_privileges(&mut self) {
    self.privileges = None;
  }

  pub fn set_user(&mut self, user: ::models::MappingUsersLookupMappingItemUser) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::MappingUsersLookupMappingItemUser) -> MappingUsersLookupMappingItem {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::MappingUsersLookupMappingItemUser> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_zid(&mut self, zid: i32) {
    self.zid = Some(zid);
  }

  pub fn with_zid(mut self, zid: i32) -> MappingUsersLookupMappingItem {
    self.zid = Some(zid);
    self
  }

  pub fn zid(&self) -> Option<&i32> {
    self.zid.as_ref()
  }

  pub fn reset_zid(&mut self) {
    self.zid = None;
  }

  pub fn set_zone(&mut self, zone: String) {
    self.zone = Some(zone);
  }

  pub fn with_zone(mut self, zone: String) -> MappingUsersLookupMappingItem {
    self.zone = Some(zone);
    self
  }

  pub fn zone(&self) -> Option<&String> {
    self.zone.as_ref()
  }

  pub fn reset_zone(&mut self) {
    self.zone = None;
  }

}



