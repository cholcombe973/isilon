/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotSettingsExtended {
  /// True if the scheduled snapshot creation services is on.
  #[serde(rename = "autocreate")]
  autocreate: Option<bool>,
  /// True if the scheduled snapshot deletion services is on.
  #[serde(rename = "autodelete")]
  autodelete: Option<bool>,
  /// Global switch for other accessible and visible settings.
  #[serde(rename = "global_visible_accessible")]
  global_visible_accessible: Option<bool>,
  /// True if root .snapshot directory is accessible locally.
  #[serde(rename = "local_root_accessible")]
  local_root_accessible: Option<bool>,
  /// True if root .snapshot directory is visible locally.
  #[serde(rename = "local_root_visible")]
  local_root_visible: Option<bool>,
  /// True if sub-directory .snapshot directory is accessible locally.
  #[serde(rename = "local_subdir_accessible")]
  local_subdir_accessible: Option<bool>,
  /// True if root .snapshot directory is accessible over NFS.
  #[serde(rename = "nfs_root_accessible")]
  nfs_root_accessible: Option<bool>,
  /// True if root .snapshot directory is visible over NFS.
  #[serde(rename = "nfs_root_visible")]
  nfs_root_visible: Option<bool>,
  /// True if sub-directory .snapshot directory is accessible over NFS.
  #[serde(rename = "nfs_subdir_accessible")]
  nfs_subdir_accessible: Option<bool>,
  /// Percentage of space to reserve for snapshots.
  #[serde(rename = "reserve")]
  reserve: Option<f32>,
  /// True if the system allows snapshot creation.
  #[serde(rename = "service")]
  service: Option<bool>,
  /// True if root .snapshot directory is accessible over SMB.
  #[serde(rename = "smb_root_accessible")]
  smb_root_accessible: Option<bool>,
  /// True if root .snapshot directory is visible over SMB.
  #[serde(rename = "smb_root_visible")]
  smb_root_visible: Option<bool>,
  /// True if sub-directory .snapshot directory is accessible over SMB.
  #[serde(rename = "smb_subdir_accessible")]
  smb_subdir_accessible: Option<bool>
}

impl SnapshotSettingsExtended {
  pub fn new() -> SnapshotSettingsExtended {
    SnapshotSettingsExtended {
      autocreate: None,
      autodelete: None,
      global_visible_accessible: None,
      local_root_accessible: None,
      local_root_visible: None,
      local_subdir_accessible: None,
      nfs_root_accessible: None,
      nfs_root_visible: None,
      nfs_subdir_accessible: None,
      reserve: None,
      service: None,
      smb_root_accessible: None,
      smb_root_visible: None,
      smb_subdir_accessible: None
    }
  }

  pub fn set_autocreate(&mut self, autocreate: bool) {
    self.autocreate = Some(autocreate);
  }

  pub fn with_autocreate(mut self, autocreate: bool) -> SnapshotSettingsExtended {
    self.autocreate = Some(autocreate);
    self
  }

  pub fn autocreate(&self) -> Option<&bool> {
    self.autocreate.as_ref()
  }

  pub fn reset_autocreate(&mut self) {
    self.autocreate = None;
  }

  pub fn set_autodelete(&mut self, autodelete: bool) {
    self.autodelete = Some(autodelete);
  }

  pub fn with_autodelete(mut self, autodelete: bool) -> SnapshotSettingsExtended {
    self.autodelete = Some(autodelete);
    self
  }

  pub fn autodelete(&self) -> Option<&bool> {
    self.autodelete.as_ref()
  }

  pub fn reset_autodelete(&mut self) {
    self.autodelete = None;
  }

  pub fn set_global_visible_accessible(&mut self, global_visible_accessible: bool) {
    self.global_visible_accessible = Some(global_visible_accessible);
  }

  pub fn with_global_visible_accessible(mut self, global_visible_accessible: bool) -> SnapshotSettingsExtended {
    self.global_visible_accessible = Some(global_visible_accessible);
    self
  }

  pub fn global_visible_accessible(&self) -> Option<&bool> {
    self.global_visible_accessible.as_ref()
  }

  pub fn reset_global_visible_accessible(&mut self) {
    self.global_visible_accessible = None;
  }

  pub fn set_local_root_accessible(&mut self, local_root_accessible: bool) {
    self.local_root_accessible = Some(local_root_accessible);
  }

  pub fn with_local_root_accessible(mut self, local_root_accessible: bool) -> SnapshotSettingsExtended {
    self.local_root_accessible = Some(local_root_accessible);
    self
  }

  pub fn local_root_accessible(&self) -> Option<&bool> {
    self.local_root_accessible.as_ref()
  }

  pub fn reset_local_root_accessible(&mut self) {
    self.local_root_accessible = None;
  }

  pub fn set_local_root_visible(&mut self, local_root_visible: bool) {
    self.local_root_visible = Some(local_root_visible);
  }

  pub fn with_local_root_visible(mut self, local_root_visible: bool) -> SnapshotSettingsExtended {
    self.local_root_visible = Some(local_root_visible);
    self
  }

  pub fn local_root_visible(&self) -> Option<&bool> {
    self.local_root_visible.as_ref()
  }

  pub fn reset_local_root_visible(&mut self) {
    self.local_root_visible = None;
  }

  pub fn set_local_subdir_accessible(&mut self, local_subdir_accessible: bool) {
    self.local_subdir_accessible = Some(local_subdir_accessible);
  }

  pub fn with_local_subdir_accessible(mut self, local_subdir_accessible: bool) -> SnapshotSettingsExtended {
    self.local_subdir_accessible = Some(local_subdir_accessible);
    self
  }

  pub fn local_subdir_accessible(&self) -> Option<&bool> {
    self.local_subdir_accessible.as_ref()
  }

  pub fn reset_local_subdir_accessible(&mut self) {
    self.local_subdir_accessible = None;
  }

  pub fn set_nfs_root_accessible(&mut self, nfs_root_accessible: bool) {
    self.nfs_root_accessible = Some(nfs_root_accessible);
  }

  pub fn with_nfs_root_accessible(mut self, nfs_root_accessible: bool) -> SnapshotSettingsExtended {
    self.nfs_root_accessible = Some(nfs_root_accessible);
    self
  }

  pub fn nfs_root_accessible(&self) -> Option<&bool> {
    self.nfs_root_accessible.as_ref()
  }

  pub fn reset_nfs_root_accessible(&mut self) {
    self.nfs_root_accessible = None;
  }

  pub fn set_nfs_root_visible(&mut self, nfs_root_visible: bool) {
    self.nfs_root_visible = Some(nfs_root_visible);
  }

  pub fn with_nfs_root_visible(mut self, nfs_root_visible: bool) -> SnapshotSettingsExtended {
    self.nfs_root_visible = Some(nfs_root_visible);
    self
  }

  pub fn nfs_root_visible(&self) -> Option<&bool> {
    self.nfs_root_visible.as_ref()
  }

  pub fn reset_nfs_root_visible(&mut self) {
    self.nfs_root_visible = None;
  }

  pub fn set_nfs_subdir_accessible(&mut self, nfs_subdir_accessible: bool) {
    self.nfs_subdir_accessible = Some(nfs_subdir_accessible);
  }

  pub fn with_nfs_subdir_accessible(mut self, nfs_subdir_accessible: bool) -> SnapshotSettingsExtended {
    self.nfs_subdir_accessible = Some(nfs_subdir_accessible);
    self
  }

  pub fn nfs_subdir_accessible(&self) -> Option<&bool> {
    self.nfs_subdir_accessible.as_ref()
  }

  pub fn reset_nfs_subdir_accessible(&mut self) {
    self.nfs_subdir_accessible = None;
  }

  pub fn set_reserve(&mut self, reserve: f32) {
    self.reserve = Some(reserve);
  }

  pub fn with_reserve(mut self, reserve: f32) -> SnapshotSettingsExtended {
    self.reserve = Some(reserve);
    self
  }

  pub fn reserve(&self) -> Option<&f32> {
    self.reserve.as_ref()
  }

  pub fn reset_reserve(&mut self) {
    self.reserve = None;
  }

  pub fn set_service(&mut self, service: bool) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: bool) -> SnapshotSettingsExtended {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&bool> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

  pub fn set_smb_root_accessible(&mut self, smb_root_accessible: bool) {
    self.smb_root_accessible = Some(smb_root_accessible);
  }

  pub fn with_smb_root_accessible(mut self, smb_root_accessible: bool) -> SnapshotSettingsExtended {
    self.smb_root_accessible = Some(smb_root_accessible);
    self
  }

  pub fn smb_root_accessible(&self) -> Option<&bool> {
    self.smb_root_accessible.as_ref()
  }

  pub fn reset_smb_root_accessible(&mut self) {
    self.smb_root_accessible = None;
  }

  pub fn set_smb_root_visible(&mut self, smb_root_visible: bool) {
    self.smb_root_visible = Some(smb_root_visible);
  }

  pub fn with_smb_root_visible(mut self, smb_root_visible: bool) -> SnapshotSettingsExtended {
    self.smb_root_visible = Some(smb_root_visible);
    self
  }

  pub fn smb_root_visible(&self) -> Option<&bool> {
    self.smb_root_visible.as_ref()
  }

  pub fn reset_smb_root_visible(&mut self) {
    self.smb_root_visible = None;
  }

  pub fn set_smb_subdir_accessible(&mut self, smb_subdir_accessible: bool) {
    self.smb_subdir_accessible = Some(smb_subdir_accessible);
  }

  pub fn with_smb_subdir_accessible(mut self, smb_subdir_accessible: bool) -> SnapshotSettingsExtended {
    self.smb_subdir_accessible = Some(smb_subdir_accessible);
    self
  }

  pub fn smb_subdir_accessible(&self) -> Option<&bool> {
    self.smb_subdir_accessible.as_ref()
  }

  pub fn reset_smb_subdir_accessible(&mut self) {
    self.smb_subdir_accessible = None;
  }

}



