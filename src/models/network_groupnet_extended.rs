/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NetworkGroupnetExtended {
  /// A description of the groupnet.
  #[serde(rename = "description")]
  description: Option<String>,
  /// DNS caching is enabled or disabled.
  #[serde(rename = "dns_cache_enabled")]
  dns_cache_enabled: Option<bool>,
  /// List of DNS resolver options.
  #[serde(rename = "dns_options")]
  dns_options: Option<Vec<String>>,
  /// List of DNS search suffixes.
  #[serde(rename = "dns_search")]
  dns_search: Option<Vec<String>>,
  /// List of Domain Name Server IP addresses.
  #[serde(rename = "dns_servers")]
  dns_servers: Option<Vec<String>>,
  /// The name of the groupnet.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.
  #[serde(rename = "server_side_dns_search")]
  server_side_dns_search: Option<bool>,
  /// Unique Interface ID.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Name of the subnets in the groupnet.
  #[serde(rename = "subnets")]
  subnets: Option<Vec<String>>
}

impl NetworkGroupnetExtended {
  pub fn new() -> NetworkGroupnetExtended {
    NetworkGroupnetExtended {
      description: None,
      dns_cache_enabled: None,
      dns_options: None,
      dns_search: None,
      dns_servers: None,
      name: None,
      server_side_dns_search: None,
      id: None,
      subnets: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> NetworkGroupnetExtended {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_dns_cache_enabled(&mut self, dns_cache_enabled: bool) {
    self.dns_cache_enabled = Some(dns_cache_enabled);
  }

  pub fn with_dns_cache_enabled(mut self, dns_cache_enabled: bool) -> NetworkGroupnetExtended {
    self.dns_cache_enabled = Some(dns_cache_enabled);
    self
  }

  pub fn dns_cache_enabled(&self) -> Option<&bool> {
    self.dns_cache_enabled.as_ref()
  }

  pub fn reset_dns_cache_enabled(&mut self) {
    self.dns_cache_enabled = None;
  }

  pub fn set_dns_options(&mut self, dns_options: Vec<String>) {
    self.dns_options = Some(dns_options);
  }

  pub fn with_dns_options(mut self, dns_options: Vec<String>) -> NetworkGroupnetExtended {
    self.dns_options = Some(dns_options);
    self
  }

  pub fn dns_options(&self) -> Option<&Vec<String>> {
    self.dns_options.as_ref()
  }

  pub fn reset_dns_options(&mut self) {
    self.dns_options = None;
  }

  pub fn set_dns_search(&mut self, dns_search: Vec<String>) {
    self.dns_search = Some(dns_search);
  }

  pub fn with_dns_search(mut self, dns_search: Vec<String>) -> NetworkGroupnetExtended {
    self.dns_search = Some(dns_search);
    self
  }

  pub fn dns_search(&self) -> Option<&Vec<String>> {
    self.dns_search.as_ref()
  }

  pub fn reset_dns_search(&mut self) {
    self.dns_search = None;
  }

  pub fn set_dns_servers(&mut self, dns_servers: Vec<String>) {
    self.dns_servers = Some(dns_servers);
  }

  pub fn with_dns_servers(mut self, dns_servers: Vec<String>) -> NetworkGroupnetExtended {
    self.dns_servers = Some(dns_servers);
    self
  }

  pub fn dns_servers(&self) -> Option<&Vec<String>> {
    self.dns_servers.as_ref()
  }

  pub fn reset_dns_servers(&mut self) {
    self.dns_servers = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NetworkGroupnetExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_server_side_dns_search(&mut self, server_side_dns_search: bool) {
    self.server_side_dns_search = Some(server_side_dns_search);
  }

  pub fn with_server_side_dns_search(mut self, server_side_dns_search: bool) -> NetworkGroupnetExtended {
    self.server_side_dns_search = Some(server_side_dns_search);
    self
  }

  pub fn server_side_dns_search(&self) -> Option<&bool> {
    self.server_side_dns_search.as_ref()
  }

  pub fn reset_server_side_dns_search(&mut self) {
    self.server_side_dns_search = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NetworkGroupnetExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_subnets(&mut self, subnets: Vec<String>) {
    self.subnets = Some(subnets);
  }

  pub fn with_subnets(mut self, subnets: Vec<String>) -> NetworkGroupnetExtended {
    self.subnets = Some(subnets);
    self
  }

  pub fn subnets(&self) -> Option<&Vec<String>> {
    self.subnets.as_ref()
  }

  pub fn reset_subnets(&mut self) {
    self.subnets = None;
  }

}



