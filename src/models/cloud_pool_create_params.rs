/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudPoolCreateParams {
  /// A list of valid names for the accounts in this pool.  There is currently only one account allowed per pool.
  #[serde(rename = "accounts")]
  accounts: Vec<String>,
  /// The guid of the cluster where this pool was created
  #[serde(rename = "birth_cluster_id")]
  birth_cluster_id: Option<String>,
  /// A brief description of this pool
  #[serde(rename = "description")]
  description: Option<String>,
  /// A unique name for this pool
  #[serde(rename = "name")]
  name: String,
  /// A string identifier of the cloud services vendor
  #[serde(rename = "vendor")]
  vendor: Option<String>,
  /// The type of cloud protocol required.  E.g., \"isilon\" for EMC Isilon, \"ecs\" for EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure and \"s3\" for Amazon S3
  #[serde(rename = "type")]
  _type: String
}

impl CloudPoolCreateParams {
  pub fn new(accounts: Vec<String>, name: String, _type: String) -> CloudPoolCreateParams {
    CloudPoolCreateParams {
      accounts: accounts,
      birth_cluster_id: None,
      description: None,
      name: name,
      vendor: None,
      _type: _type
    }
  }

  pub fn set_accounts(&mut self, accounts: Vec<String>) {
    self.accounts = accounts;
  }

  pub fn with_accounts(mut self, accounts: Vec<String>) -> CloudPoolCreateParams {
    self.accounts = accounts;
    self
  }

  pub fn accounts(&self) -> &Vec<String> {
    &self.accounts
  }


  pub fn set_birth_cluster_id(&mut self, birth_cluster_id: String) {
    self.birth_cluster_id = Some(birth_cluster_id);
  }

  pub fn with_birth_cluster_id(mut self, birth_cluster_id: String) -> CloudPoolCreateParams {
    self.birth_cluster_id = Some(birth_cluster_id);
    self
  }

  pub fn birth_cluster_id(&self) -> Option<&String> {
    self.birth_cluster_id.as_ref()
  }

  pub fn reset_birth_cluster_id(&mut self) {
    self.birth_cluster_id = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> CloudPoolCreateParams {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> CloudPoolCreateParams {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_vendor(&mut self, vendor: String) {
    self.vendor = Some(vendor);
  }

  pub fn with_vendor(mut self, vendor: String) -> CloudPoolCreateParams {
    self.vendor = Some(vendor);
    self
  }

  pub fn vendor(&self) -> Option<&String> {
    self.vendor.as_ref()
  }

  pub fn reset_vendor(&mut self) {
    self.vendor = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> CloudPoolCreateParams {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



