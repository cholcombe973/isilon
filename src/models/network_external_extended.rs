/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NetworkExternalExtended {
  /// Enable or disable Source Based Routing (Defaults to false)
  #[serde(rename = "sbr")]
  sbr: Option<bool>,
  /// Delay in seconds for IP rebalance.
  #[serde(rename = "sc_rebalance_delay")]
  sc_rebalance_delay: Option<i32>,
  /// List of client TCP ports.
  #[serde(rename = "tcp_ports")]
  tcp_ports: Option<Vec<i32>>
}

impl NetworkExternalExtended {
  pub fn new() -> NetworkExternalExtended {
    NetworkExternalExtended {
      sbr: None,
      sc_rebalance_delay: None,
      tcp_ports: None
    }
  }

  pub fn set_sbr(&mut self, sbr: bool) {
    self.sbr = Some(sbr);
  }

  pub fn with_sbr(mut self, sbr: bool) -> NetworkExternalExtended {
    self.sbr = Some(sbr);
    self
  }

  pub fn sbr(&self) -> Option<&bool> {
    self.sbr.as_ref()
  }

  pub fn reset_sbr(&mut self) {
    self.sbr = None;
  }

  pub fn set_sc_rebalance_delay(&mut self, sc_rebalance_delay: i32) {
    self.sc_rebalance_delay = Some(sc_rebalance_delay);
  }

  pub fn with_sc_rebalance_delay(mut self, sc_rebalance_delay: i32) -> NetworkExternalExtended {
    self.sc_rebalance_delay = Some(sc_rebalance_delay);
    self
  }

  pub fn sc_rebalance_delay(&self) -> Option<&i32> {
    self.sc_rebalance_delay.as_ref()
  }

  pub fn reset_sc_rebalance_delay(&mut self) {
    self.sc_rebalance_delay = None;
  }

  pub fn set_tcp_ports(&mut self, tcp_ports: Vec<i32>) {
    self.tcp_ports = Some(tcp_ports);
  }

  pub fn with_tcp_ports(mut self, tcp_ports: Vec<i32>) -> NetworkExternalExtended {
    self.tcp_ports = Some(tcp_ports);
    self
  }

  pub fn tcp_ports(&self) -> Option<&Vec<i32>> {
    self.tcp_ports.as_ref()
  }

  pub fn reset_tcp_ports(&mut self) {
    self.tcp_ports = None;
  }

}



