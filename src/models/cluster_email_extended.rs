/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterEmailExtended : Cluster email notification settings.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterEmailExtended {
  /// This setting determines how notifications will be batched together to be sent by email.  'none' means each notification will be sent separately.  'severity' means notifications of the same severity will be sent together.  'category' means notifications of the same category will be sent together.  'all' means all notifications will be batched together and sent in a single email.
  #[serde(rename = "batch_mode")]
  batch_mode: Option<String>,
  /// The address of the SMTP server to be used for relaying the notification messages.  An SMTP server is required in order to send notifications.  If this string is empty, no emails will be sent.
  #[serde(rename = "mail_relay")]
  mail_relay: Option<String>,
  /// The full email address that will appear as the sender of notification messages.
  #[serde(rename = "mail_sender")]
  mail_sender: Option<String>,
  /// The subject line for notification messages from this cluster.
  #[serde(rename = "mail_subject")]
  mail_subject: Option<String>,
  /// Password to authenticate with if SMTP authentication is being used.
  #[serde(rename = "smtp_auth_passwd")]
  smtp_auth_passwd: Option<String>,
  /// The type of secure communication protocol to use if SMTP is being used.  If 'none', plain text will be used, if 'starttls', the encrypted STARTTLS protocol will be used.
  #[serde(rename = "smtp_auth_security")]
  smtp_auth_security: Option<String>,
  /// Username to authenticate with if SMTP authentication is being used.
  #[serde(rename = "smtp_auth_username")]
  smtp_auth_username: Option<String>,
  /// The port on the SMTP server to be used for relaying the notification messages.  
  #[serde(rename = "smtp_port")]
  smtp_port: Option<i32>,
  /// If true, this cluster will send SMTP authentication credentials to the SMTP relay server in order to send its notification emails.  If false, the cluster will attempt to send its notification emails without authentication.
  #[serde(rename = "use_smtp_auth")]
  use_smtp_auth: Option<bool>,
  /// Location of a custom template file that can be used to specify the layout of the notification emails.
  #[serde(rename = "user_template")]
  user_template: Option<String>
}

impl ClusterEmailExtended {
  /// Cluster email notification settings.
  pub fn new() -> ClusterEmailExtended {
    ClusterEmailExtended {
      batch_mode: None,
      mail_relay: None,
      mail_sender: None,
      mail_subject: None,
      smtp_auth_passwd: None,
      smtp_auth_security: None,
      smtp_auth_username: None,
      smtp_port: None,
      use_smtp_auth: None,
      user_template: None
    }
  }

  pub fn set_batch_mode(&mut self, batch_mode: String) {
    self.batch_mode = Some(batch_mode);
  }

  pub fn with_batch_mode(mut self, batch_mode: String) -> ClusterEmailExtended {
    self.batch_mode = Some(batch_mode);
    self
  }

  pub fn batch_mode(&self) -> Option<&String> {
    self.batch_mode.as_ref()
  }

  pub fn reset_batch_mode(&mut self) {
    self.batch_mode = None;
  }

  pub fn set_mail_relay(&mut self, mail_relay: String) {
    self.mail_relay = Some(mail_relay);
  }

  pub fn with_mail_relay(mut self, mail_relay: String) -> ClusterEmailExtended {
    self.mail_relay = Some(mail_relay);
    self
  }

  pub fn mail_relay(&self) -> Option<&String> {
    self.mail_relay.as_ref()
  }

  pub fn reset_mail_relay(&mut self) {
    self.mail_relay = None;
  }

  pub fn set_mail_sender(&mut self, mail_sender: String) {
    self.mail_sender = Some(mail_sender);
  }

  pub fn with_mail_sender(mut self, mail_sender: String) -> ClusterEmailExtended {
    self.mail_sender = Some(mail_sender);
    self
  }

  pub fn mail_sender(&self) -> Option<&String> {
    self.mail_sender.as_ref()
  }

  pub fn reset_mail_sender(&mut self) {
    self.mail_sender = None;
  }

  pub fn set_mail_subject(&mut self, mail_subject: String) {
    self.mail_subject = Some(mail_subject);
  }

  pub fn with_mail_subject(mut self, mail_subject: String) -> ClusterEmailExtended {
    self.mail_subject = Some(mail_subject);
    self
  }

  pub fn mail_subject(&self) -> Option<&String> {
    self.mail_subject.as_ref()
  }

  pub fn reset_mail_subject(&mut self) {
    self.mail_subject = None;
  }

  pub fn set_smtp_auth_passwd(&mut self, smtp_auth_passwd: String) {
    self.smtp_auth_passwd = Some(smtp_auth_passwd);
  }

  pub fn with_smtp_auth_passwd(mut self, smtp_auth_passwd: String) -> ClusterEmailExtended {
    self.smtp_auth_passwd = Some(smtp_auth_passwd);
    self
  }

  pub fn smtp_auth_passwd(&self) -> Option<&String> {
    self.smtp_auth_passwd.as_ref()
  }

  pub fn reset_smtp_auth_passwd(&mut self) {
    self.smtp_auth_passwd = None;
  }

  pub fn set_smtp_auth_security(&mut self, smtp_auth_security: String) {
    self.smtp_auth_security = Some(smtp_auth_security);
  }

  pub fn with_smtp_auth_security(mut self, smtp_auth_security: String) -> ClusterEmailExtended {
    self.smtp_auth_security = Some(smtp_auth_security);
    self
  }

  pub fn smtp_auth_security(&self) -> Option<&String> {
    self.smtp_auth_security.as_ref()
  }

  pub fn reset_smtp_auth_security(&mut self) {
    self.smtp_auth_security = None;
  }

  pub fn set_smtp_auth_username(&mut self, smtp_auth_username: String) {
    self.smtp_auth_username = Some(smtp_auth_username);
  }

  pub fn with_smtp_auth_username(mut self, smtp_auth_username: String) -> ClusterEmailExtended {
    self.smtp_auth_username = Some(smtp_auth_username);
    self
  }

  pub fn smtp_auth_username(&self) -> Option<&String> {
    self.smtp_auth_username.as_ref()
  }

  pub fn reset_smtp_auth_username(&mut self) {
    self.smtp_auth_username = None;
  }

  pub fn set_smtp_port(&mut self, smtp_port: i32) {
    self.smtp_port = Some(smtp_port);
  }

  pub fn with_smtp_port(mut self, smtp_port: i32) -> ClusterEmailExtended {
    self.smtp_port = Some(smtp_port);
    self
  }

  pub fn smtp_port(&self) -> Option<&i32> {
    self.smtp_port.as_ref()
  }

  pub fn reset_smtp_port(&mut self) {
    self.smtp_port = None;
  }

  pub fn set_use_smtp_auth(&mut self, use_smtp_auth: bool) {
    self.use_smtp_auth = Some(use_smtp_auth);
  }

  pub fn with_use_smtp_auth(mut self, use_smtp_auth: bool) -> ClusterEmailExtended {
    self.use_smtp_auth = Some(use_smtp_auth);
    self
  }

  pub fn use_smtp_auth(&self) -> Option<&bool> {
    self.use_smtp_auth.as_ref()
  }

  pub fn reset_use_smtp_auth(&mut self) {
    self.use_smtp_auth = None;
  }

  pub fn set_user_template(&mut self, user_template: String) {
    self.user_template = Some(user_template);
  }

  pub fn with_user_template(mut self, user_template: String) -> ClusterEmailExtended {
    self.user_template = Some(user_template);
    self
  }

  pub fn user_template(&self) -> Option<&String> {
    self.user_template.as_ref()
  }

  pub fn reset_user_template(&mut self) {
    self.user_template = None;
  }

}



