/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterNodeState {
  /// Node readonly state.
  #[serde(rename = "readonly")]
  readonly: Option<::models::Empty>,
  /// Node service light state.
  #[serde(rename = "servicelight")]
  servicelight: Option<::models::ClusterNodeStateServicelight>,
  /// Node smartfail state.
  #[serde(rename = "smartfail")]
  smartfail: Option<::models::ClusterNodeStateSmartfail>
}

impl ClusterNodeState {
  pub fn new() -> ClusterNodeState {
    ClusterNodeState {
      readonly: None,
      servicelight: None,
      smartfail: None
    }
  }

  pub fn set_readonly(&mut self, readonly: ::models::Empty) {
    self.readonly = Some(readonly);
  }

  pub fn with_readonly(mut self, readonly: ::models::Empty) -> ClusterNodeState {
    self.readonly = Some(readonly);
    self
  }

  pub fn readonly(&self) -> Option<&::models::Empty> {
    self.readonly.as_ref()
  }

  pub fn reset_readonly(&mut self) {
    self.readonly = None;
  }

  pub fn set_servicelight(&mut self, servicelight: ::models::ClusterNodeStateServicelight) {
    self.servicelight = Some(servicelight);
  }

  pub fn with_servicelight(mut self, servicelight: ::models::ClusterNodeStateServicelight) -> ClusterNodeState {
    self.servicelight = Some(servicelight);
    self
  }

  pub fn servicelight(&self) -> Option<&::models::ClusterNodeStateServicelight> {
    self.servicelight.as_ref()
  }

  pub fn reset_servicelight(&mut self) {
    self.servicelight = None;
  }

  pub fn set_smartfail(&mut self, smartfail: ::models::ClusterNodeStateSmartfail) {
    self.smartfail = Some(smartfail);
  }

  pub fn with_smartfail(mut self, smartfail: ::models::ClusterNodeStateSmartfail) -> ClusterNodeState {
    self.smartfail = Some(smartfail);
    self
  }

  pub fn smartfail(&self) -> Option<&::models::ClusterNodeStateSmartfail> {
    self.smartfail.as_ref()
  }

  pub fn reset_smartfail(&mut self) {
    self.smartfail = None;
  }

}



