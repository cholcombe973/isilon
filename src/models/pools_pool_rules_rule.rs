/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PoolsPoolRulesRule {
  /// Description for the provisioning rule.
  #[serde(rename = "description")]
  description: String,
  /// Name of the groupnet this rule belongs to
  #[serde(rename = "groupnet")]
  groupnet: String,
  /// Unique rule ID.
  #[serde(rename = "id")]
  id: String,
  /// Interface name the provisioning rule applies to.
  #[serde(rename = "iface")]
  iface: String,
  /// Name of the provisioning rule.
  #[serde(rename = "name")]
  name: String,
  /// Node type the provisioning rule applies to.
  #[serde(rename = "node_type")]
  node_type: String,
  /// Name of the pool this rule belongs to.
  #[serde(rename = "pool")]
  pool: String,
  /// Name of the subnet this rule belongs to.
  #[serde(rename = "subnet")]
  subnet: String
}

impl PoolsPoolRulesRule {
  pub fn new(description: String, groupnet: String, id: String, iface: String, name: String, node_type: String, pool: String, subnet: String) -> PoolsPoolRulesRule {
    PoolsPoolRulesRule {
      description: description,
      groupnet: groupnet,
      id: id,
      iface: iface,
      name: name,
      node_type: node_type,
      pool: pool,
      subnet: subnet
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> PoolsPoolRulesRule {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_groupnet(&mut self, groupnet: String) {
    self.groupnet = groupnet;
  }

  pub fn with_groupnet(mut self, groupnet: String) -> PoolsPoolRulesRule {
    self.groupnet = groupnet;
    self
  }

  pub fn groupnet(&self) -> &String {
    &self.groupnet
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> PoolsPoolRulesRule {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_iface(&mut self, iface: String) {
    self.iface = iface;
  }

  pub fn with_iface(mut self, iface: String) -> PoolsPoolRulesRule {
    self.iface = iface;
    self
  }

  pub fn iface(&self) -> &String {
    &self.iface
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> PoolsPoolRulesRule {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_node_type(&mut self, node_type: String) {
    self.node_type = node_type;
  }

  pub fn with_node_type(mut self, node_type: String) -> PoolsPoolRulesRule {
    self.node_type = node_type;
    self
  }

  pub fn node_type(&self) -> &String {
    &self.node_type
  }


  pub fn set_pool(&mut self, pool: String) {
    self.pool = pool;
  }

  pub fn with_pool(mut self, pool: String) -> PoolsPoolRulesRule {
    self.pool = pool;
    self
  }

  pub fn pool(&self) -> &String {
    &self.pool
  }


  pub fn set_subnet(&mut self, subnet: String) {
    self.subnet = subnet;
  }

  pub fn with_subnet(mut self, subnet: String) -> PoolsPoolRulesRule {
    self.subnet = subnet;
    self
  }

  pub fn subnet(&self) -> &String {
    &self.subnet
  }


}



