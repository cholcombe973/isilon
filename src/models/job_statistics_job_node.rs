/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobStatisticsJobNode {
  /// 
  #[serde(rename = "cpu")]
  cpu: ::models::JobStatisticsJobNodeCpu,
  /// 
  #[serde(rename = "io")]
  io: ::models::JobStatisticsJobNodeIo,
  /// 
  #[serde(rename = "memory")]
  memory: ::models::JobStatisticsJobNodeMemory,
  /// The devid of the node.
  #[serde(rename = "node")]
  node: i32,
  /// The process ID of the job on this node.
  #[serde(rename = "pid")]
  pid: i32,
  /// The number of workers for this job on this node.
  #[serde(rename = "total_workers")]
  total_workers: i32,
  #[serde(rename = "workers")]
  workers: Vec<::models::JobStatisticsJobNodeWorker>
}

impl JobStatisticsJobNode {
  pub fn new(cpu: ::models::JobStatisticsJobNodeCpu, io: ::models::JobStatisticsJobNodeIo, memory: ::models::JobStatisticsJobNodeMemory, node: i32, pid: i32, total_workers: i32, workers: Vec<::models::JobStatisticsJobNodeWorker>) -> JobStatisticsJobNode {
    JobStatisticsJobNode {
      cpu: cpu,
      io: io,
      memory: memory,
      node: node,
      pid: pid,
      total_workers: total_workers,
      workers: workers
    }
  }

  pub fn set_cpu(&mut self, cpu: ::models::JobStatisticsJobNodeCpu) {
    self.cpu = cpu;
  }

  pub fn with_cpu(mut self, cpu: ::models::JobStatisticsJobNodeCpu) -> JobStatisticsJobNode {
    self.cpu = cpu;
    self
  }

  pub fn cpu(&self) -> &::models::JobStatisticsJobNodeCpu {
    &self.cpu
  }


  pub fn set_io(&mut self, io: ::models::JobStatisticsJobNodeIo) {
    self.io = io;
  }

  pub fn with_io(mut self, io: ::models::JobStatisticsJobNodeIo) -> JobStatisticsJobNode {
    self.io = io;
    self
  }

  pub fn io(&self) -> &::models::JobStatisticsJobNodeIo {
    &self.io
  }


  pub fn set_memory(&mut self, memory: ::models::JobStatisticsJobNodeMemory) {
    self.memory = memory;
  }

  pub fn with_memory(mut self, memory: ::models::JobStatisticsJobNodeMemory) -> JobStatisticsJobNode {
    self.memory = memory;
    self
  }

  pub fn memory(&self) -> &::models::JobStatisticsJobNodeMemory {
    &self.memory
  }


  pub fn set_node(&mut self, node: i32) {
    self.node = node;
  }

  pub fn with_node(mut self, node: i32) -> JobStatisticsJobNode {
    self.node = node;
    self
  }

  pub fn node(&self) -> &i32 {
    &self.node
  }


  pub fn set_pid(&mut self, pid: i32) {
    self.pid = pid;
  }

  pub fn with_pid(mut self, pid: i32) -> JobStatisticsJobNode {
    self.pid = pid;
    self
  }

  pub fn pid(&self) -> &i32 {
    &self.pid
  }


  pub fn set_total_workers(&mut self, total_workers: i32) {
    self.total_workers = total_workers;
  }

  pub fn with_total_workers(mut self, total_workers: i32) -> JobStatisticsJobNode {
    self.total_workers = total_workers;
    self
  }

  pub fn total_workers(&self) -> &i32 {
    &self.total_workers
  }


  pub fn set_workers(&mut self, workers: Vec<::models::JobStatisticsJobNodeWorker>) {
    self.workers = workers;
  }

  pub fn with_workers(mut self, workers: Vec<::models::JobStatisticsJobNodeWorker>) -> JobStatisticsJobNode {
    self.workers = workers;
    self
  }

  pub fn workers(&self) -> &Vec<::models::JobStatisticsJobNodeWorker> {
    &self.workers
  }


}



