/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthLdapTemplatesLdapConfigurationTemplate {
  /// Specifies canonical name.
  #[serde(rename = "cn_attribute")]
  cn_attribute: Option<String>,
  /// Sets hashed password value.
  #[serde(rename = "crypt_password_attribute")]
  crypt_password_attribute: Option<String>,
  /// Sets the LDAP Email attribute.
  #[serde(rename = "email_attribute")]
  email_attribute: Option<String>,
  /// Sets the LDAP GECOS attribute.
  #[serde(rename = "gecos_attribute")]
  gecos_attribute: Option<String>,
  /// Sets the LDAP GID attribute.
  #[serde(rename = "gid_attribute")]
  gid_attribute: Option<String>,
  /// Sets LDAP filter for group objects.
  #[serde(rename = "group_filter")]
  group_filter: Option<String>,
  /// Sets the LDAP Group Members attribute.
  #[serde(rename = "group_members_attribute")]
  group_members_attribute: Option<String>,
  /// Sets the LDAP Homedir attribute.
  #[serde(rename = "homedir_attribute")]
  homedir_attribute: Option<String>,
  /// Specifies the ID of the LDAP provider field template.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Sets the LDAP UID attribute, which is used as the login name.
  #[serde(rename = "name_attribute")]
  name_attribute: Option<String>,
  /// Sets LDAP filter for netgroup objects.
  #[serde(rename = "netgroup_filter")]
  netgroup_filter: Option<String>,
  /// Sets the LDAP Netgroup Members attribute.
  #[serde(rename = "netgroup_members_attribute")]
  netgroup_members_attribute: Option<String>,
  /// Sets the LDAP Netgroup Triple attribute.
  #[serde(rename = "netgroup_triple_attribute")]
  netgroup_triple_attribute: Option<String>,
  /// Sets the LDAP NT Password attribute.
  #[serde(rename = "nt_password_attribute")]
  nt_password_attribute: Option<String>,
  /// Sets the absolute date to expire the account.
  #[serde(rename = "shadow_expire_attribute")]
  shadow_expire_attribute: Option<String>,
  /// Sets the section of the shadow map that is used to store the flag value.
  #[serde(rename = "shadow_flag_attribute")]
  shadow_flag_attribute: Option<String>,
  /// Sets the number of days of inactivity that is allowed for the user.
  #[serde(rename = "shadow_inactive_attribute")]
  shadow_inactive_attribute: Option<String>,
  /// Sets the last change of the shadow information.
  #[serde(rename = "shadow_last_change_attribute")]
  shadow_last_change_attribute: Option<String>,
  /// Sets the maximum number of days a password can be valid.
  #[serde(rename = "shadow_max_attribute")]
  shadow_max_attribute: Option<String>,
  /// Sets the minimum number of days between shadow changes.
  #[serde(rename = "shadow_min_attribute")]
  shadow_min_attribute: Option<String>,
  /// Sets LDAP filter for shadow user objects.
  #[serde(rename = "shadow_user_filter")]
  shadow_user_filter: Option<String>,
  /// Sets the number of days before the password expires to warn the user.
  #[serde(rename = "shadow_warning_attribute")]
  shadow_warning_attribute: Option<String>,
  /// Sets the LDAP Shell attribute.
  #[serde(rename = "shell_attribute")]
  shell_attribute: Option<String>,
  /// Sets the LDAP UID Number attribute.
  #[serde(rename = "uid_attribute")]
  uid_attribute: Option<String>,
  /// Sets the LDAP Unique Group Members attribute.
  #[serde(rename = "unique_group_members_attribute")]
  unique_group_members_attribute: Option<String>,
  /// Sets LDAP filter for user objects.
  #[serde(rename = "user_filter")]
  user_filter: Option<String>
}

impl AuthLdapTemplatesLdapConfigurationTemplate {
  pub fn new() -> AuthLdapTemplatesLdapConfigurationTemplate {
    AuthLdapTemplatesLdapConfigurationTemplate {
      cn_attribute: None,
      crypt_password_attribute: None,
      email_attribute: None,
      gecos_attribute: None,
      gid_attribute: None,
      group_filter: None,
      group_members_attribute: None,
      homedir_attribute: None,
      id: None,
      name_attribute: None,
      netgroup_filter: None,
      netgroup_members_attribute: None,
      netgroup_triple_attribute: None,
      nt_password_attribute: None,
      shadow_expire_attribute: None,
      shadow_flag_attribute: None,
      shadow_inactive_attribute: None,
      shadow_last_change_attribute: None,
      shadow_max_attribute: None,
      shadow_min_attribute: None,
      shadow_user_filter: None,
      shadow_warning_attribute: None,
      shell_attribute: None,
      uid_attribute: None,
      unique_group_members_attribute: None,
      user_filter: None
    }
  }

  pub fn set_cn_attribute(&mut self, cn_attribute: String) {
    self.cn_attribute = Some(cn_attribute);
  }

  pub fn with_cn_attribute(mut self, cn_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.cn_attribute = Some(cn_attribute);
    self
  }

  pub fn cn_attribute(&self) -> Option<&String> {
    self.cn_attribute.as_ref()
  }

  pub fn reset_cn_attribute(&mut self) {
    self.cn_attribute = None;
  }

  pub fn set_crypt_password_attribute(&mut self, crypt_password_attribute: String) {
    self.crypt_password_attribute = Some(crypt_password_attribute);
  }

  pub fn with_crypt_password_attribute(mut self, crypt_password_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.crypt_password_attribute = Some(crypt_password_attribute);
    self
  }

  pub fn crypt_password_attribute(&self) -> Option<&String> {
    self.crypt_password_attribute.as_ref()
  }

  pub fn reset_crypt_password_attribute(&mut self) {
    self.crypt_password_attribute = None;
  }

  pub fn set_email_attribute(&mut self, email_attribute: String) {
    self.email_attribute = Some(email_attribute);
  }

  pub fn with_email_attribute(mut self, email_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.email_attribute = Some(email_attribute);
    self
  }

  pub fn email_attribute(&self) -> Option<&String> {
    self.email_attribute.as_ref()
  }

  pub fn reset_email_attribute(&mut self) {
    self.email_attribute = None;
  }

  pub fn set_gecos_attribute(&mut self, gecos_attribute: String) {
    self.gecos_attribute = Some(gecos_attribute);
  }

  pub fn with_gecos_attribute(mut self, gecos_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.gecos_attribute = Some(gecos_attribute);
    self
  }

  pub fn gecos_attribute(&self) -> Option<&String> {
    self.gecos_attribute.as_ref()
  }

  pub fn reset_gecos_attribute(&mut self) {
    self.gecos_attribute = None;
  }

  pub fn set_gid_attribute(&mut self, gid_attribute: String) {
    self.gid_attribute = Some(gid_attribute);
  }

  pub fn with_gid_attribute(mut self, gid_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.gid_attribute = Some(gid_attribute);
    self
  }

  pub fn gid_attribute(&self) -> Option<&String> {
    self.gid_attribute.as_ref()
  }

  pub fn reset_gid_attribute(&mut self) {
    self.gid_attribute = None;
  }

  pub fn set_group_filter(&mut self, group_filter: String) {
    self.group_filter = Some(group_filter);
  }

  pub fn with_group_filter(mut self, group_filter: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.group_filter = Some(group_filter);
    self
  }

  pub fn group_filter(&self) -> Option<&String> {
    self.group_filter.as_ref()
  }

  pub fn reset_group_filter(&mut self) {
    self.group_filter = None;
  }

  pub fn set_group_members_attribute(&mut self, group_members_attribute: String) {
    self.group_members_attribute = Some(group_members_attribute);
  }

  pub fn with_group_members_attribute(mut self, group_members_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.group_members_attribute = Some(group_members_attribute);
    self
  }

  pub fn group_members_attribute(&self) -> Option<&String> {
    self.group_members_attribute.as_ref()
  }

  pub fn reset_group_members_attribute(&mut self) {
    self.group_members_attribute = None;
  }

  pub fn set_homedir_attribute(&mut self, homedir_attribute: String) {
    self.homedir_attribute = Some(homedir_attribute);
  }

  pub fn with_homedir_attribute(mut self, homedir_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.homedir_attribute = Some(homedir_attribute);
    self
  }

  pub fn homedir_attribute(&self) -> Option<&String> {
    self.homedir_attribute.as_ref()
  }

  pub fn reset_homedir_attribute(&mut self) {
    self.homedir_attribute = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name_attribute(&mut self, name_attribute: String) {
    self.name_attribute = Some(name_attribute);
  }

  pub fn with_name_attribute(mut self, name_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.name_attribute = Some(name_attribute);
    self
  }

  pub fn name_attribute(&self) -> Option<&String> {
    self.name_attribute.as_ref()
  }

  pub fn reset_name_attribute(&mut self) {
    self.name_attribute = None;
  }

  pub fn set_netgroup_filter(&mut self, netgroup_filter: String) {
    self.netgroup_filter = Some(netgroup_filter);
  }

  pub fn with_netgroup_filter(mut self, netgroup_filter: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.netgroup_filter = Some(netgroup_filter);
    self
  }

  pub fn netgroup_filter(&self) -> Option<&String> {
    self.netgroup_filter.as_ref()
  }

  pub fn reset_netgroup_filter(&mut self) {
    self.netgroup_filter = None;
  }

  pub fn set_netgroup_members_attribute(&mut self, netgroup_members_attribute: String) {
    self.netgroup_members_attribute = Some(netgroup_members_attribute);
  }

  pub fn with_netgroup_members_attribute(mut self, netgroup_members_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.netgroup_members_attribute = Some(netgroup_members_attribute);
    self
  }

  pub fn netgroup_members_attribute(&self) -> Option<&String> {
    self.netgroup_members_attribute.as_ref()
  }

  pub fn reset_netgroup_members_attribute(&mut self) {
    self.netgroup_members_attribute = None;
  }

  pub fn set_netgroup_triple_attribute(&mut self, netgroup_triple_attribute: String) {
    self.netgroup_triple_attribute = Some(netgroup_triple_attribute);
  }

  pub fn with_netgroup_triple_attribute(mut self, netgroup_triple_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.netgroup_triple_attribute = Some(netgroup_triple_attribute);
    self
  }

  pub fn netgroup_triple_attribute(&self) -> Option<&String> {
    self.netgroup_triple_attribute.as_ref()
  }

  pub fn reset_netgroup_triple_attribute(&mut self) {
    self.netgroup_triple_attribute = None;
  }

  pub fn set_nt_password_attribute(&mut self, nt_password_attribute: String) {
    self.nt_password_attribute = Some(nt_password_attribute);
  }

  pub fn with_nt_password_attribute(mut self, nt_password_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.nt_password_attribute = Some(nt_password_attribute);
    self
  }

  pub fn nt_password_attribute(&self) -> Option<&String> {
    self.nt_password_attribute.as_ref()
  }

  pub fn reset_nt_password_attribute(&mut self) {
    self.nt_password_attribute = None;
  }

  pub fn set_shadow_expire_attribute(&mut self, shadow_expire_attribute: String) {
    self.shadow_expire_attribute = Some(shadow_expire_attribute);
  }

  pub fn with_shadow_expire_attribute(mut self, shadow_expire_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_expire_attribute = Some(shadow_expire_attribute);
    self
  }

  pub fn shadow_expire_attribute(&self) -> Option<&String> {
    self.shadow_expire_attribute.as_ref()
  }

  pub fn reset_shadow_expire_attribute(&mut self) {
    self.shadow_expire_attribute = None;
  }

  pub fn set_shadow_flag_attribute(&mut self, shadow_flag_attribute: String) {
    self.shadow_flag_attribute = Some(shadow_flag_attribute);
  }

  pub fn with_shadow_flag_attribute(mut self, shadow_flag_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_flag_attribute = Some(shadow_flag_attribute);
    self
  }

  pub fn shadow_flag_attribute(&self) -> Option<&String> {
    self.shadow_flag_attribute.as_ref()
  }

  pub fn reset_shadow_flag_attribute(&mut self) {
    self.shadow_flag_attribute = None;
  }

  pub fn set_shadow_inactive_attribute(&mut self, shadow_inactive_attribute: String) {
    self.shadow_inactive_attribute = Some(shadow_inactive_attribute);
  }

  pub fn with_shadow_inactive_attribute(mut self, shadow_inactive_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_inactive_attribute = Some(shadow_inactive_attribute);
    self
  }

  pub fn shadow_inactive_attribute(&self) -> Option<&String> {
    self.shadow_inactive_attribute.as_ref()
  }

  pub fn reset_shadow_inactive_attribute(&mut self) {
    self.shadow_inactive_attribute = None;
  }

  pub fn set_shadow_last_change_attribute(&mut self, shadow_last_change_attribute: String) {
    self.shadow_last_change_attribute = Some(shadow_last_change_attribute);
  }

  pub fn with_shadow_last_change_attribute(mut self, shadow_last_change_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_last_change_attribute = Some(shadow_last_change_attribute);
    self
  }

  pub fn shadow_last_change_attribute(&self) -> Option<&String> {
    self.shadow_last_change_attribute.as_ref()
  }

  pub fn reset_shadow_last_change_attribute(&mut self) {
    self.shadow_last_change_attribute = None;
  }

  pub fn set_shadow_max_attribute(&mut self, shadow_max_attribute: String) {
    self.shadow_max_attribute = Some(shadow_max_attribute);
  }

  pub fn with_shadow_max_attribute(mut self, shadow_max_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_max_attribute = Some(shadow_max_attribute);
    self
  }

  pub fn shadow_max_attribute(&self) -> Option<&String> {
    self.shadow_max_attribute.as_ref()
  }

  pub fn reset_shadow_max_attribute(&mut self) {
    self.shadow_max_attribute = None;
  }

  pub fn set_shadow_min_attribute(&mut self, shadow_min_attribute: String) {
    self.shadow_min_attribute = Some(shadow_min_attribute);
  }

  pub fn with_shadow_min_attribute(mut self, shadow_min_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_min_attribute = Some(shadow_min_attribute);
    self
  }

  pub fn shadow_min_attribute(&self) -> Option<&String> {
    self.shadow_min_attribute.as_ref()
  }

  pub fn reset_shadow_min_attribute(&mut self) {
    self.shadow_min_attribute = None;
  }

  pub fn set_shadow_user_filter(&mut self, shadow_user_filter: String) {
    self.shadow_user_filter = Some(shadow_user_filter);
  }

  pub fn with_shadow_user_filter(mut self, shadow_user_filter: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_user_filter = Some(shadow_user_filter);
    self
  }

  pub fn shadow_user_filter(&self) -> Option<&String> {
    self.shadow_user_filter.as_ref()
  }

  pub fn reset_shadow_user_filter(&mut self) {
    self.shadow_user_filter = None;
  }

  pub fn set_shadow_warning_attribute(&mut self, shadow_warning_attribute: String) {
    self.shadow_warning_attribute = Some(shadow_warning_attribute);
  }

  pub fn with_shadow_warning_attribute(mut self, shadow_warning_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shadow_warning_attribute = Some(shadow_warning_attribute);
    self
  }

  pub fn shadow_warning_attribute(&self) -> Option<&String> {
    self.shadow_warning_attribute.as_ref()
  }

  pub fn reset_shadow_warning_attribute(&mut self) {
    self.shadow_warning_attribute = None;
  }

  pub fn set_shell_attribute(&mut self, shell_attribute: String) {
    self.shell_attribute = Some(shell_attribute);
  }

  pub fn with_shell_attribute(mut self, shell_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.shell_attribute = Some(shell_attribute);
    self
  }

  pub fn shell_attribute(&self) -> Option<&String> {
    self.shell_attribute.as_ref()
  }

  pub fn reset_shell_attribute(&mut self) {
    self.shell_attribute = None;
  }

  pub fn set_uid_attribute(&mut self, uid_attribute: String) {
    self.uid_attribute = Some(uid_attribute);
  }

  pub fn with_uid_attribute(mut self, uid_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.uid_attribute = Some(uid_attribute);
    self
  }

  pub fn uid_attribute(&self) -> Option<&String> {
    self.uid_attribute.as_ref()
  }

  pub fn reset_uid_attribute(&mut self) {
    self.uid_attribute = None;
  }

  pub fn set_unique_group_members_attribute(&mut self, unique_group_members_attribute: String) {
    self.unique_group_members_attribute = Some(unique_group_members_attribute);
  }

  pub fn with_unique_group_members_attribute(mut self, unique_group_members_attribute: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.unique_group_members_attribute = Some(unique_group_members_attribute);
    self
  }

  pub fn unique_group_members_attribute(&self) -> Option<&String> {
    self.unique_group_members_attribute.as_ref()
  }

  pub fn reset_unique_group_members_attribute(&mut self) {
    self.unique_group_members_attribute = None;
  }

  pub fn set_user_filter(&mut self, user_filter: String) {
    self.user_filter = Some(user_filter);
  }

  pub fn with_user_filter(mut self, user_filter: String) -> AuthLdapTemplatesLdapConfigurationTemplate {
    self.user_filter = Some(user_filter);
    self
  }

  pub fn user_filter(&self) -> Option<&String> {
    self.user_filter.as_ref()
  }

  pub fn reset_user_filter(&mut self) {
    self.user_filter = None;
  }

}



