/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterNodePartitions {
  /// Count of how many partitions are included.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// Partition information.
  #[serde(rename = "partitions")]
  partitions: Option<Vec<::models::NodePartitionsNodePartition>>
}

impl ClusterNodePartitions {
  pub fn new() -> ClusterNodePartitions {
    ClusterNodePartitions {
      count: None,
      partitions: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> ClusterNodePartitions {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_partitions(&mut self, partitions: Vec<::models::NodePartitionsNodePartition>) {
    self.partitions = Some(partitions);
  }

  pub fn with_partitions(mut self, partitions: Vec<::models::NodePartitionsNodePartition>) -> ClusterNodePartitions {
    self.partitions = Some(partitions);
    self
  }

  pub fn partitions(&self) -> Option<&Vec<::models::NodePartitionsNodePartition>> {
    self.partitions.as_ref()
  }

  pub fn reset_partitions(&mut self) {
    self.partitions = None;
  }

}



