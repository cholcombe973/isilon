/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterStatfs : Filesystem statistics

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterStatfs {
  /// The number of free blocks available to non-superuser.
  #[serde(rename = "f_bavail")]
  f_bavail: i32,
  /// The number of free blocks in the filesystem.
  #[serde(rename = "f_bfree")]
  f_bfree: i32,
  /// The total number of data blocks in the filesystem.
  #[serde(rename = "f_blocks")]
  f_blocks: i32,
  /// The filesystem fragment size.
  #[serde(rename = "f_bsize")]
  f_bsize: i32,
  /// The number of free nodes available to non-superuser.
  #[serde(rename = "f_ffree")]
  f_ffree: i32,
  /// The total number of file nodes in the filesystem.
  #[serde(rename = "f_files")]
  f_files: i32,
  /// A copy of the mount exported flags.
  #[serde(rename = "f_flags")]
  f_flags: i32,
  /// The filesystem type name.
  #[serde(rename = "f_fstypename")]
  f_fstypename: String,
  /// The optimal transfer block size.
  #[serde(rename = "f_iosize")]
  f_iosize: i32,
  /// The name of the mounted filesystem.
  #[serde(rename = "f_mntfromname")]
  f_mntfromname: String,
  /// The directory that the filesystem is mounted on.
  #[serde(rename = "f_mntonname")]
  f_mntonname: String,
  /// The maximum length of a file name.
  #[serde(rename = "f_namemax")]
  f_namemax: i32,
  /// The ID of the user that mounted the filesystem.
  #[serde(rename = "f_owner")]
  f_owner: i32,
  /// The type of the filesystem.
  #[serde(rename = "f_type")]
  f_type: i32,
  /// The structure version number.
  #[serde(rename = "f_version")]
  f_version: i32
}

impl ClusterStatfs {
  /// Filesystem statistics
  pub fn new(f_bavail: i32, f_bfree: i32, f_blocks: i32, f_bsize: i32, f_ffree: i32, f_files: i32, f_flags: i32, f_fstypename: String, f_iosize: i32, f_mntfromname: String, f_mntonname: String, f_namemax: i32, f_owner: i32, f_type: i32, f_version: i32) -> ClusterStatfs {
    ClusterStatfs {
      f_bavail: f_bavail,
      f_bfree: f_bfree,
      f_blocks: f_blocks,
      f_bsize: f_bsize,
      f_ffree: f_ffree,
      f_files: f_files,
      f_flags: f_flags,
      f_fstypename: f_fstypename,
      f_iosize: f_iosize,
      f_mntfromname: f_mntfromname,
      f_mntonname: f_mntonname,
      f_namemax: f_namemax,
      f_owner: f_owner,
      f_type: f_type,
      f_version: f_version
    }
  }

  pub fn set_f_bavail(&mut self, f_bavail: i32) {
    self.f_bavail = f_bavail;
  }

  pub fn with_f_bavail(mut self, f_bavail: i32) -> ClusterStatfs {
    self.f_bavail = f_bavail;
    self
  }

  pub fn f_bavail(&self) -> &i32 {
    &self.f_bavail
  }


  pub fn set_f_bfree(&mut self, f_bfree: i32) {
    self.f_bfree = f_bfree;
  }

  pub fn with_f_bfree(mut self, f_bfree: i32) -> ClusterStatfs {
    self.f_bfree = f_bfree;
    self
  }

  pub fn f_bfree(&self) -> &i32 {
    &self.f_bfree
  }


  pub fn set_f_blocks(&mut self, f_blocks: i32) {
    self.f_blocks = f_blocks;
  }

  pub fn with_f_blocks(mut self, f_blocks: i32) -> ClusterStatfs {
    self.f_blocks = f_blocks;
    self
  }

  pub fn f_blocks(&self) -> &i32 {
    &self.f_blocks
  }


  pub fn set_f_bsize(&mut self, f_bsize: i32) {
    self.f_bsize = f_bsize;
  }

  pub fn with_f_bsize(mut self, f_bsize: i32) -> ClusterStatfs {
    self.f_bsize = f_bsize;
    self
  }

  pub fn f_bsize(&self) -> &i32 {
    &self.f_bsize
  }


  pub fn set_f_ffree(&mut self, f_ffree: i32) {
    self.f_ffree = f_ffree;
  }

  pub fn with_f_ffree(mut self, f_ffree: i32) -> ClusterStatfs {
    self.f_ffree = f_ffree;
    self
  }

  pub fn f_ffree(&self) -> &i32 {
    &self.f_ffree
  }


  pub fn set_f_files(&mut self, f_files: i32) {
    self.f_files = f_files;
  }

  pub fn with_f_files(mut self, f_files: i32) -> ClusterStatfs {
    self.f_files = f_files;
    self
  }

  pub fn f_files(&self) -> &i32 {
    &self.f_files
  }


  pub fn set_f_flags(&mut self, f_flags: i32) {
    self.f_flags = f_flags;
  }

  pub fn with_f_flags(mut self, f_flags: i32) -> ClusterStatfs {
    self.f_flags = f_flags;
    self
  }

  pub fn f_flags(&self) -> &i32 {
    &self.f_flags
  }


  pub fn set_f_fstypename(&mut self, f_fstypename: String) {
    self.f_fstypename = f_fstypename;
  }

  pub fn with_f_fstypename(mut self, f_fstypename: String) -> ClusterStatfs {
    self.f_fstypename = f_fstypename;
    self
  }

  pub fn f_fstypename(&self) -> &String {
    &self.f_fstypename
  }


  pub fn set_f_iosize(&mut self, f_iosize: i32) {
    self.f_iosize = f_iosize;
  }

  pub fn with_f_iosize(mut self, f_iosize: i32) -> ClusterStatfs {
    self.f_iosize = f_iosize;
    self
  }

  pub fn f_iosize(&self) -> &i32 {
    &self.f_iosize
  }


  pub fn set_f_mntfromname(&mut self, f_mntfromname: String) {
    self.f_mntfromname = f_mntfromname;
  }

  pub fn with_f_mntfromname(mut self, f_mntfromname: String) -> ClusterStatfs {
    self.f_mntfromname = f_mntfromname;
    self
  }

  pub fn f_mntfromname(&self) -> &String {
    &self.f_mntfromname
  }


  pub fn set_f_mntonname(&mut self, f_mntonname: String) {
    self.f_mntonname = f_mntonname;
  }

  pub fn with_f_mntonname(mut self, f_mntonname: String) -> ClusterStatfs {
    self.f_mntonname = f_mntonname;
    self
  }

  pub fn f_mntonname(&self) -> &String {
    &self.f_mntonname
  }


  pub fn set_f_namemax(&mut self, f_namemax: i32) {
    self.f_namemax = f_namemax;
  }

  pub fn with_f_namemax(mut self, f_namemax: i32) -> ClusterStatfs {
    self.f_namemax = f_namemax;
    self
  }

  pub fn f_namemax(&self) -> &i32 {
    &self.f_namemax
  }


  pub fn set_f_owner(&mut self, f_owner: i32) {
    self.f_owner = f_owner;
  }

  pub fn with_f_owner(mut self, f_owner: i32) -> ClusterStatfs {
    self.f_owner = f_owner;
    self
  }

  pub fn f_owner(&self) -> &i32 {
    &self.f_owner
  }


  pub fn set_f_type(&mut self, f_type: i32) {
    self.f_type = f_type;
  }

  pub fn with_f_type(mut self, f_type: i32) -> ClusterStatfs {
    self.f_type = f_type;
    self
  }

  pub fn f_type(&self) -> &i32 {
    &self.f_type
  }


  pub fn set_f_version(&mut self, f_version: i32) {
    self.f_version = f_version;
  }

  pub fn with_f_version(mut self, f_version: i32) -> ClusterStatfs {
    self.f_version = f_version;
    self
  }

  pub fn f_version(&self) -> &i32 {
    &self.f_version
  }


}



