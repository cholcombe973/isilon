/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeStateSmartfailExtended : Node smartfail state.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStateSmartfailExtended {
  /// This node is dead (dead_devs).
  #[serde(rename = "dead")]
  dead: Option<bool>,
  /// This node is down (down_devs).
  #[serde(rename = "down")]
  down: Option<bool>,
  /// This node is in the cluster (all_devs).
  #[serde(rename = "in_cluster")]
  in_cluster: Option<bool>,
  /// This node is readonly (ro_devs).
  #[serde(rename = "readonly")]
  readonly: Option<bool>,
  /// This node is shutdown readonly (down_devs).
  #[serde(rename = "shutdown_readonly")]
  shutdown_readonly: Option<bool>,
  /// This node is smartfailed (soft_devs).
  #[serde(rename = "smartfailed")]
  smartfailed: Option<bool>
}

impl NodeStateSmartfailExtended {
  /// Node smartfail state.
  pub fn new() -> NodeStateSmartfailExtended {
    NodeStateSmartfailExtended {
      dead: None,
      down: None,
      in_cluster: None,
      readonly: None,
      shutdown_readonly: None,
      smartfailed: None
    }
  }

  pub fn set_dead(&mut self, dead: bool) {
    self.dead = Some(dead);
  }

  pub fn with_dead(mut self, dead: bool) -> NodeStateSmartfailExtended {
    self.dead = Some(dead);
    self
  }

  pub fn dead(&self) -> Option<&bool> {
    self.dead.as_ref()
  }

  pub fn reset_dead(&mut self) {
    self.dead = None;
  }

  pub fn set_down(&mut self, down: bool) {
    self.down = Some(down);
  }

  pub fn with_down(mut self, down: bool) -> NodeStateSmartfailExtended {
    self.down = Some(down);
    self
  }

  pub fn down(&self) -> Option<&bool> {
    self.down.as_ref()
  }

  pub fn reset_down(&mut self) {
    self.down = None;
  }

  pub fn set_in_cluster(&mut self, in_cluster: bool) {
    self.in_cluster = Some(in_cluster);
  }

  pub fn with_in_cluster(mut self, in_cluster: bool) -> NodeStateSmartfailExtended {
    self.in_cluster = Some(in_cluster);
    self
  }

  pub fn in_cluster(&self) -> Option<&bool> {
    self.in_cluster.as_ref()
  }

  pub fn reset_in_cluster(&mut self) {
    self.in_cluster = None;
  }

  pub fn set_readonly(&mut self, readonly: bool) {
    self.readonly = Some(readonly);
  }

  pub fn with_readonly(mut self, readonly: bool) -> NodeStateSmartfailExtended {
    self.readonly = Some(readonly);
    self
  }

  pub fn readonly(&self) -> Option<&bool> {
    self.readonly.as_ref()
  }

  pub fn reset_readonly(&mut self) {
    self.readonly = None;
  }

  pub fn set_shutdown_readonly(&mut self, shutdown_readonly: bool) {
    self.shutdown_readonly = Some(shutdown_readonly);
  }

  pub fn with_shutdown_readonly(mut self, shutdown_readonly: bool) -> NodeStateSmartfailExtended {
    self.shutdown_readonly = Some(shutdown_readonly);
    self
  }

  pub fn shutdown_readonly(&self) -> Option<&bool> {
    self.shutdown_readonly.as_ref()
  }

  pub fn reset_shutdown_readonly(&mut self) {
    self.shutdown_readonly = None;
  }

  pub fn set_smartfailed(&mut self, smartfailed: bool) {
    self.smartfailed = Some(smartfailed);
  }

  pub fn with_smartfailed(mut self, smartfailed: bool) -> NodeStateSmartfailExtended {
    self.smartfailed = Some(smartfailed);
    self
  }

  pub fn smartfailed(&self) -> Option<&bool> {
    self.smartfailed.as_ref()
  }

  pub fn reset_smartfailed(&mut self) {
    self.smartfailed = None;
  }

}



