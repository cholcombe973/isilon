/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpSettingsPreferredIpCreateParams {
  #[serde(rename = "data_subnets")]
  data_subnets: Vec<::models::NdmpSettingsPreferredIpDataSubnet>,
  /// Either cluster or a network subnet defined in OneFS.
  #[serde(rename = "scope")]
  scope: String
}

impl NdmpSettingsPreferredIpCreateParams {
  pub fn new(data_subnets: Vec<::models::NdmpSettingsPreferredIpDataSubnet>, scope: String) -> NdmpSettingsPreferredIpCreateParams {
    NdmpSettingsPreferredIpCreateParams {
      data_subnets: data_subnets,
      scope: scope
    }
  }

  pub fn set_data_subnets(&mut self, data_subnets: Vec<::models::NdmpSettingsPreferredIpDataSubnet>) {
    self.data_subnets = data_subnets;
  }

  pub fn with_data_subnets(mut self, data_subnets: Vec<::models::NdmpSettingsPreferredIpDataSubnet>) -> NdmpSettingsPreferredIpCreateParams {
    self.data_subnets = data_subnets;
    self
  }

  pub fn data_subnets(&self) -> &Vec<::models::NdmpSettingsPreferredIpDataSubnet> {
    &self.data_subnets
  }


  pub fn set_scope(&mut self, scope: String) {
    self.scope = scope;
  }

  pub fn with_scope(mut self, scope: String) -> NdmpSettingsPreferredIpCreateParams {
    self.scope = scope;
    self
  }

  pub fn scope(&self) -> &String {
    &self.scope
  }


}



