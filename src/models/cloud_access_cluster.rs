/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudAccessCluster {
  /// A list of accounts created on the cluster with this guid
  #[serde(rename = "accounts")]
  accounts: Option<Vec<String>>,
  /// Whether the guid is that of the current (local) cluster
  #[serde(rename = "current")]
  current: Option<bool>,
  /// A cluster guid indicating the birth place of one or more accounts or policies on this cluster
  #[serde(rename = "guid")]
  guid: Option<String>,
  /// A cluster guid indicating the birth place of one or more accounts or policies on this cluster
  #[serde(rename = "id")]
  id: Option<String>,
  /// The name of the cluster from which the above guid originated
  #[serde(rename = "name")]
  name: Option<String>,
  /// A list of policies created on the cluster with this guid
  #[serde(rename = "policies")]
  policies: Option<Vec<String>>,
  /// Whether the guid has access to the cloud
  #[serde(rename = "state")]
  state: Option<String>,
  /// The name of the cluster from which the above guid was synced
  #[serde(rename = "synced_from")]
  synced_from: Option<String>
}

impl CloudAccessCluster {
  pub fn new() -> CloudAccessCluster {
    CloudAccessCluster {
      accounts: None,
      current: None,
      guid: None,
      id: None,
      name: None,
      policies: None,
      state: None,
      synced_from: None
    }
  }

  pub fn set_accounts(&mut self, accounts: Vec<String>) {
    self.accounts = Some(accounts);
  }

  pub fn with_accounts(mut self, accounts: Vec<String>) -> CloudAccessCluster {
    self.accounts = Some(accounts);
    self
  }

  pub fn accounts(&self) -> Option<&Vec<String>> {
    self.accounts.as_ref()
  }

  pub fn reset_accounts(&mut self) {
    self.accounts = None;
  }

  pub fn set_current(&mut self, current: bool) {
    self.current = Some(current);
  }

  pub fn with_current(mut self, current: bool) -> CloudAccessCluster {
    self.current = Some(current);
    self
  }

  pub fn current(&self) -> Option<&bool> {
    self.current.as_ref()
  }

  pub fn reset_current(&mut self) {
    self.current = None;
  }

  pub fn set_guid(&mut self, guid: String) {
    self.guid = Some(guid);
  }

  pub fn with_guid(mut self, guid: String) -> CloudAccessCluster {
    self.guid = Some(guid);
    self
  }

  pub fn guid(&self) -> Option<&String> {
    self.guid.as_ref()
  }

  pub fn reset_guid(&mut self) {
    self.guid = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> CloudAccessCluster {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> CloudAccessCluster {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_policies(&mut self, policies: Vec<String>) {
    self.policies = Some(policies);
  }

  pub fn with_policies(mut self, policies: Vec<String>) -> CloudAccessCluster {
    self.policies = Some(policies);
    self
  }

  pub fn policies(&self) -> Option<&Vec<String>> {
    self.policies.as_ref()
  }

  pub fn reset_policies(&mut self) {
    self.policies = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> CloudAccessCluster {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_synced_from(&mut self, synced_from: String) {
    self.synced_from = Some(synced_from);
  }

  pub fn with_synced_from(mut self, synced_from: String) -> CloudAccessCluster {
    self.synced_from = Some(synced_from);
    self
  }

  pub fn synced_from(&self) -> Option<&String> {
    self.synced_from.as_ref()
  }

  pub fn reset_synced_from(&mut self) {
    self.synced_from = None;
  }

}



