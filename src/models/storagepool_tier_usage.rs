/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolTierUsage {
  /// Available free bytes remaining in the pool when virtual hot spare is taken into account.
  #[serde(rename = "avail_bytes")]
  avail_bytes: String,
  /// Available free bytes remaining in the pool on HDD drives when virtual hot spare is taken into account.
  #[serde(rename = "avail_hdd_bytes")]
  avail_hdd_bytes: String,
  /// Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.
  #[serde(rename = "avail_ssd_bytes")]
  avail_ssd_bytes: String,
  /// Whether or not the pool usage is currently balanced.
  #[serde(rename = "balanced")]
  balanced: bool,
  /// Free bytes remaining in the pool.
  #[serde(rename = "free_bytes")]
  free_bytes: String,
  /// Free bytes remaining in the pool on HDD drives.
  #[serde(rename = "free_hdd_bytes")]
  free_hdd_bytes: String,
  /// Free bytes remaining in the pool on SSD drives.
  #[serde(rename = "free_ssd_bytes")]
  free_ssd_bytes: String,
  /// Percentage of usable space in the pool which is used.
  #[serde(rename = "pct_used")]
  pct_used: String,
  /// Percentage of usable space on HDD drives in the pool which is used.
  #[serde(rename = "pct_used_hdd")]
  pct_used_hdd: String,
  /// Percentage of usable space on SSD drives in the pool which is used.
  #[serde(rename = "pct_used_ssd")]
  pct_used_ssd: String,
  /// Total bytes in the pool.
  #[serde(rename = "total_bytes")]
  total_bytes: String,
  /// Total bytes in the pool on HDD drives.
  #[serde(rename = "total_hdd_bytes")]
  total_hdd_bytes: String,
  /// Total bytes in the pool on SSD drives.
  #[serde(rename = "total_ssd_bytes")]
  total_ssd_bytes: String,
  /// Total bytes in the pool drives when virtual hot spare is taken into account.
  #[serde(rename = "usable_bytes")]
  usable_bytes: String,
  /// Total bytes in the pool on HDD drives when virtual hot spare is taken into account.
  #[serde(rename = "usable_hdd_bytes")]
  usable_hdd_bytes: String,
  /// Total bytes in the pool on SSD drives when virtual hot spare is taken into account.
  #[serde(rename = "usable_ssd_bytes")]
  usable_ssd_bytes: String,
  /// Used bytes in the pool.
  #[serde(rename = "used_bytes")]
  used_bytes: Option<String>,
  /// Used bytes in the pool on HDD drives.
  #[serde(rename = "used_hdd_bytes")]
  used_hdd_bytes: String,
  /// Used bytes in the pool on SSD drives.
  #[serde(rename = "used_ssd_bytes")]
  used_ssd_bytes: String,
  #[serde(rename = "virtual_hot_spare_bytes")]
  virtual_hot_spare_bytes: Option<String>
}

impl StoragepoolTierUsage {
  pub fn new(avail_bytes: String, avail_hdd_bytes: String, avail_ssd_bytes: String, balanced: bool, free_bytes: String, free_hdd_bytes: String, free_ssd_bytes: String, pct_used: String, pct_used_hdd: String, pct_used_ssd: String, total_bytes: String, total_hdd_bytes: String, total_ssd_bytes: String, usable_bytes: String, usable_hdd_bytes: String, usable_ssd_bytes: String, used_hdd_bytes: String, used_ssd_bytes: String) -> StoragepoolTierUsage {
    StoragepoolTierUsage {
      avail_bytes: avail_bytes,
      avail_hdd_bytes: avail_hdd_bytes,
      avail_ssd_bytes: avail_ssd_bytes,
      balanced: balanced,
      free_bytes: free_bytes,
      free_hdd_bytes: free_hdd_bytes,
      free_ssd_bytes: free_ssd_bytes,
      pct_used: pct_used,
      pct_used_hdd: pct_used_hdd,
      pct_used_ssd: pct_used_ssd,
      total_bytes: total_bytes,
      total_hdd_bytes: total_hdd_bytes,
      total_ssd_bytes: total_ssd_bytes,
      usable_bytes: usable_bytes,
      usable_hdd_bytes: usable_hdd_bytes,
      usable_ssd_bytes: usable_ssd_bytes,
      used_bytes: None,
      used_hdd_bytes: used_hdd_bytes,
      used_ssd_bytes: used_ssd_bytes,
      virtual_hot_spare_bytes: None
    }
  }

  pub fn set_avail_bytes(&mut self, avail_bytes: String) {
    self.avail_bytes = avail_bytes;
  }

  pub fn with_avail_bytes(mut self, avail_bytes: String) -> StoragepoolTierUsage {
    self.avail_bytes = avail_bytes;
    self
  }

  pub fn avail_bytes(&self) -> &String {
    &self.avail_bytes
  }


  pub fn set_avail_hdd_bytes(&mut self, avail_hdd_bytes: String) {
    self.avail_hdd_bytes = avail_hdd_bytes;
  }

  pub fn with_avail_hdd_bytes(mut self, avail_hdd_bytes: String) -> StoragepoolTierUsage {
    self.avail_hdd_bytes = avail_hdd_bytes;
    self
  }

  pub fn avail_hdd_bytes(&self) -> &String {
    &self.avail_hdd_bytes
  }


  pub fn set_avail_ssd_bytes(&mut self, avail_ssd_bytes: String) {
    self.avail_ssd_bytes = avail_ssd_bytes;
  }

  pub fn with_avail_ssd_bytes(mut self, avail_ssd_bytes: String) -> StoragepoolTierUsage {
    self.avail_ssd_bytes = avail_ssd_bytes;
    self
  }

  pub fn avail_ssd_bytes(&self) -> &String {
    &self.avail_ssd_bytes
  }


  pub fn set_balanced(&mut self, balanced: bool) {
    self.balanced = balanced;
  }

  pub fn with_balanced(mut self, balanced: bool) -> StoragepoolTierUsage {
    self.balanced = balanced;
    self
  }

  pub fn balanced(&self) -> &bool {
    &self.balanced
  }


  pub fn set_free_bytes(&mut self, free_bytes: String) {
    self.free_bytes = free_bytes;
  }

  pub fn with_free_bytes(mut self, free_bytes: String) -> StoragepoolTierUsage {
    self.free_bytes = free_bytes;
    self
  }

  pub fn free_bytes(&self) -> &String {
    &self.free_bytes
  }


  pub fn set_free_hdd_bytes(&mut self, free_hdd_bytes: String) {
    self.free_hdd_bytes = free_hdd_bytes;
  }

  pub fn with_free_hdd_bytes(mut self, free_hdd_bytes: String) -> StoragepoolTierUsage {
    self.free_hdd_bytes = free_hdd_bytes;
    self
  }

  pub fn free_hdd_bytes(&self) -> &String {
    &self.free_hdd_bytes
  }


  pub fn set_free_ssd_bytes(&mut self, free_ssd_bytes: String) {
    self.free_ssd_bytes = free_ssd_bytes;
  }

  pub fn with_free_ssd_bytes(mut self, free_ssd_bytes: String) -> StoragepoolTierUsage {
    self.free_ssd_bytes = free_ssd_bytes;
    self
  }

  pub fn free_ssd_bytes(&self) -> &String {
    &self.free_ssd_bytes
  }


  pub fn set_pct_used(&mut self, pct_used: String) {
    self.pct_used = pct_used;
  }

  pub fn with_pct_used(mut self, pct_used: String) -> StoragepoolTierUsage {
    self.pct_used = pct_used;
    self
  }

  pub fn pct_used(&self) -> &String {
    &self.pct_used
  }


  pub fn set_pct_used_hdd(&mut self, pct_used_hdd: String) {
    self.pct_used_hdd = pct_used_hdd;
  }

  pub fn with_pct_used_hdd(mut self, pct_used_hdd: String) -> StoragepoolTierUsage {
    self.pct_used_hdd = pct_used_hdd;
    self
  }

  pub fn pct_used_hdd(&self) -> &String {
    &self.pct_used_hdd
  }


  pub fn set_pct_used_ssd(&mut self, pct_used_ssd: String) {
    self.pct_used_ssd = pct_used_ssd;
  }

  pub fn with_pct_used_ssd(mut self, pct_used_ssd: String) -> StoragepoolTierUsage {
    self.pct_used_ssd = pct_used_ssd;
    self
  }

  pub fn pct_used_ssd(&self) -> &String {
    &self.pct_used_ssd
  }


  pub fn set_total_bytes(&mut self, total_bytes: String) {
    self.total_bytes = total_bytes;
  }

  pub fn with_total_bytes(mut self, total_bytes: String) -> StoragepoolTierUsage {
    self.total_bytes = total_bytes;
    self
  }

  pub fn total_bytes(&self) -> &String {
    &self.total_bytes
  }


  pub fn set_total_hdd_bytes(&mut self, total_hdd_bytes: String) {
    self.total_hdd_bytes = total_hdd_bytes;
  }

  pub fn with_total_hdd_bytes(mut self, total_hdd_bytes: String) -> StoragepoolTierUsage {
    self.total_hdd_bytes = total_hdd_bytes;
    self
  }

  pub fn total_hdd_bytes(&self) -> &String {
    &self.total_hdd_bytes
  }


  pub fn set_total_ssd_bytes(&mut self, total_ssd_bytes: String) {
    self.total_ssd_bytes = total_ssd_bytes;
  }

  pub fn with_total_ssd_bytes(mut self, total_ssd_bytes: String) -> StoragepoolTierUsage {
    self.total_ssd_bytes = total_ssd_bytes;
    self
  }

  pub fn total_ssd_bytes(&self) -> &String {
    &self.total_ssd_bytes
  }


  pub fn set_usable_bytes(&mut self, usable_bytes: String) {
    self.usable_bytes = usable_bytes;
  }

  pub fn with_usable_bytes(mut self, usable_bytes: String) -> StoragepoolTierUsage {
    self.usable_bytes = usable_bytes;
    self
  }

  pub fn usable_bytes(&self) -> &String {
    &self.usable_bytes
  }


  pub fn set_usable_hdd_bytes(&mut self, usable_hdd_bytes: String) {
    self.usable_hdd_bytes = usable_hdd_bytes;
  }

  pub fn with_usable_hdd_bytes(mut self, usable_hdd_bytes: String) -> StoragepoolTierUsage {
    self.usable_hdd_bytes = usable_hdd_bytes;
    self
  }

  pub fn usable_hdd_bytes(&self) -> &String {
    &self.usable_hdd_bytes
  }


  pub fn set_usable_ssd_bytes(&mut self, usable_ssd_bytes: String) {
    self.usable_ssd_bytes = usable_ssd_bytes;
  }

  pub fn with_usable_ssd_bytes(mut self, usable_ssd_bytes: String) -> StoragepoolTierUsage {
    self.usable_ssd_bytes = usable_ssd_bytes;
    self
  }

  pub fn usable_ssd_bytes(&self) -> &String {
    &self.usable_ssd_bytes
  }


  pub fn set_used_bytes(&mut self, used_bytes: String) {
    self.used_bytes = Some(used_bytes);
  }

  pub fn with_used_bytes(mut self, used_bytes: String) -> StoragepoolTierUsage {
    self.used_bytes = Some(used_bytes);
    self
  }

  pub fn used_bytes(&self) -> Option<&String> {
    self.used_bytes.as_ref()
  }

  pub fn reset_used_bytes(&mut self) {
    self.used_bytes = None;
  }

  pub fn set_used_hdd_bytes(&mut self, used_hdd_bytes: String) {
    self.used_hdd_bytes = used_hdd_bytes;
  }

  pub fn with_used_hdd_bytes(mut self, used_hdd_bytes: String) -> StoragepoolTierUsage {
    self.used_hdd_bytes = used_hdd_bytes;
    self
  }

  pub fn used_hdd_bytes(&self) -> &String {
    &self.used_hdd_bytes
  }


  pub fn set_used_ssd_bytes(&mut self, used_ssd_bytes: String) {
    self.used_ssd_bytes = used_ssd_bytes;
  }

  pub fn with_used_ssd_bytes(mut self, used_ssd_bytes: String) -> StoragepoolTierUsage {
    self.used_ssd_bytes = used_ssd_bytes;
    self
  }

  pub fn used_ssd_bytes(&self) -> &String {
    &self.used_ssd_bytes
  }


  pub fn set_virtual_hot_spare_bytes(&mut self, virtual_hot_spare_bytes: String) {
    self.virtual_hot_spare_bytes = Some(virtual_hot_spare_bytes);
  }

  pub fn with_virtual_hot_spare_bytes(mut self, virtual_hot_spare_bytes: String) -> StoragepoolTierUsage {
    self.virtual_hot_spare_bytes = Some(virtual_hot_spare_bytes);
    self
  }

  pub fn virtual_hot_spare_bytes(&self) -> Option<&String> {
    self.virtual_hot_spare_bytes.as_ref()
  }

  pub fn reset_virtual_hot_spare_bytes(&mut self) {
    self.virtual_hot_spare_bytes = None;
  }

}



