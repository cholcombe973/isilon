/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpgradeClusterClusterOverview {
  /// Number of nodes running the current OneFS version.
  #[serde(rename = "nodes_current")]
  nodes_current: Option<i32>,
  /// Total number of nodes on the cluster.
  #[serde(rename = "nodes_total")]
  nodes_total: Option<i32>,
  /// Number of nodes transitioning between OneFS versions. Null if the cluster_state is 'committed' or 'assessing.'
  #[serde(rename = "nodes_transitioning")]
  nodes_transitioning: Option<i32>,
  /// Number of nodes running the upgraded OneFS version. Null if the cluster_state is 'committed' or 'assessing.'
  #[serde(rename = "nodes_upgraded")]
  nodes_upgraded: Option<i32>
}

impl UpgradeClusterClusterOverview {
  pub fn new() -> UpgradeClusterClusterOverview {
    UpgradeClusterClusterOverview {
      nodes_current: None,
      nodes_total: None,
      nodes_transitioning: None,
      nodes_upgraded: None
    }
  }

  pub fn set_nodes_current(&mut self, nodes_current: i32) {
    self.nodes_current = Some(nodes_current);
  }

  pub fn with_nodes_current(mut self, nodes_current: i32) -> UpgradeClusterClusterOverview {
    self.nodes_current = Some(nodes_current);
    self
  }

  pub fn nodes_current(&self) -> Option<&i32> {
    self.nodes_current.as_ref()
  }

  pub fn reset_nodes_current(&mut self) {
    self.nodes_current = None;
  }

  pub fn set_nodes_total(&mut self, nodes_total: i32) {
    self.nodes_total = Some(nodes_total);
  }

  pub fn with_nodes_total(mut self, nodes_total: i32) -> UpgradeClusterClusterOverview {
    self.nodes_total = Some(nodes_total);
    self
  }

  pub fn nodes_total(&self) -> Option<&i32> {
    self.nodes_total.as_ref()
  }

  pub fn reset_nodes_total(&mut self) {
    self.nodes_total = None;
  }

  pub fn set_nodes_transitioning(&mut self, nodes_transitioning: i32) {
    self.nodes_transitioning = Some(nodes_transitioning);
  }

  pub fn with_nodes_transitioning(mut self, nodes_transitioning: i32) -> UpgradeClusterClusterOverview {
    self.nodes_transitioning = Some(nodes_transitioning);
    self
  }

  pub fn nodes_transitioning(&self) -> Option<&i32> {
    self.nodes_transitioning.as_ref()
  }

  pub fn reset_nodes_transitioning(&mut self) {
    self.nodes_transitioning = None;
  }

  pub fn set_nodes_upgraded(&mut self, nodes_upgraded: i32) {
    self.nodes_upgraded = Some(nodes_upgraded);
  }

  pub fn with_nodes_upgraded(mut self, nodes_upgraded: i32) -> UpgradeClusterClusterOverview {
    self.nodes_upgraded = Some(nodes_upgraded);
    self
  }

  pub fn nodes_upgraded(&self) -> Option<&i32> {
    self.nodes_upgraded.as_ref()
  }

  pub fn reset_nodes_upgraded(&mut self) {
    self.nodes_upgraded = None;
  }

}



