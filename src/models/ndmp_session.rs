/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpSession {
  /// Unique display id.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Text information from probing the session
  #[serde(rename = "probe_info")]
  probe_info: Option<String>,
  /// session ID
  #[serde(rename = "session")]
  session: Option<String>
}

impl NdmpSession {
  pub fn new() -> NdmpSession {
    NdmpSession {
      id: None,
      probe_info: None,
      session: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NdmpSession {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_probe_info(&mut self, probe_info: String) {
    self.probe_info = Some(probe_info);
  }

  pub fn with_probe_info(mut self, probe_info: String) -> NdmpSession {
    self.probe_info = Some(probe_info);
    self
  }

  pub fn probe_info(&self) -> Option<&String> {
    self.probe_info.as_ref()
  }

  pub fn reset_probe_info(&mut self) {
    self.probe_info = None;
  }

  pub fn set_session(&mut self, session: String) {
    self.session = Some(session);
  }

  pub fn with_session(mut self, session: String) -> NdmpSession {
    self.session = Some(session);
    self
  }

  pub fn session(&self) -> Option<&String> {
    self.session.as_ref()
  }

  pub fn reset_session(&mut self) {
    self.session = None;
  }

}



