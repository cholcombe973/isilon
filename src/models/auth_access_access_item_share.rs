/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthAccessAccessItemShare {
  /// Specifies the persona for the user.
  #[serde(rename = "effective_user")]
  effective_user: Option<::models::AuthAccessAccessItemShareEffectiveUser>,
  /// Specifies the permissions that the user has on the SHARE.
  #[serde(rename = "share_permissions")]
  share_permissions: Option<::models::AuthAccessAccessItemShareSharePermissions>
}

impl AuthAccessAccessItemShare {
  pub fn new() -> AuthAccessAccessItemShare {
    AuthAccessAccessItemShare {
      effective_user: None,
      share_permissions: None
    }
  }

  pub fn set_effective_user(&mut self, effective_user: ::models::AuthAccessAccessItemShareEffectiveUser) {
    self.effective_user = Some(effective_user);
  }

  pub fn with_effective_user(mut self, effective_user: ::models::AuthAccessAccessItemShareEffectiveUser) -> AuthAccessAccessItemShare {
    self.effective_user = Some(effective_user);
    self
  }

  pub fn effective_user(&self) -> Option<&::models::AuthAccessAccessItemShareEffectiveUser> {
    self.effective_user.as_ref()
  }

  pub fn reset_effective_user(&mut self) {
    self.effective_user = None;
  }

  pub fn set_share_permissions(&mut self, share_permissions: ::models::AuthAccessAccessItemShareSharePermissions) {
    self.share_permissions = Some(share_permissions);
  }

  pub fn with_share_permissions(mut self, share_permissions: ::models::AuthAccessAccessItemShareSharePermissions) -> AuthAccessAccessItemShare {
    self.share_permissions = Some(share_permissions);
    self
  }

  pub fn share_permissions(&self) -> Option<&::models::AuthAccessAccessItemShareSharePermissions> {
    self.share_permissions.as_ref()
  }

  pub fn reset_share_permissions(&mut self) {
    self.share_permissions = None;
  }

}



