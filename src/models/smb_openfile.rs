/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SmbOpenfile {
  /// Path of file within /ifs.
  #[serde(rename = "file")]
  file: String,
  /// The file ID.
  #[serde(rename = "id")]
  id: i32,
  /// Number of locks user holds on file.
  #[serde(rename = "locks")]
  locks: i32,
  /// The user's permissions on file.
  #[serde(rename = "permissions")]
  permissions: Vec<String>,
  /// User holding file open.
  #[serde(rename = "user")]
  user: String
}

impl SmbOpenfile {
  pub fn new(file: String, id: i32, locks: i32, permissions: Vec<String>, user: String) -> SmbOpenfile {
    SmbOpenfile {
      file: file,
      id: id,
      locks: locks,
      permissions: permissions,
      user: user
    }
  }

  pub fn set_file(&mut self, file: String) {
    self.file = file;
  }

  pub fn with_file(mut self, file: String) -> SmbOpenfile {
    self.file = file;
    self
  }

  pub fn file(&self) -> &String {
    &self.file
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> SmbOpenfile {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_locks(&mut self, locks: i32) {
    self.locks = locks;
  }

  pub fn with_locks(mut self, locks: i32) -> SmbOpenfile {
    self.locks = locks;
    self
  }

  pub fn locks(&self) -> &i32 {
    &self.locks
  }


  pub fn set_permissions(&mut self, permissions: Vec<String>) {
    self.permissions = permissions;
  }

  pub fn with_permissions(mut self, permissions: Vec<String>) -> SmbOpenfile {
    self.permissions = permissions;
    self
  }

  pub fn permissions(&self) -> &Vec<String> {
    &self.permissions
  }


  pub fn set_user(&mut self, user: String) {
    self.user = user;
  }

  pub fn with_user(mut self, user: String) -> SmbOpenfile {
    self.user = user;
    self
  }

  pub fn user(&self) -> &String {
    &self.user
  }


}



