/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeSensorsNodeSensorValue {
  /// The descriptive name of this sensor.
  #[serde(rename = "desc")]
  desc: Option<String>,
  /// The identifier name of this sensor.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The units of this sensor.
  #[serde(rename = "units")]
  units: Option<String>,
  /// The value of this sensor.
  #[serde(rename = "value")]
  value: Option<String>
}

impl NodeSensorsNodeSensorValue {
  pub fn new() -> NodeSensorsNodeSensorValue {
    NodeSensorsNodeSensorValue {
      desc: None,
      name: None,
      units: None,
      value: None
    }
  }

  pub fn set_desc(&mut self, desc: String) {
    self.desc = Some(desc);
  }

  pub fn with_desc(mut self, desc: String) -> NodeSensorsNodeSensorValue {
    self.desc = Some(desc);
    self
  }

  pub fn desc(&self) -> Option<&String> {
    self.desc.as_ref()
  }

  pub fn reset_desc(&mut self) {
    self.desc = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NodeSensorsNodeSensorValue {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_units(&mut self, units: String) {
    self.units = Some(units);
  }

  pub fn with_units(mut self, units: String) -> NodeSensorsNodeSensorValue {
    self.units = Some(units);
    self
  }

  pub fn units(&self) -> Option<&String> {
    self.units.as_ref()
  }

  pub fn reset_units(&mut self) {
    self.units = None;
  }

  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> NodeSensorsNodeSensorValue {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



