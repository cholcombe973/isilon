/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaNotificationsExtended {
  #[serde(rename = "notifications")]
  notifications: Option<Vec<::models::QuotaNotificationExtended>>,
  /// Total number of items available.
  #[serde(rename = "total")]
  total: Option<i32>
}

impl QuotaNotificationsExtended {
  pub fn new() -> QuotaNotificationsExtended {
    QuotaNotificationsExtended {
      notifications: None,
      total: None
    }
  }

  pub fn set_notifications(&mut self, notifications: Vec<::models::QuotaNotificationExtended>) {
    self.notifications = Some(notifications);
  }

  pub fn with_notifications(mut self, notifications: Vec<::models::QuotaNotificationExtended>) -> QuotaNotificationsExtended {
    self.notifications = Some(notifications);
    self
  }

  pub fn notifications(&self) -> Option<&Vec<::models::QuotaNotificationExtended>> {
    self.notifications.as_ref()
  }

  pub fn reset_notifications(&mut self) {
    self.notifications = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> QuotaNotificationsExtended {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

}



