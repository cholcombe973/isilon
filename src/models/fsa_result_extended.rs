/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FsaResultExtended {
  /// True if the result is pinned to prevent automatic removal.
  #[serde(rename = "pinned")]
  pinned: bool,
  /// Unix Epoch time of start of results collection job.
  #[serde(rename = "begin_time")]
  begin_time: i32,
  /// Path to results database.
  #[serde(rename = "content_path")]
  content_path: Option<String>,
  /// Resource to call with DELETE to remove results..
  #[serde(rename = "delete_link")]
  delete_link: Option<String>,
  /// Unix Epoch time of end of results collection job.
  #[serde(rename = "end_time")]
  end_time: i32,
  /// State of the result set.
  #[serde(rename = "fsa_state")]
  fsa_state: String,
  /// The system generated result set ID.
  #[serde(rename = "id")]
  id: i32,
  /// State information about the FSA Job.
  #[serde(rename = "job_state")]
  job_state: Vec<String>,
  /// Resource to call to get result properties.
  #[serde(rename = "properties_link")]
  properties_link: String,
  /// Size of the result set database in bytes.
  #[serde(rename = "size")]
  size: i32,
  /// FSA version used to create result set.
  #[serde(rename = "version")]
  version: i32
}

impl FsaResultExtended {
  pub fn new(pinned: bool, begin_time: i32, end_time: i32, fsa_state: String, id: i32, job_state: Vec<String>, properties_link: String, size: i32, version: i32) -> FsaResultExtended {
    FsaResultExtended {
      pinned: pinned,
      begin_time: begin_time,
      content_path: None,
      delete_link: None,
      end_time: end_time,
      fsa_state: fsa_state,
      id: id,
      job_state: job_state,
      properties_link: properties_link,
      size: size,
      version: version
    }
  }

  pub fn set_pinned(&mut self, pinned: bool) {
    self.pinned = pinned;
  }

  pub fn with_pinned(mut self, pinned: bool) -> FsaResultExtended {
    self.pinned = pinned;
    self
  }

  pub fn pinned(&self) -> &bool {
    &self.pinned
  }


  pub fn set_begin_time(&mut self, begin_time: i32) {
    self.begin_time = begin_time;
  }

  pub fn with_begin_time(mut self, begin_time: i32) -> FsaResultExtended {
    self.begin_time = begin_time;
    self
  }

  pub fn begin_time(&self) -> &i32 {
    &self.begin_time
  }


  pub fn set_content_path(&mut self, content_path: String) {
    self.content_path = Some(content_path);
  }

  pub fn with_content_path(mut self, content_path: String) -> FsaResultExtended {
    self.content_path = Some(content_path);
    self
  }

  pub fn content_path(&self) -> Option<&String> {
    self.content_path.as_ref()
  }

  pub fn reset_content_path(&mut self) {
    self.content_path = None;
  }

  pub fn set_delete_link(&mut self, delete_link: String) {
    self.delete_link = Some(delete_link);
  }

  pub fn with_delete_link(mut self, delete_link: String) -> FsaResultExtended {
    self.delete_link = Some(delete_link);
    self
  }

  pub fn delete_link(&self) -> Option<&String> {
    self.delete_link.as_ref()
  }

  pub fn reset_delete_link(&mut self) {
    self.delete_link = None;
  }

  pub fn set_end_time(&mut self, end_time: i32) {
    self.end_time = end_time;
  }

  pub fn with_end_time(mut self, end_time: i32) -> FsaResultExtended {
    self.end_time = end_time;
    self
  }

  pub fn end_time(&self) -> &i32 {
    &self.end_time
  }


  pub fn set_fsa_state(&mut self, fsa_state: String) {
    self.fsa_state = fsa_state;
  }

  pub fn with_fsa_state(mut self, fsa_state: String) -> FsaResultExtended {
    self.fsa_state = fsa_state;
    self
  }

  pub fn fsa_state(&self) -> &String {
    &self.fsa_state
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> FsaResultExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_job_state(&mut self, job_state: Vec<String>) {
    self.job_state = job_state;
  }

  pub fn with_job_state(mut self, job_state: Vec<String>) -> FsaResultExtended {
    self.job_state = job_state;
    self
  }

  pub fn job_state(&self) -> &Vec<String> {
    &self.job_state
  }


  pub fn set_properties_link(&mut self, properties_link: String) {
    self.properties_link = properties_link;
  }

  pub fn with_properties_link(mut self, properties_link: String) -> FsaResultExtended {
    self.properties_link = properties_link;
    self
  }

  pub fn properties_link(&self) -> &String {
    &self.properties_link
  }


  pub fn set_size(&mut self, size: i32) {
    self.size = size;
  }

  pub fn with_size(mut self, size: i32) -> FsaResultExtended {
    self.size = size;
    self
  }

  pub fn size(&self) -> &i32 {
    &self.size
  }


  pub fn set_version(&mut self, version: i32) {
    self.version = version;
  }

  pub fn with_version(mut self, version: i32) -> FsaResultExtended {
    self.version = version;
    self
  }

  pub fn version(&self) -> &i32 {
    &self.version
  }


}



