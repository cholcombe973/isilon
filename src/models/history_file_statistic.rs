/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HistoryFileStatistic {
  /// Nodes allocated for the sync action.
  #[serde(rename = "allocated")]
  allocated: i32,
  /// An ID for a single performance report.
  #[serde(rename = "id")]
  id: i32,
  /// Sync action limit.
  #[serde(rename = "limit")]
  limit: i32,
  /// Timestamp for the performance report.
  #[serde(rename = "timestamp")]
  timestamp: i32,
  /// Total usage for the performance report.
  #[serde(rename = "total")]
  total: i32
}

impl HistoryFileStatistic {
  pub fn new(allocated: i32, id: i32, limit: i32, timestamp: i32, total: i32) -> HistoryFileStatistic {
    HistoryFileStatistic {
      allocated: allocated,
      id: id,
      limit: limit,
      timestamp: timestamp,
      total: total
    }
  }

  pub fn set_allocated(&mut self, allocated: i32) {
    self.allocated = allocated;
  }

  pub fn with_allocated(mut self, allocated: i32) -> HistoryFileStatistic {
    self.allocated = allocated;
    self
  }

  pub fn allocated(&self) -> &i32 {
    &self.allocated
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> HistoryFileStatistic {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_limit(&mut self, limit: i32) {
    self.limit = limit;
  }

  pub fn with_limit(mut self, limit: i32) -> HistoryFileStatistic {
    self.limit = limit;
    self
  }

  pub fn limit(&self) -> &i32 {
    &self.limit
  }


  pub fn set_timestamp(&mut self, timestamp: i32) {
    self.timestamp = timestamp;
  }

  pub fn with_timestamp(mut self, timestamp: i32) -> HistoryFileStatistic {
    self.timestamp = timestamp;
    self
  }

  pub fn timestamp(&self) -> &i32 {
    &self.timestamp
  }


  pub fn set_total(&mut self, total: i32) {
    self.total = total;
  }

  pub fn with_total(mut self, total: i32) -> HistoryFileStatistic {
    self.total = total;
    self
  }

  pub fn total(&self) -> &i32 {
    &self.total
  }


}



