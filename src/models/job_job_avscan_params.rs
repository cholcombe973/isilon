/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobJobAvscanParams {
  /// Force files to be scanned, even if excluded by the policy.
  #[serde(rename = "force_run")]
  force_run: Option<bool>,
  /// The antivirus scan policy to run.
  #[serde(rename = "policy")]
  policy: String,
  /// An optional report id for the scan.
  #[serde(rename = "report_id")]
  report_id: Option<String>,
  /// Update the last run time for the policy.
  #[serde(rename = "update")]
  update: Option<bool>
}

impl JobJobAvscanParams {
  pub fn new(policy: String) -> JobJobAvscanParams {
    JobJobAvscanParams {
      force_run: None,
      policy: policy,
      report_id: None,
      update: None
    }
  }

  pub fn set_force_run(&mut self, force_run: bool) {
    self.force_run = Some(force_run);
  }

  pub fn with_force_run(mut self, force_run: bool) -> JobJobAvscanParams {
    self.force_run = Some(force_run);
    self
  }

  pub fn force_run(&self) -> Option<&bool> {
    self.force_run.as_ref()
  }

  pub fn reset_force_run(&mut self) {
    self.force_run = None;
  }

  pub fn set_policy(&mut self, policy: String) {
    self.policy = policy;
  }

  pub fn with_policy(mut self, policy: String) -> JobJobAvscanParams {
    self.policy = policy;
    self
  }

  pub fn policy(&self) -> &String {
    &self.policy
  }


  pub fn set_report_id(&mut self, report_id: String) {
    self.report_id = Some(report_id);
  }

  pub fn with_report_id(mut self, report_id: String) -> JobJobAvscanParams {
    self.report_id = Some(report_id);
    self
  }

  pub fn report_id(&self) -> Option<&String> {
    self.report_id.as_ref()
  }

  pub fn reset_report_id(&mut self) {
    self.report_id = None;
  }

  pub fn set_update(&mut self, update: bool) {
    self.update = Some(update);
  }

  pub fn with_update(mut self, update: bool) -> JobJobAvscanParams {
    self.update = Some(update);
    self
  }

  pub fn update(&self) -> Option<&bool> {
    self.update.as_ref()
  }

  pub fn reset_update(&mut self) {
    self.update = None;
  }

}



