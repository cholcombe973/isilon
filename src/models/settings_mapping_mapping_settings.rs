/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsMappingMappingSettings {
  /// Specifies the cache expiry in seconds of the idmapper.
  #[serde(rename = "cache_entry_expiry")]
  cache_entry_expiry: Option<i32>,
  /// If true, allocates GIDs from a fixed range.
  #[serde(rename = "gid_range_enabled")]
  gid_range_enabled: Option<bool>,
  /// Specifies the ending number for a fixed range from which GIDs are allocated.
  #[serde(rename = "gid_range_max")]
  gid_range_max: Option<i32>,
  /// Specifies the starting number for a fixed range from which GIDs are allocated.
  #[serde(rename = "gid_range_min")]
  gid_range_min: Option<i32>,
  /// Specifies the next GID to allocate.
  #[serde(rename = "gid_range_next")]
  gid_range_next: Option<i32>,
  /// If true, allocates UIDs from a fixed range.
  #[serde(rename = "uid_range_enabled")]
  uid_range_enabled: Option<bool>,
  /// Specifies the ending number for a fixed range from which UIDs are allocated.
  #[serde(rename = "uid_range_max")]
  uid_range_max: Option<i32>,
  /// Specifies the starting number for a fixed range from which UIDs are allocated.
  #[serde(rename = "uid_range_min")]
  uid_range_min: Option<i32>,
  /// Specifies the next UID to allocate.
  #[serde(rename = "uid_range_next")]
  uid_range_next: Option<i32>
}

impl SettingsMappingMappingSettings {
  pub fn new() -> SettingsMappingMappingSettings {
    SettingsMappingMappingSettings {
      cache_entry_expiry: None,
      gid_range_enabled: None,
      gid_range_max: None,
      gid_range_min: None,
      gid_range_next: None,
      uid_range_enabled: None,
      uid_range_max: None,
      uid_range_min: None,
      uid_range_next: None
    }
  }

  pub fn set_cache_entry_expiry(&mut self, cache_entry_expiry: i32) {
    self.cache_entry_expiry = Some(cache_entry_expiry);
  }

  pub fn with_cache_entry_expiry(mut self, cache_entry_expiry: i32) -> SettingsMappingMappingSettings {
    self.cache_entry_expiry = Some(cache_entry_expiry);
    self
  }

  pub fn cache_entry_expiry(&self) -> Option<&i32> {
    self.cache_entry_expiry.as_ref()
  }

  pub fn reset_cache_entry_expiry(&mut self) {
    self.cache_entry_expiry = None;
  }

  pub fn set_gid_range_enabled(&mut self, gid_range_enabled: bool) {
    self.gid_range_enabled = Some(gid_range_enabled);
  }

  pub fn with_gid_range_enabled(mut self, gid_range_enabled: bool) -> SettingsMappingMappingSettings {
    self.gid_range_enabled = Some(gid_range_enabled);
    self
  }

  pub fn gid_range_enabled(&self) -> Option<&bool> {
    self.gid_range_enabled.as_ref()
  }

  pub fn reset_gid_range_enabled(&mut self) {
    self.gid_range_enabled = None;
  }

  pub fn set_gid_range_max(&mut self, gid_range_max: i32) {
    self.gid_range_max = Some(gid_range_max);
  }

  pub fn with_gid_range_max(mut self, gid_range_max: i32) -> SettingsMappingMappingSettings {
    self.gid_range_max = Some(gid_range_max);
    self
  }

  pub fn gid_range_max(&self) -> Option<&i32> {
    self.gid_range_max.as_ref()
  }

  pub fn reset_gid_range_max(&mut self) {
    self.gid_range_max = None;
  }

  pub fn set_gid_range_min(&mut self, gid_range_min: i32) {
    self.gid_range_min = Some(gid_range_min);
  }

  pub fn with_gid_range_min(mut self, gid_range_min: i32) -> SettingsMappingMappingSettings {
    self.gid_range_min = Some(gid_range_min);
    self
  }

  pub fn gid_range_min(&self) -> Option<&i32> {
    self.gid_range_min.as_ref()
  }

  pub fn reset_gid_range_min(&mut self) {
    self.gid_range_min = None;
  }

  pub fn set_gid_range_next(&mut self, gid_range_next: i32) {
    self.gid_range_next = Some(gid_range_next);
  }

  pub fn with_gid_range_next(mut self, gid_range_next: i32) -> SettingsMappingMappingSettings {
    self.gid_range_next = Some(gid_range_next);
    self
  }

  pub fn gid_range_next(&self) -> Option<&i32> {
    self.gid_range_next.as_ref()
  }

  pub fn reset_gid_range_next(&mut self) {
    self.gid_range_next = None;
  }

  pub fn set_uid_range_enabled(&mut self, uid_range_enabled: bool) {
    self.uid_range_enabled = Some(uid_range_enabled);
  }

  pub fn with_uid_range_enabled(mut self, uid_range_enabled: bool) -> SettingsMappingMappingSettings {
    self.uid_range_enabled = Some(uid_range_enabled);
    self
  }

  pub fn uid_range_enabled(&self) -> Option<&bool> {
    self.uid_range_enabled.as_ref()
  }

  pub fn reset_uid_range_enabled(&mut self) {
    self.uid_range_enabled = None;
  }

  pub fn set_uid_range_max(&mut self, uid_range_max: i32) {
    self.uid_range_max = Some(uid_range_max);
  }

  pub fn with_uid_range_max(mut self, uid_range_max: i32) -> SettingsMappingMappingSettings {
    self.uid_range_max = Some(uid_range_max);
    self
  }

  pub fn uid_range_max(&self) -> Option<&i32> {
    self.uid_range_max.as_ref()
  }

  pub fn reset_uid_range_max(&mut self) {
    self.uid_range_max = None;
  }

  pub fn set_uid_range_min(&mut self, uid_range_min: i32) {
    self.uid_range_min = Some(uid_range_min);
  }

  pub fn with_uid_range_min(mut self, uid_range_min: i32) -> SettingsMappingMappingSettings {
    self.uid_range_min = Some(uid_range_min);
    self
  }

  pub fn uid_range_min(&self) -> Option<&i32> {
    self.uid_range_min.as_ref()
  }

  pub fn reset_uid_range_min(&mut self) {
    self.uid_range_min = None;
  }

  pub fn set_uid_range_next(&mut self, uid_range_next: i32) {
    self.uid_range_next = Some(uid_range_next);
  }

  pub fn with_uid_range_next(mut self, uid_range_next: i32) -> SettingsMappingMappingSettings {
    self.uid_range_next = Some(uid_range_next);
    self
  }

  pub fn uid_range_next(&self) -> Option<&i32> {
    self.uid_range_next.as_ref()
  }

  pub fn reset_uid_range_next(&mut self) {
    self.uid_range_next = None;
  }

}



