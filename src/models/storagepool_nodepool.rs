/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolNodepool {
  /// Use SSDs in this node pool for L3 cache.
  #[serde(rename = "l3")]
  l3: Option<bool>,
  /// The nodes that are part of this node pool.
  #[serde(rename = "lnns")]
  lnns: Option<Vec<i32>>,
  /// The node pool name.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The node pool protection policy.
  #[serde(rename = "protection_policy")]
  protection_policy: Option<String>,
  /// The name or ID of the node pool's tier, if it is in a tier.
  #[serde(rename = "tier")]
  tier: Option<String>
}

impl StoragepoolNodepool {
  pub fn new() -> StoragepoolNodepool {
    StoragepoolNodepool {
      l3: None,
      lnns: None,
      name: None,
      protection_policy: None,
      tier: None
    }
  }

  pub fn set_l3(&mut self, l3: bool) {
    self.l3 = Some(l3);
  }

  pub fn with_l3(mut self, l3: bool) -> StoragepoolNodepool {
    self.l3 = Some(l3);
    self
  }

  pub fn l3(&self) -> Option<&bool> {
    self.l3.as_ref()
  }

  pub fn reset_l3(&mut self) {
    self.l3 = None;
  }

  pub fn set_lnns(&mut self, lnns: Vec<i32>) {
    self.lnns = Some(lnns);
  }

  pub fn with_lnns(mut self, lnns: Vec<i32>) -> StoragepoolNodepool {
    self.lnns = Some(lnns);
    self
  }

  pub fn lnns(&self) -> Option<&Vec<i32>> {
    self.lnns.as_ref()
  }

  pub fn reset_lnns(&mut self) {
    self.lnns = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> StoragepoolNodepool {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_protection_policy(&mut self, protection_policy: String) {
    self.protection_policy = Some(protection_policy);
  }

  pub fn with_protection_policy(mut self, protection_policy: String) -> StoragepoolNodepool {
    self.protection_policy = Some(protection_policy);
    self
  }

  pub fn protection_policy(&self) -> Option<&String> {
    self.protection_policy.as_ref()
  }

  pub fn reset_protection_policy(&mut self) {
    self.protection_policy = None;
  }

  pub fn set_tier(&mut self, tier: String) {
    self.tier = Some(tier);
  }

  pub fn with_tier(mut self, tier: String) -> StoragepoolNodepool {
    self.tier = Some(tier);
    self
  }

  pub fn tier(&self) -> Option<&String> {
    self.tier.as_ref()
  }

  pub fn reset_tier(&mut self) {
    self.tier = None;
  }

}



