/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NfsAliasExtended {
  /// Specifies whether the alias is usable.
  #[serde(rename = "health")]
  health: Option<String>,
  /// Specifies the name by which the alias can be referenced.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Specifies the path to which the alias points.
  #[serde(rename = "path")]
  path: Option<String>,
  /// Specifies the zone in which the alias is valid.
  #[serde(rename = "zone")]
  zone: Option<String>,
  /// Specifies a string which represents the unique location of the alias.
  #[serde(rename = "id")]
  id: Option<String>
}

impl NfsAliasExtended {
  pub fn new() -> NfsAliasExtended {
    NfsAliasExtended {
      health: None,
      name: None,
      path: None,
      zone: None,
      id: None
    }
  }

  pub fn set_health(&mut self, health: String) {
    self.health = Some(health);
  }

  pub fn with_health(mut self, health: String) -> NfsAliasExtended {
    self.health = Some(health);
    self
  }

  pub fn health(&self) -> Option<&String> {
    self.health.as_ref()
  }

  pub fn reset_health(&mut self) {
    self.health = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NfsAliasExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> NfsAliasExtended {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_zone(&mut self, zone: String) {
    self.zone = Some(zone);
  }

  pub fn with_zone(mut self, zone: String) -> NfsAliasExtended {
    self.zone = Some(zone);
    self
  }

  pub fn zone(&self) -> Option<&String> {
    self.zone.as_ref()
  }

  pub fn reset_zone(&mut self) {
    self.zone = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NfsAliasExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

}



