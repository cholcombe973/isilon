/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SyncPolicyExtended {
  /// If set to true, SyncIQ will perform failback configuration tasks during the next job run, rather than waiting to perform those tasks during the failback process. Performing these tasks ahead of time will increase the speed of failback operations.
  #[serde(rename = "accelerated_failback")]
  accelerated_failback: bool,
  /// If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.
  #[serde(rename = "action")]
  action: String,
  /// NOTE: This field should not be changed without the help of Isilon support.  Enable/disable UDP-based data transfer.
  #[serde(rename = "burst_mode")]
  burst_mode: bool,
  /// If true, retain previous source snapshot and incremental repstate, both of which are required for changelist creation.
  #[serde(rename = "changelist")]
  changelist: bool,
  /// If true, the sync target performs cyclic redundancy checks (CRC) on the data as it is received.
  #[serde(rename = "check_integrity")]
  check_integrity: bool,
  /// If set to deny, replicates all CloudPools smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, the job will fail. If set to force, replicates all smartlinks to the target cluster as regular files. If set to allow, SyncIQ will attempt to replicate smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, SyncIQ will replicate the smartlinks as regular files.
  #[serde(rename = "cloud_deep_copy")]
  cloud_deep_copy: String,
  /// NOTE: This field should not be changed without the help of Isilon support.  If true, the most recent run of this policy encountered an error and this policy will not start any more scheduled jobs until this field is manually set back to 'false'.
  #[serde(rename = "conflicted")]
  conflicted: bool,
  /// User-assigned description of this sync policy.
  #[serde(rename = "description")]
  description: String,
  /// NOTE: This field should not be changed without the help of Isilon support.  If true, the 7.2+ file splitting capability will be disabled.
  #[serde(rename = "disable_file_split")]
  disable_file_split: bool,
  /// NOTE: This field should not be changed without the help of Isilon support.  Enable/disable sync failover/failback.
  #[serde(rename = "disable_fofb")]
  disable_fofb: bool,
  /// NOTE: This field should not be changed without the help of Isilon support.  Enable/disable the 6.5+ STF based data transfer and uses only treewalk.
  #[serde(rename = "disable_stf")]
  disable_stf: bool,
  /// If true, jobs will be automatically run based on this policy, according to its schedule.
  #[serde(rename = "enabled")]
  enabled: bool,
  /// NOTE: This field should not be changed without the help of Isilon support.  Continue sending files even with the corrupted filesystem.
  #[serde(rename = "expected_dataloss")]
  expected_dataloss: bool,
  /// A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.
  #[serde(rename = "file_matching_pattern")]
  file_matching_pattern: ::models::SyncJobPolicyFileMatchingPattern,
  /// NOTE: This field should not be changed without the help of Isilon support.  Determines whether data is sent only through the subnet and pool specified in the \"source_network\" field. This option can be useful if there are multiple interfaces for the given source subnet.  If you enable this option, the net.inet.ip.choose_ifa_by_ipsrc sysctl should be set.
  #[serde(rename = "force_interface")]
  force_interface: bool,
  /// This field is false if the policy is in its initial sync state and true otherwise.  Setting this field to false will reset the policy's sync state.
  #[serde(rename = "has_sync_state")]
  has_sync_state: bool,
  /// The system ID given to this sync policy.
  #[serde(rename = "id")]
  id: String,
  /// If --schedule is set to When-Source-Modified, the duration to wait after a modification is made before starting a job (default is 0 seconds).
  #[serde(rename = "job_delay")]
  job_delay: Option<i32>,
  /// This is the state of the most recent job for this policy.
  #[serde(rename = "last_job_state")]
  last_job_state: String,
  /// The most recent time a job was started for this policy.  Value is null if the policy has never been run.
  #[serde(rename = "last_started")]
  last_started: Option<i32>,
  /// Timestamp of last known successfully completed synchronization.  Value is null if the policy has never completed successfully.
  #[serde(rename = "last_success")]
  last_success: Option<i32>,
  /// Severity an event must reach before it is logged.
  #[serde(rename = "log_level")]
  log_level: String,
  /// If true, the system will log any files or directories that are deleted due to a sync.
  #[serde(rename = "log_removed_files")]
  log_removed_files: bool,
  /// User-assigned name of this sync policy.
  #[serde(rename = "name")]
  name: String,
  /// This is the next time a job is scheduled to run for this policy in Unix epoch seconds.  This field is null if the job is not scheduled.
  #[serde(rename = "next_run")]
  next_run: Option<i32>,
  /// Indicates if a password is set for accessing the target cluster. Password value is not shown with GET.
  #[serde(rename = "password_set")]
  password_set: bool,
  /// Determines the priority level of a policy. Policies with higher priority will have precedence to run over lower priority policies. Valid range is [0, 1]. Default is 0.
  #[serde(rename = "priority")]
  priority: i32,
  /// Length of time (in seconds) a policy report will be stored.
  #[serde(rename = "report_max_age")]
  report_max_age: i32,
  /// Maximum number of policy reports that will be stored on the system.
  #[serde(rename = "report_max_count")]
  report_max_count: i32,
  /// If you specify true, and you specify a SmartConnect zone in the \"target_host\" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.
  #[serde(rename = "restrict_target_network")]
  restrict_target_network: bool,
  /// If --schedule is set to a time/date, an alert is created if the specified RPO for this policy is exceeded. The default value is 0, which will not generate RPO alerts.
  #[serde(rename = "rpo_alert")]
  rpo_alert: Option<i32>,
  /// The schedule on which new jobs will be run for this policy.
  #[serde(rename = "schedule")]
  schedule: String,
  /// Skip DNS lookup of target IPs.
  #[serde(rename = "skip_lookup")]
  skip_lookup: bool,
  /// If true and --schedule is set to a time/date, the policy will not run if no changes have been made to the contents of the source directory since the last job successfully completed.
  #[serde(rename = "skip_when_source_unmodified")]
  skip_when_source_unmodified: bool,
  /// If true, snapshot-triggered syncs will include snapshots taken before policy creation time (requires --schedule when-snapshot-taken).
  #[serde(rename = "snapshot_sync_existing")]
  snapshot_sync_existing: bool,
  /// The naming pattern that a snapshot must match to trigger a sync when the schedule is when-snapshot-taken (default is \"*\").
  #[serde(rename = "snapshot_sync_pattern")]
  snapshot_sync_pattern: String,
  /// Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.
  #[serde(rename = "source_exclude_directories")]
  source_exclude_directories: Vec<String>,
  /// Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.
  #[serde(rename = "source_include_directories")]
  source_include_directories: Vec<String>,
  /// Restricts replication policies on the local cluster to running on the specified subnet and pool.
  #[serde(rename = "source_network")]
  source_network: Option<::models::SyncPolicySourceNetwork>,
  /// The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.
  #[serde(rename = "source_root_path")]
  source_root_path: String,
  /// If true, archival snapshots of the source data will be taken on the source cluster before a sync.
  #[serde(rename = "source_snapshot_archive")]
  source_snapshot_archive: bool,
  /// The length of time in seconds to keep snapshots on the source cluster.
  #[serde(rename = "source_snapshot_expiration")]
  source_snapshot_expiration: i32,
  /// The name pattern for snapshots taken on the source cluster before a sync.
  #[serde(rename = "source_snapshot_pattern")]
  source_snapshot_pattern: String,
  /// If true, the target creates diffs against the original sync.
  #[serde(rename = "target_compare_initial_sync")]
  target_compare_initial_sync: bool,
  /// If true, target cluster will detect if files have been changed on the target by legacy tree walk syncs.
  #[serde(rename = "target_detect_modifications")]
  target_detect_modifications: bool,
  /// Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.
  #[serde(rename = "target_host")]
  target_host: String,
  /// Absolute filesystem path on the target cluster for the sync destination.
  #[serde(rename = "target_path")]
  target_path: String,
  /// The alias of the snapshot taken on the target cluster after the sync completes. A value of @DEFAULT will reset this field to the default creation value.
  #[serde(rename = "target_snapshot_alias")]
  target_snapshot_alias: String,
  /// If true, archival snapshots of the target data will be taken on the target cluster after successful sync completions.
  #[serde(rename = "target_snapshot_archive")]
  target_snapshot_archive: bool,
  /// The length of time in seconds to keep snapshots on the target cluster.
  #[serde(rename = "target_snapshot_expiration")]
  target_snapshot_expiration: i32,
  /// The name pattern for snapshots taken on the target cluster after the sync completes.  A value of @DEFAULT will reset this field to the default creation value.
  #[serde(rename = "target_snapshot_pattern")]
  target_snapshot_pattern: String,
  /// The number of worker threads on a node performing a sync.
  #[serde(rename = "workers_per_node")]
  workers_per_node: i32
}

impl SyncPolicyExtended {
  pub fn new(accelerated_failback: bool, action: String, burst_mode: bool, changelist: bool, check_integrity: bool, cloud_deep_copy: String, conflicted: bool, description: String, disable_file_split: bool, disable_fofb: bool, disable_stf: bool, enabled: bool, expected_dataloss: bool, file_matching_pattern: ::models::SyncJobPolicyFileMatchingPattern, force_interface: bool, has_sync_state: bool, id: String, last_job_state: String, log_level: String, log_removed_files: bool, name: String, password_set: bool, priority: i32, report_max_age: i32, report_max_count: i32, restrict_target_network: bool, schedule: String, skip_lookup: bool, skip_when_source_unmodified: bool, snapshot_sync_existing: bool, snapshot_sync_pattern: String, source_exclude_directories: Vec<String>, source_include_directories: Vec<String>, source_root_path: String, source_snapshot_archive: bool, source_snapshot_expiration: i32, source_snapshot_pattern: String, target_compare_initial_sync: bool, target_detect_modifications: bool, target_host: String, target_path: String, target_snapshot_alias: String, target_snapshot_archive: bool, target_snapshot_expiration: i32, target_snapshot_pattern: String, workers_per_node: i32) -> SyncPolicyExtended {
    SyncPolicyExtended {
      accelerated_failback: accelerated_failback,
      action: action,
      burst_mode: burst_mode,
      changelist: changelist,
      check_integrity: check_integrity,
      cloud_deep_copy: cloud_deep_copy,
      conflicted: conflicted,
      description: description,
      disable_file_split: disable_file_split,
      disable_fofb: disable_fofb,
      disable_stf: disable_stf,
      enabled: enabled,
      expected_dataloss: expected_dataloss,
      file_matching_pattern: file_matching_pattern,
      force_interface: force_interface,
      has_sync_state: has_sync_state,
      id: id,
      job_delay: None,
      last_job_state: last_job_state,
      last_started: None,
      last_success: None,
      log_level: log_level,
      log_removed_files: log_removed_files,
      name: name,
      next_run: None,
      password_set: password_set,
      priority: priority,
      report_max_age: report_max_age,
      report_max_count: report_max_count,
      restrict_target_network: restrict_target_network,
      rpo_alert: None,
      schedule: schedule,
      skip_lookup: skip_lookup,
      skip_when_source_unmodified: skip_when_source_unmodified,
      snapshot_sync_existing: snapshot_sync_existing,
      snapshot_sync_pattern: snapshot_sync_pattern,
      source_exclude_directories: source_exclude_directories,
      source_include_directories: source_include_directories,
      source_network: None,
      source_root_path: source_root_path,
      source_snapshot_archive: source_snapshot_archive,
      source_snapshot_expiration: source_snapshot_expiration,
      source_snapshot_pattern: source_snapshot_pattern,
      target_compare_initial_sync: target_compare_initial_sync,
      target_detect_modifications: target_detect_modifications,
      target_host: target_host,
      target_path: target_path,
      target_snapshot_alias: target_snapshot_alias,
      target_snapshot_archive: target_snapshot_archive,
      target_snapshot_expiration: target_snapshot_expiration,
      target_snapshot_pattern: target_snapshot_pattern,
      workers_per_node: workers_per_node
    }
  }

  pub fn set_accelerated_failback(&mut self, accelerated_failback: bool) {
    self.accelerated_failback = accelerated_failback;
  }

  pub fn with_accelerated_failback(mut self, accelerated_failback: bool) -> SyncPolicyExtended {
    self.accelerated_failback = accelerated_failback;
    self
  }

  pub fn accelerated_failback(&self) -> &bool {
    &self.accelerated_failback
  }


  pub fn set_action(&mut self, action: String) {
    self.action = action;
  }

  pub fn with_action(mut self, action: String) -> SyncPolicyExtended {
    self.action = action;
    self
  }

  pub fn action(&self) -> &String {
    &self.action
  }


  pub fn set_burst_mode(&mut self, burst_mode: bool) {
    self.burst_mode = burst_mode;
  }

  pub fn with_burst_mode(mut self, burst_mode: bool) -> SyncPolicyExtended {
    self.burst_mode = burst_mode;
    self
  }

  pub fn burst_mode(&self) -> &bool {
    &self.burst_mode
  }


  pub fn set_changelist(&mut self, changelist: bool) {
    self.changelist = changelist;
  }

  pub fn with_changelist(mut self, changelist: bool) -> SyncPolicyExtended {
    self.changelist = changelist;
    self
  }

  pub fn changelist(&self) -> &bool {
    &self.changelist
  }


  pub fn set_check_integrity(&mut self, check_integrity: bool) {
    self.check_integrity = check_integrity;
  }

  pub fn with_check_integrity(mut self, check_integrity: bool) -> SyncPolicyExtended {
    self.check_integrity = check_integrity;
    self
  }

  pub fn check_integrity(&self) -> &bool {
    &self.check_integrity
  }


  pub fn set_cloud_deep_copy(&mut self, cloud_deep_copy: String) {
    self.cloud_deep_copy = cloud_deep_copy;
  }

  pub fn with_cloud_deep_copy(mut self, cloud_deep_copy: String) -> SyncPolicyExtended {
    self.cloud_deep_copy = cloud_deep_copy;
    self
  }

  pub fn cloud_deep_copy(&self) -> &String {
    &self.cloud_deep_copy
  }


  pub fn set_conflicted(&mut self, conflicted: bool) {
    self.conflicted = conflicted;
  }

  pub fn with_conflicted(mut self, conflicted: bool) -> SyncPolicyExtended {
    self.conflicted = conflicted;
    self
  }

  pub fn conflicted(&self) -> &bool {
    &self.conflicted
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> SyncPolicyExtended {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_disable_file_split(&mut self, disable_file_split: bool) {
    self.disable_file_split = disable_file_split;
  }

  pub fn with_disable_file_split(mut self, disable_file_split: bool) -> SyncPolicyExtended {
    self.disable_file_split = disable_file_split;
    self
  }

  pub fn disable_file_split(&self) -> &bool {
    &self.disable_file_split
  }


  pub fn set_disable_fofb(&mut self, disable_fofb: bool) {
    self.disable_fofb = disable_fofb;
  }

  pub fn with_disable_fofb(mut self, disable_fofb: bool) -> SyncPolicyExtended {
    self.disable_fofb = disable_fofb;
    self
  }

  pub fn disable_fofb(&self) -> &bool {
    &self.disable_fofb
  }


  pub fn set_disable_stf(&mut self, disable_stf: bool) {
    self.disable_stf = disable_stf;
  }

  pub fn with_disable_stf(mut self, disable_stf: bool) -> SyncPolicyExtended {
    self.disable_stf = disable_stf;
    self
  }

  pub fn disable_stf(&self) -> &bool {
    &self.disable_stf
  }


  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = enabled;
  }

  pub fn with_enabled(mut self, enabled: bool) -> SyncPolicyExtended {
    self.enabled = enabled;
    self
  }

  pub fn enabled(&self) -> &bool {
    &self.enabled
  }


  pub fn set_expected_dataloss(&mut self, expected_dataloss: bool) {
    self.expected_dataloss = expected_dataloss;
  }

  pub fn with_expected_dataloss(mut self, expected_dataloss: bool) -> SyncPolicyExtended {
    self.expected_dataloss = expected_dataloss;
    self
  }

  pub fn expected_dataloss(&self) -> &bool {
    &self.expected_dataloss
  }


  pub fn set_file_matching_pattern(&mut self, file_matching_pattern: ::models::SyncJobPolicyFileMatchingPattern) {
    self.file_matching_pattern = file_matching_pattern;
  }

  pub fn with_file_matching_pattern(mut self, file_matching_pattern: ::models::SyncJobPolicyFileMatchingPattern) -> SyncPolicyExtended {
    self.file_matching_pattern = file_matching_pattern;
    self
  }

  pub fn file_matching_pattern(&self) -> &::models::SyncJobPolicyFileMatchingPattern {
    &self.file_matching_pattern
  }


  pub fn set_force_interface(&mut self, force_interface: bool) {
    self.force_interface = force_interface;
  }

  pub fn with_force_interface(mut self, force_interface: bool) -> SyncPolicyExtended {
    self.force_interface = force_interface;
    self
  }

  pub fn force_interface(&self) -> &bool {
    &self.force_interface
  }


  pub fn set_has_sync_state(&mut self, has_sync_state: bool) {
    self.has_sync_state = has_sync_state;
  }

  pub fn with_has_sync_state(mut self, has_sync_state: bool) -> SyncPolicyExtended {
    self.has_sync_state = has_sync_state;
    self
  }

  pub fn has_sync_state(&self) -> &bool {
    &self.has_sync_state
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> SyncPolicyExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_job_delay(&mut self, job_delay: i32) {
    self.job_delay = Some(job_delay);
  }

  pub fn with_job_delay(mut self, job_delay: i32) -> SyncPolicyExtended {
    self.job_delay = Some(job_delay);
    self
  }

  pub fn job_delay(&self) -> Option<&i32> {
    self.job_delay.as_ref()
  }

  pub fn reset_job_delay(&mut self) {
    self.job_delay = None;
  }

  pub fn set_last_job_state(&mut self, last_job_state: String) {
    self.last_job_state = last_job_state;
  }

  pub fn with_last_job_state(mut self, last_job_state: String) -> SyncPolicyExtended {
    self.last_job_state = last_job_state;
    self
  }

  pub fn last_job_state(&self) -> &String {
    &self.last_job_state
  }


  pub fn set_last_started(&mut self, last_started: i32) {
    self.last_started = Some(last_started);
  }

  pub fn with_last_started(mut self, last_started: i32) -> SyncPolicyExtended {
    self.last_started = Some(last_started);
    self
  }

  pub fn last_started(&self) -> Option<&i32> {
    self.last_started.as_ref()
  }

  pub fn reset_last_started(&mut self) {
    self.last_started = None;
  }

  pub fn set_last_success(&mut self, last_success: i32) {
    self.last_success = Some(last_success);
  }

  pub fn with_last_success(mut self, last_success: i32) -> SyncPolicyExtended {
    self.last_success = Some(last_success);
    self
  }

  pub fn last_success(&self) -> Option<&i32> {
    self.last_success.as_ref()
  }

  pub fn reset_last_success(&mut self) {
    self.last_success = None;
  }

  pub fn set_log_level(&mut self, log_level: String) {
    self.log_level = log_level;
  }

  pub fn with_log_level(mut self, log_level: String) -> SyncPolicyExtended {
    self.log_level = log_level;
    self
  }

  pub fn log_level(&self) -> &String {
    &self.log_level
  }


  pub fn set_log_removed_files(&mut self, log_removed_files: bool) {
    self.log_removed_files = log_removed_files;
  }

  pub fn with_log_removed_files(mut self, log_removed_files: bool) -> SyncPolicyExtended {
    self.log_removed_files = log_removed_files;
    self
  }

  pub fn log_removed_files(&self) -> &bool {
    &self.log_removed_files
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> SyncPolicyExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_next_run(&mut self, next_run: i32) {
    self.next_run = Some(next_run);
  }

  pub fn with_next_run(mut self, next_run: i32) -> SyncPolicyExtended {
    self.next_run = Some(next_run);
    self
  }

  pub fn next_run(&self) -> Option<&i32> {
    self.next_run.as_ref()
  }

  pub fn reset_next_run(&mut self) {
    self.next_run = None;
  }

  pub fn set_password_set(&mut self, password_set: bool) {
    self.password_set = password_set;
  }

  pub fn with_password_set(mut self, password_set: bool) -> SyncPolicyExtended {
    self.password_set = password_set;
    self
  }

  pub fn password_set(&self) -> &bool {
    &self.password_set
  }


  pub fn set_priority(&mut self, priority: i32) {
    self.priority = priority;
  }

  pub fn with_priority(mut self, priority: i32) -> SyncPolicyExtended {
    self.priority = priority;
    self
  }

  pub fn priority(&self) -> &i32 {
    &self.priority
  }


  pub fn set_report_max_age(&mut self, report_max_age: i32) {
    self.report_max_age = report_max_age;
  }

  pub fn with_report_max_age(mut self, report_max_age: i32) -> SyncPolicyExtended {
    self.report_max_age = report_max_age;
    self
  }

  pub fn report_max_age(&self) -> &i32 {
    &self.report_max_age
  }


  pub fn set_report_max_count(&mut self, report_max_count: i32) {
    self.report_max_count = report_max_count;
  }

  pub fn with_report_max_count(mut self, report_max_count: i32) -> SyncPolicyExtended {
    self.report_max_count = report_max_count;
    self
  }

  pub fn report_max_count(&self) -> &i32 {
    &self.report_max_count
  }


  pub fn set_restrict_target_network(&mut self, restrict_target_network: bool) {
    self.restrict_target_network = restrict_target_network;
  }

  pub fn with_restrict_target_network(mut self, restrict_target_network: bool) -> SyncPolicyExtended {
    self.restrict_target_network = restrict_target_network;
    self
  }

  pub fn restrict_target_network(&self) -> &bool {
    &self.restrict_target_network
  }


  pub fn set_rpo_alert(&mut self, rpo_alert: i32) {
    self.rpo_alert = Some(rpo_alert);
  }

  pub fn with_rpo_alert(mut self, rpo_alert: i32) -> SyncPolicyExtended {
    self.rpo_alert = Some(rpo_alert);
    self
  }

  pub fn rpo_alert(&self) -> Option<&i32> {
    self.rpo_alert.as_ref()
  }

  pub fn reset_rpo_alert(&mut self) {
    self.rpo_alert = None;
  }

  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = schedule;
  }

  pub fn with_schedule(mut self, schedule: String) -> SyncPolicyExtended {
    self.schedule = schedule;
    self
  }

  pub fn schedule(&self) -> &String {
    &self.schedule
  }


  pub fn set_skip_lookup(&mut self, skip_lookup: bool) {
    self.skip_lookup = skip_lookup;
  }

  pub fn with_skip_lookup(mut self, skip_lookup: bool) -> SyncPolicyExtended {
    self.skip_lookup = skip_lookup;
    self
  }

  pub fn skip_lookup(&self) -> &bool {
    &self.skip_lookup
  }


  pub fn set_skip_when_source_unmodified(&mut self, skip_when_source_unmodified: bool) {
    self.skip_when_source_unmodified = skip_when_source_unmodified;
  }

  pub fn with_skip_when_source_unmodified(mut self, skip_when_source_unmodified: bool) -> SyncPolicyExtended {
    self.skip_when_source_unmodified = skip_when_source_unmodified;
    self
  }

  pub fn skip_when_source_unmodified(&self) -> &bool {
    &self.skip_when_source_unmodified
  }


  pub fn set_snapshot_sync_existing(&mut self, snapshot_sync_existing: bool) {
    self.snapshot_sync_existing = snapshot_sync_existing;
  }

  pub fn with_snapshot_sync_existing(mut self, snapshot_sync_existing: bool) -> SyncPolicyExtended {
    self.snapshot_sync_existing = snapshot_sync_existing;
    self
  }

  pub fn snapshot_sync_existing(&self) -> &bool {
    &self.snapshot_sync_existing
  }


  pub fn set_snapshot_sync_pattern(&mut self, snapshot_sync_pattern: String) {
    self.snapshot_sync_pattern = snapshot_sync_pattern;
  }

  pub fn with_snapshot_sync_pattern(mut self, snapshot_sync_pattern: String) -> SyncPolicyExtended {
    self.snapshot_sync_pattern = snapshot_sync_pattern;
    self
  }

  pub fn snapshot_sync_pattern(&self) -> &String {
    &self.snapshot_sync_pattern
  }


  pub fn set_source_exclude_directories(&mut self, source_exclude_directories: Vec<String>) {
    self.source_exclude_directories = source_exclude_directories;
  }

  pub fn with_source_exclude_directories(mut self, source_exclude_directories: Vec<String>) -> SyncPolicyExtended {
    self.source_exclude_directories = source_exclude_directories;
    self
  }

  pub fn source_exclude_directories(&self) -> &Vec<String> {
    &self.source_exclude_directories
  }


  pub fn set_source_include_directories(&mut self, source_include_directories: Vec<String>) {
    self.source_include_directories = source_include_directories;
  }

  pub fn with_source_include_directories(mut self, source_include_directories: Vec<String>) -> SyncPolicyExtended {
    self.source_include_directories = source_include_directories;
    self
  }

  pub fn source_include_directories(&self) -> &Vec<String> {
    &self.source_include_directories
  }


  pub fn set_source_network(&mut self, source_network: ::models::SyncPolicySourceNetwork) {
    self.source_network = Some(source_network);
  }

  pub fn with_source_network(mut self, source_network: ::models::SyncPolicySourceNetwork) -> SyncPolicyExtended {
    self.source_network = Some(source_network);
    self
  }

  pub fn source_network(&self) -> Option<&::models::SyncPolicySourceNetwork> {
    self.source_network.as_ref()
  }

  pub fn reset_source_network(&mut self) {
    self.source_network = None;
  }

  pub fn set_source_root_path(&mut self, source_root_path: String) {
    self.source_root_path = source_root_path;
  }

  pub fn with_source_root_path(mut self, source_root_path: String) -> SyncPolicyExtended {
    self.source_root_path = source_root_path;
    self
  }

  pub fn source_root_path(&self) -> &String {
    &self.source_root_path
  }


  pub fn set_source_snapshot_archive(&mut self, source_snapshot_archive: bool) {
    self.source_snapshot_archive = source_snapshot_archive;
  }

  pub fn with_source_snapshot_archive(mut self, source_snapshot_archive: bool) -> SyncPolicyExtended {
    self.source_snapshot_archive = source_snapshot_archive;
    self
  }

  pub fn source_snapshot_archive(&self) -> &bool {
    &self.source_snapshot_archive
  }


  pub fn set_source_snapshot_expiration(&mut self, source_snapshot_expiration: i32) {
    self.source_snapshot_expiration = source_snapshot_expiration;
  }

  pub fn with_source_snapshot_expiration(mut self, source_snapshot_expiration: i32) -> SyncPolicyExtended {
    self.source_snapshot_expiration = source_snapshot_expiration;
    self
  }

  pub fn source_snapshot_expiration(&self) -> &i32 {
    &self.source_snapshot_expiration
  }


  pub fn set_source_snapshot_pattern(&mut self, source_snapshot_pattern: String) {
    self.source_snapshot_pattern = source_snapshot_pattern;
  }

  pub fn with_source_snapshot_pattern(mut self, source_snapshot_pattern: String) -> SyncPolicyExtended {
    self.source_snapshot_pattern = source_snapshot_pattern;
    self
  }

  pub fn source_snapshot_pattern(&self) -> &String {
    &self.source_snapshot_pattern
  }


  pub fn set_target_compare_initial_sync(&mut self, target_compare_initial_sync: bool) {
    self.target_compare_initial_sync = target_compare_initial_sync;
  }

  pub fn with_target_compare_initial_sync(mut self, target_compare_initial_sync: bool) -> SyncPolicyExtended {
    self.target_compare_initial_sync = target_compare_initial_sync;
    self
  }

  pub fn target_compare_initial_sync(&self) -> &bool {
    &self.target_compare_initial_sync
  }


  pub fn set_target_detect_modifications(&mut self, target_detect_modifications: bool) {
    self.target_detect_modifications = target_detect_modifications;
  }

  pub fn with_target_detect_modifications(mut self, target_detect_modifications: bool) -> SyncPolicyExtended {
    self.target_detect_modifications = target_detect_modifications;
    self
  }

  pub fn target_detect_modifications(&self) -> &bool {
    &self.target_detect_modifications
  }


  pub fn set_target_host(&mut self, target_host: String) {
    self.target_host = target_host;
  }

  pub fn with_target_host(mut self, target_host: String) -> SyncPolicyExtended {
    self.target_host = target_host;
    self
  }

  pub fn target_host(&self) -> &String {
    &self.target_host
  }


  pub fn set_target_path(&mut self, target_path: String) {
    self.target_path = target_path;
  }

  pub fn with_target_path(mut self, target_path: String) -> SyncPolicyExtended {
    self.target_path = target_path;
    self
  }

  pub fn target_path(&self) -> &String {
    &self.target_path
  }


  pub fn set_target_snapshot_alias(&mut self, target_snapshot_alias: String) {
    self.target_snapshot_alias = target_snapshot_alias;
  }

  pub fn with_target_snapshot_alias(mut self, target_snapshot_alias: String) -> SyncPolicyExtended {
    self.target_snapshot_alias = target_snapshot_alias;
    self
  }

  pub fn target_snapshot_alias(&self) -> &String {
    &self.target_snapshot_alias
  }


  pub fn set_target_snapshot_archive(&mut self, target_snapshot_archive: bool) {
    self.target_snapshot_archive = target_snapshot_archive;
  }

  pub fn with_target_snapshot_archive(mut self, target_snapshot_archive: bool) -> SyncPolicyExtended {
    self.target_snapshot_archive = target_snapshot_archive;
    self
  }

  pub fn target_snapshot_archive(&self) -> &bool {
    &self.target_snapshot_archive
  }


  pub fn set_target_snapshot_expiration(&mut self, target_snapshot_expiration: i32) {
    self.target_snapshot_expiration = target_snapshot_expiration;
  }

  pub fn with_target_snapshot_expiration(mut self, target_snapshot_expiration: i32) -> SyncPolicyExtended {
    self.target_snapshot_expiration = target_snapshot_expiration;
    self
  }

  pub fn target_snapshot_expiration(&self) -> &i32 {
    &self.target_snapshot_expiration
  }


  pub fn set_target_snapshot_pattern(&mut self, target_snapshot_pattern: String) {
    self.target_snapshot_pattern = target_snapshot_pattern;
  }

  pub fn with_target_snapshot_pattern(mut self, target_snapshot_pattern: String) -> SyncPolicyExtended {
    self.target_snapshot_pattern = target_snapshot_pattern;
    self
  }

  pub fn target_snapshot_pattern(&self) -> &String {
    &self.target_snapshot_pattern
  }


  pub fn set_workers_per_node(&mut self, workers_per_node: i32) {
    self.workers_per_node = workers_per_node;
  }

  pub fn with_workers_per_node(mut self, workers_per_node: i32) -> SyncPolicyExtended {
    self.workers_per_node = workers_per_node;
    self
  }

  pub fn workers_per_node(&self) -> &i32 {
    &self.workers_per_node
  }


}



