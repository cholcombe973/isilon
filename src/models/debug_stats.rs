/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DebugStats : Statistics for all the methods of all URIs in the Platform API.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DebugStats {
  /// Per-method statistics.
  #[serde(rename = "DESCRIBE")]
  describe: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "UNKNOWN")]
  unknown: Option<::models::DebugStatsUnknown>,
  #[serde(rename = "handlers")]
  handlers: Option<Vec<::models::DebugStatsHandler>>
}

impl DebugStats {
  /// Statistics for all the methods of all URIs in the Platform API.
  pub fn new() -> DebugStats {
    DebugStats {
      describe: None,
      unknown: None,
      handlers: None
    }
  }

  pub fn set_describe(&mut self, describe: ::models::DebugStatsUnknown) {
    self.describe = Some(describe);
  }

  pub fn with_describe(mut self, describe: ::models::DebugStatsUnknown) -> DebugStats {
    self.describe = Some(describe);
    self
  }

  pub fn describe(&self) -> Option<&::models::DebugStatsUnknown> {
    self.describe.as_ref()
  }

  pub fn reset_describe(&mut self) {
    self.describe = None;
  }

  pub fn set_unknown(&mut self, unknown: ::models::DebugStatsUnknown) {
    self.unknown = Some(unknown);
  }

  pub fn with_unknown(mut self, unknown: ::models::DebugStatsUnknown) -> DebugStats {
    self.unknown = Some(unknown);
    self
  }

  pub fn unknown(&self) -> Option<&::models::DebugStatsUnknown> {
    self.unknown.as_ref()
  }

  pub fn reset_unknown(&mut self) {
    self.unknown = None;
  }

  pub fn set_handlers(&mut self, handlers: Vec<::models::DebugStatsHandler>) {
    self.handlers = Some(handlers);
  }

  pub fn with_handlers(mut self, handlers: Vec<::models::DebugStatsHandler>) -> DebugStats {
    self.handlers = Some(handlers);
    self
  }

  pub fn handlers(&self) -> Option<&Vec<::models::DebugStatsHandler>> {
    self.handlers.as_ref()
  }

  pub fn reset_handlers(&mut self) {
    self.handlers = None;
  }

}



