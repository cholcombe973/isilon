/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotSettingsSettings {
  /// True if the scheduled snapshot creation services is on.
  #[serde(rename = "autocreate")]
  autocreate: bool,
  /// True if the scheduled snapshot deletion services is on.
  #[serde(rename = "autodelete")]
  autodelete: bool,
  /// Global switch for other accessible and visible settings.
  #[serde(rename = "global_visible_accessible")]
  global_visible_accessible: bool,
  /// True if root .snapshot directory is accessible locally.
  #[serde(rename = "local_root_accessible")]
  local_root_accessible: bool,
  /// True if root .snapshot directory is visible locally.
  #[serde(rename = "local_root_visible")]
  local_root_visible: bool,
  /// True if sub-directory .snapshot directory is accessible locally.
  #[serde(rename = "local_subdir_accessible")]
  local_subdir_accessible: bool,
  /// True if root .snapshot directory is accessible over NFS.
  #[serde(rename = "nfs_root_accessible")]
  nfs_root_accessible: bool,
  /// True if root .snapshot directory is visible over NFS.
  #[serde(rename = "nfs_root_visible")]
  nfs_root_visible: bool,
  /// True if sub-directory .snapshot directory is accessible over NFS.
  #[serde(rename = "nfs_subdir_accessible")]
  nfs_subdir_accessible: bool,
  /// Percentage of space to reserve for snapshots.
  #[serde(rename = "reserve")]
  reserve: f32,
  /// True if the system allows snapshot creation.
  #[serde(rename = "service")]
  service: bool,
  /// True if root .snapshot directory is accessible over SMB.
  #[serde(rename = "smb_root_accessible")]
  smb_root_accessible: bool,
  /// True if root .snapshot directory is visible over SMB.
  #[serde(rename = "smb_root_visible")]
  smb_root_visible: bool,
  /// True if sub-directory .snapshot directory is accessible over SMB.
  #[serde(rename = "smb_subdir_accessible")]
  smb_subdir_accessible: bool
}

impl SnapshotSettingsSettings {
  pub fn new(autocreate: bool, autodelete: bool, global_visible_accessible: bool, local_root_accessible: bool, local_root_visible: bool, local_subdir_accessible: bool, nfs_root_accessible: bool, nfs_root_visible: bool, nfs_subdir_accessible: bool, reserve: f32, service: bool, smb_root_accessible: bool, smb_root_visible: bool, smb_subdir_accessible: bool) -> SnapshotSettingsSettings {
    SnapshotSettingsSettings {
      autocreate: autocreate,
      autodelete: autodelete,
      global_visible_accessible: global_visible_accessible,
      local_root_accessible: local_root_accessible,
      local_root_visible: local_root_visible,
      local_subdir_accessible: local_subdir_accessible,
      nfs_root_accessible: nfs_root_accessible,
      nfs_root_visible: nfs_root_visible,
      nfs_subdir_accessible: nfs_subdir_accessible,
      reserve: reserve,
      service: service,
      smb_root_accessible: smb_root_accessible,
      smb_root_visible: smb_root_visible,
      smb_subdir_accessible: smb_subdir_accessible
    }
  }

  pub fn set_autocreate(&mut self, autocreate: bool) {
    self.autocreate = autocreate;
  }

  pub fn with_autocreate(mut self, autocreate: bool) -> SnapshotSettingsSettings {
    self.autocreate = autocreate;
    self
  }

  pub fn autocreate(&self) -> &bool {
    &self.autocreate
  }


  pub fn set_autodelete(&mut self, autodelete: bool) {
    self.autodelete = autodelete;
  }

  pub fn with_autodelete(mut self, autodelete: bool) -> SnapshotSettingsSettings {
    self.autodelete = autodelete;
    self
  }

  pub fn autodelete(&self) -> &bool {
    &self.autodelete
  }


  pub fn set_global_visible_accessible(&mut self, global_visible_accessible: bool) {
    self.global_visible_accessible = global_visible_accessible;
  }

  pub fn with_global_visible_accessible(mut self, global_visible_accessible: bool) -> SnapshotSettingsSettings {
    self.global_visible_accessible = global_visible_accessible;
    self
  }

  pub fn global_visible_accessible(&self) -> &bool {
    &self.global_visible_accessible
  }


  pub fn set_local_root_accessible(&mut self, local_root_accessible: bool) {
    self.local_root_accessible = local_root_accessible;
  }

  pub fn with_local_root_accessible(mut self, local_root_accessible: bool) -> SnapshotSettingsSettings {
    self.local_root_accessible = local_root_accessible;
    self
  }

  pub fn local_root_accessible(&self) -> &bool {
    &self.local_root_accessible
  }


  pub fn set_local_root_visible(&mut self, local_root_visible: bool) {
    self.local_root_visible = local_root_visible;
  }

  pub fn with_local_root_visible(mut self, local_root_visible: bool) -> SnapshotSettingsSettings {
    self.local_root_visible = local_root_visible;
    self
  }

  pub fn local_root_visible(&self) -> &bool {
    &self.local_root_visible
  }


  pub fn set_local_subdir_accessible(&mut self, local_subdir_accessible: bool) {
    self.local_subdir_accessible = local_subdir_accessible;
  }

  pub fn with_local_subdir_accessible(mut self, local_subdir_accessible: bool) -> SnapshotSettingsSettings {
    self.local_subdir_accessible = local_subdir_accessible;
    self
  }

  pub fn local_subdir_accessible(&self) -> &bool {
    &self.local_subdir_accessible
  }


  pub fn set_nfs_root_accessible(&mut self, nfs_root_accessible: bool) {
    self.nfs_root_accessible = nfs_root_accessible;
  }

  pub fn with_nfs_root_accessible(mut self, nfs_root_accessible: bool) -> SnapshotSettingsSettings {
    self.nfs_root_accessible = nfs_root_accessible;
    self
  }

  pub fn nfs_root_accessible(&self) -> &bool {
    &self.nfs_root_accessible
  }


  pub fn set_nfs_root_visible(&mut self, nfs_root_visible: bool) {
    self.nfs_root_visible = nfs_root_visible;
  }

  pub fn with_nfs_root_visible(mut self, nfs_root_visible: bool) -> SnapshotSettingsSettings {
    self.nfs_root_visible = nfs_root_visible;
    self
  }

  pub fn nfs_root_visible(&self) -> &bool {
    &self.nfs_root_visible
  }


  pub fn set_nfs_subdir_accessible(&mut self, nfs_subdir_accessible: bool) {
    self.nfs_subdir_accessible = nfs_subdir_accessible;
  }

  pub fn with_nfs_subdir_accessible(mut self, nfs_subdir_accessible: bool) -> SnapshotSettingsSettings {
    self.nfs_subdir_accessible = nfs_subdir_accessible;
    self
  }

  pub fn nfs_subdir_accessible(&self) -> &bool {
    &self.nfs_subdir_accessible
  }


  pub fn set_reserve(&mut self, reserve: f32) {
    self.reserve = reserve;
  }

  pub fn with_reserve(mut self, reserve: f32) -> SnapshotSettingsSettings {
    self.reserve = reserve;
    self
  }

  pub fn reserve(&self) -> &f32 {
    &self.reserve
  }


  pub fn set_service(&mut self, service: bool) {
    self.service = service;
  }

  pub fn with_service(mut self, service: bool) -> SnapshotSettingsSettings {
    self.service = service;
    self
  }

  pub fn service(&self) -> &bool {
    &self.service
  }


  pub fn set_smb_root_accessible(&mut self, smb_root_accessible: bool) {
    self.smb_root_accessible = smb_root_accessible;
  }

  pub fn with_smb_root_accessible(mut self, smb_root_accessible: bool) -> SnapshotSettingsSettings {
    self.smb_root_accessible = smb_root_accessible;
    self
  }

  pub fn smb_root_accessible(&self) -> &bool {
    &self.smb_root_accessible
  }


  pub fn set_smb_root_visible(&mut self, smb_root_visible: bool) {
    self.smb_root_visible = smb_root_visible;
  }

  pub fn with_smb_root_visible(mut self, smb_root_visible: bool) -> SnapshotSettingsSettings {
    self.smb_root_visible = smb_root_visible;
    self
  }

  pub fn smb_root_visible(&self) -> &bool {
    &self.smb_root_visible
  }


  pub fn set_smb_subdir_accessible(&mut self, smb_subdir_accessible: bool) {
    self.smb_subdir_accessible = smb_subdir_accessible;
  }

  pub fn with_smb_subdir_accessible(mut self, smb_subdir_accessible: bool) -> SnapshotSettingsSettings {
    self.smb_subdir_accessible = smb_subdir_accessible;
    self
  }

  pub fn smb_subdir_accessible(&self) -> &bool {
    &self.smb_subdir_accessible
  }


}



