/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryClientClientItem {
  /// The class of the operation.
  #[serde(rename = "class")]
  class: String,
  /// Rate of input (in bytes/second) for an operation since the last time isi statistics collected the data.
  #[serde(rename = "in")]
  _in: f32,
  /// Average input (received) bytes for an operation, in bytes.
  #[serde(rename = "in_avg")]
  in_avg: f32,
  /// Maximum input (received) bytes for an operation, in bytes.
  #[serde(rename = "in_max")]
  in_max: f32,
  /// Minimum input (received) bytes for an operation, in bytes.
  #[serde(rename = "in_min")]
  in_min: f32,
  /// The IP address (in dotted-quad form) of the host receiving the operation request.
  #[serde(rename = "local_addr")]
  local_addr: String,
  /// The resolved text name of the LocalAddr, if resolution can be performed.
  #[serde(rename = "local_name")]
  local_name: String,
  /// The node on which the operation was performed.
  #[serde(rename = "node")]
  node: Option<i32>,
  /// The number of times an operation has been performed.
  #[serde(rename = "num_operations")]
  num_operations: i32,
  /// The rate (in ops/second) at which an operation has been performed.
  #[serde(rename = "operation_rate")]
  operation_rate: f32,
  /// Rate of output (in bytes/second) for an operation since the last time isi statistics collected the data.
  #[serde(rename = "out")]
  out: f32,
  /// Average output (sent) bytes for an operation, in bytes.
  #[serde(rename = "out_avg")]
  out_avg: f32,
  /// Maximum output (sent) bytes for an operation, in bytes.
  #[serde(rename = "out_max")]
  out_max: f32,
  /// Minimum output (sent) bytes for an operation, in bytes.
  #[serde(rename = "out_min")]
  out_min: f32,
  /// The protocol of the operation.
  #[serde(rename = "protocol")]
  protocol: String,
  /// The IP address (in dotted-quad form) of the host sending the operation request.
  #[serde(rename = "remote_addr")]
  remote_addr: String,
  /// The resolved text name of the RemoteAddr, if resolution can be performed.
  #[serde(rename = "remote_name")]
  remote_name: String,
  /// Unix Epoch time in seconds of the request.
  #[serde(rename = "time")]
  time: i32,
  /// The average elapsed time (in microseconds) taken to complete an operation.
  #[serde(rename = "time_avg")]
  time_avg: f32,
  /// The maximum elapsed time (in microseconds) taken to complete an operation.
  #[serde(rename = "time_max")]
  time_max: f32,
  /// The minimum elapsed time (in microseconds) taken to complete an operation.
  #[serde(rename = "time_min")]
  time_min: f32,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "user")]
  user: Option<::models::AuthAccessAccessItemFileGroup>
}

impl SummaryClientClientItem {
  pub fn new(class: String, _in: f32, in_avg: f32, in_max: f32, in_min: f32, local_addr: String, local_name: String, num_operations: i32, operation_rate: f32, out: f32, out_avg: f32, out_max: f32, out_min: f32, protocol: String, remote_addr: String, remote_name: String, time: i32, time_avg: f32, time_max: f32, time_min: f32) -> SummaryClientClientItem {
    SummaryClientClientItem {
      class: class,
      _in: _in,
      in_avg: in_avg,
      in_max: in_max,
      in_min: in_min,
      local_addr: local_addr,
      local_name: local_name,
      node: None,
      num_operations: num_operations,
      operation_rate: operation_rate,
      out: out,
      out_avg: out_avg,
      out_max: out_max,
      out_min: out_min,
      protocol: protocol,
      remote_addr: remote_addr,
      remote_name: remote_name,
      time: time,
      time_avg: time_avg,
      time_max: time_max,
      time_min: time_min,
      user: None
    }
  }

  pub fn set_class(&mut self, class: String) {
    self.class = class;
  }

  pub fn with_class(mut self, class: String) -> SummaryClientClientItem {
    self.class = class;
    self
  }

  pub fn class(&self) -> &String {
    &self.class
  }


  pub fn set_in(&mut self, _in: f32) {
    self._in = _in;
  }

  pub fn with_in(mut self, _in: f32) -> SummaryClientClientItem {
    self._in = _in;
    self
  }

  pub fn _in(&self) -> &f32 {
    &self._in
  }


  pub fn set_in_avg(&mut self, in_avg: f32) {
    self.in_avg = in_avg;
  }

  pub fn with_in_avg(mut self, in_avg: f32) -> SummaryClientClientItem {
    self.in_avg = in_avg;
    self
  }

  pub fn in_avg(&self) -> &f32 {
    &self.in_avg
  }


  pub fn set_in_max(&mut self, in_max: f32) {
    self.in_max = in_max;
  }

  pub fn with_in_max(mut self, in_max: f32) -> SummaryClientClientItem {
    self.in_max = in_max;
    self
  }

  pub fn in_max(&self) -> &f32 {
    &self.in_max
  }


  pub fn set_in_min(&mut self, in_min: f32) {
    self.in_min = in_min;
  }

  pub fn with_in_min(mut self, in_min: f32) -> SummaryClientClientItem {
    self.in_min = in_min;
    self
  }

  pub fn in_min(&self) -> &f32 {
    &self.in_min
  }


  pub fn set_local_addr(&mut self, local_addr: String) {
    self.local_addr = local_addr;
  }

  pub fn with_local_addr(mut self, local_addr: String) -> SummaryClientClientItem {
    self.local_addr = local_addr;
    self
  }

  pub fn local_addr(&self) -> &String {
    &self.local_addr
  }


  pub fn set_local_name(&mut self, local_name: String) {
    self.local_name = local_name;
  }

  pub fn with_local_name(mut self, local_name: String) -> SummaryClientClientItem {
    self.local_name = local_name;
    self
  }

  pub fn local_name(&self) -> &String {
    &self.local_name
  }


  pub fn set_node(&mut self, node: i32) {
    self.node = Some(node);
  }

  pub fn with_node(mut self, node: i32) -> SummaryClientClientItem {
    self.node = Some(node);
    self
  }

  pub fn node(&self) -> Option<&i32> {
    self.node.as_ref()
  }

  pub fn reset_node(&mut self) {
    self.node = None;
  }

  pub fn set_num_operations(&mut self, num_operations: i32) {
    self.num_operations = num_operations;
  }

  pub fn with_num_operations(mut self, num_operations: i32) -> SummaryClientClientItem {
    self.num_operations = num_operations;
    self
  }

  pub fn num_operations(&self) -> &i32 {
    &self.num_operations
  }


  pub fn set_operation_rate(&mut self, operation_rate: f32) {
    self.operation_rate = operation_rate;
  }

  pub fn with_operation_rate(mut self, operation_rate: f32) -> SummaryClientClientItem {
    self.operation_rate = operation_rate;
    self
  }

  pub fn operation_rate(&self) -> &f32 {
    &self.operation_rate
  }


  pub fn set_out(&mut self, out: f32) {
    self.out = out;
  }

  pub fn with_out(mut self, out: f32) -> SummaryClientClientItem {
    self.out = out;
    self
  }

  pub fn out(&self) -> &f32 {
    &self.out
  }


  pub fn set_out_avg(&mut self, out_avg: f32) {
    self.out_avg = out_avg;
  }

  pub fn with_out_avg(mut self, out_avg: f32) -> SummaryClientClientItem {
    self.out_avg = out_avg;
    self
  }

  pub fn out_avg(&self) -> &f32 {
    &self.out_avg
  }


  pub fn set_out_max(&mut self, out_max: f32) {
    self.out_max = out_max;
  }

  pub fn with_out_max(mut self, out_max: f32) -> SummaryClientClientItem {
    self.out_max = out_max;
    self
  }

  pub fn out_max(&self) -> &f32 {
    &self.out_max
  }


  pub fn set_out_min(&mut self, out_min: f32) {
    self.out_min = out_min;
  }

  pub fn with_out_min(mut self, out_min: f32) -> SummaryClientClientItem {
    self.out_min = out_min;
    self
  }

  pub fn out_min(&self) -> &f32 {
    &self.out_min
  }


  pub fn set_protocol(&mut self, protocol: String) {
    self.protocol = protocol;
  }

  pub fn with_protocol(mut self, protocol: String) -> SummaryClientClientItem {
    self.protocol = protocol;
    self
  }

  pub fn protocol(&self) -> &String {
    &self.protocol
  }


  pub fn set_remote_addr(&mut self, remote_addr: String) {
    self.remote_addr = remote_addr;
  }

  pub fn with_remote_addr(mut self, remote_addr: String) -> SummaryClientClientItem {
    self.remote_addr = remote_addr;
    self
  }

  pub fn remote_addr(&self) -> &String {
    &self.remote_addr
  }


  pub fn set_remote_name(&mut self, remote_name: String) {
    self.remote_name = remote_name;
  }

  pub fn with_remote_name(mut self, remote_name: String) -> SummaryClientClientItem {
    self.remote_name = remote_name;
    self
  }

  pub fn remote_name(&self) -> &String {
    &self.remote_name
  }


  pub fn set_time(&mut self, time: i32) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i32) -> SummaryClientClientItem {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i32 {
    &self.time
  }


  pub fn set_time_avg(&mut self, time_avg: f32) {
    self.time_avg = time_avg;
  }

  pub fn with_time_avg(mut self, time_avg: f32) -> SummaryClientClientItem {
    self.time_avg = time_avg;
    self
  }

  pub fn time_avg(&self) -> &f32 {
    &self.time_avg
  }


  pub fn set_time_max(&mut self, time_max: f32) {
    self.time_max = time_max;
  }

  pub fn with_time_max(mut self, time_max: f32) -> SummaryClientClientItem {
    self.time_max = time_max;
    self
  }

  pub fn time_max(&self) -> &f32 {
    &self.time_max
  }


  pub fn set_time_min(&mut self, time_min: f32) {
    self.time_min = time_min;
  }

  pub fn with_time_min(mut self, time_min: f32) -> SummaryClientClientItem {
    self.time_min = time_min;
    self
  }

  pub fn time_min(&self) -> &f32 {
    &self.time_min
  }


  pub fn set_user(&mut self, user: ::models::AuthAccessAccessItemFileGroup) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::AuthAccessAccessItemFileGroup) -> SummaryClientClientItem {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



