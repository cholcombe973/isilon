/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventChannelParameters {
  /// Email addresses to send to.
  #[serde(rename = "address")]
  address: Option<Vec<String>>,
  /// Batching criterion.
  #[serde(rename = "batch")]
  batch: Option<String>,
  /// Period over which batching is to be performed.
  #[serde(rename = "batch_period")]
  batch_period: Option<i32>,
  /// Path to custom notification template.
  #[serde(rename = "custom_template")]
  custom_template: Option<String>,
  /// Email address to use as from.
  #[serde(rename = "send_as")]
  send_as: Option<String>,
  /// SMTP relay host.
  #[serde(rename = "smtp_host")]
  smtp_host: Option<String>,
  /// Password for SMTP authentication - only if smtp_use_auth true.
  #[serde(rename = "smtp_password")]
  smtp_password: Option<String>,
  /// SMTP relay port - optional defaults to 25.
  #[serde(rename = "smtp_port")]
  smtp_port: Option<i32>,
  /// Encryption protocol to use for SMTP.
  #[serde(rename = "smtp_security")]
  smtp_security: Option<String>,
  /// Use SMTP authentication - optional defaulst to false.
  #[serde(rename = "smtp_use_auth")]
  smtp_use_auth: Option<bool>,
  /// Username for SMTP authentication - only if smtp_use_auth true.
  #[serde(rename = "smtp_username")]
  smtp_username: Option<String>,
  /// Subject for emails.
  #[serde(rename = "subject")]
  subject: Option<String>
}

impl EventChannelParameters {
  pub fn new() -> EventChannelParameters {
    EventChannelParameters {
      address: None,
      batch: None,
      batch_period: None,
      custom_template: None,
      send_as: None,
      smtp_host: None,
      smtp_password: None,
      smtp_port: None,
      smtp_security: None,
      smtp_use_auth: None,
      smtp_username: None,
      subject: None
    }
  }

  pub fn set_address(&mut self, address: Vec<String>) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: Vec<String>) -> EventChannelParameters {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&Vec<String>> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_batch(&mut self, batch: String) {
    self.batch = Some(batch);
  }

  pub fn with_batch(mut self, batch: String) -> EventChannelParameters {
    self.batch = Some(batch);
    self
  }

  pub fn batch(&self) -> Option<&String> {
    self.batch.as_ref()
  }

  pub fn reset_batch(&mut self) {
    self.batch = None;
  }

  pub fn set_batch_period(&mut self, batch_period: i32) {
    self.batch_period = Some(batch_period);
  }

  pub fn with_batch_period(mut self, batch_period: i32) -> EventChannelParameters {
    self.batch_period = Some(batch_period);
    self
  }

  pub fn batch_period(&self) -> Option<&i32> {
    self.batch_period.as_ref()
  }

  pub fn reset_batch_period(&mut self) {
    self.batch_period = None;
  }

  pub fn set_custom_template(&mut self, custom_template: String) {
    self.custom_template = Some(custom_template);
  }

  pub fn with_custom_template(mut self, custom_template: String) -> EventChannelParameters {
    self.custom_template = Some(custom_template);
    self
  }

  pub fn custom_template(&self) -> Option<&String> {
    self.custom_template.as_ref()
  }

  pub fn reset_custom_template(&mut self) {
    self.custom_template = None;
  }

  pub fn set_send_as(&mut self, send_as: String) {
    self.send_as = Some(send_as);
  }

  pub fn with_send_as(mut self, send_as: String) -> EventChannelParameters {
    self.send_as = Some(send_as);
    self
  }

  pub fn send_as(&self) -> Option<&String> {
    self.send_as.as_ref()
  }

  pub fn reset_send_as(&mut self) {
    self.send_as = None;
  }

  pub fn set_smtp_host(&mut self, smtp_host: String) {
    self.smtp_host = Some(smtp_host);
  }

  pub fn with_smtp_host(mut self, smtp_host: String) -> EventChannelParameters {
    self.smtp_host = Some(smtp_host);
    self
  }

  pub fn smtp_host(&self) -> Option<&String> {
    self.smtp_host.as_ref()
  }

  pub fn reset_smtp_host(&mut self) {
    self.smtp_host = None;
  }

  pub fn set_smtp_password(&mut self, smtp_password: String) {
    self.smtp_password = Some(smtp_password);
  }

  pub fn with_smtp_password(mut self, smtp_password: String) -> EventChannelParameters {
    self.smtp_password = Some(smtp_password);
    self
  }

  pub fn smtp_password(&self) -> Option<&String> {
    self.smtp_password.as_ref()
  }

  pub fn reset_smtp_password(&mut self) {
    self.smtp_password = None;
  }

  pub fn set_smtp_port(&mut self, smtp_port: i32) {
    self.smtp_port = Some(smtp_port);
  }

  pub fn with_smtp_port(mut self, smtp_port: i32) -> EventChannelParameters {
    self.smtp_port = Some(smtp_port);
    self
  }

  pub fn smtp_port(&self) -> Option<&i32> {
    self.smtp_port.as_ref()
  }

  pub fn reset_smtp_port(&mut self) {
    self.smtp_port = None;
  }

  pub fn set_smtp_security(&mut self, smtp_security: String) {
    self.smtp_security = Some(smtp_security);
  }

  pub fn with_smtp_security(mut self, smtp_security: String) -> EventChannelParameters {
    self.smtp_security = Some(smtp_security);
    self
  }

  pub fn smtp_security(&self) -> Option<&String> {
    self.smtp_security.as_ref()
  }

  pub fn reset_smtp_security(&mut self) {
    self.smtp_security = None;
  }

  pub fn set_smtp_use_auth(&mut self, smtp_use_auth: bool) {
    self.smtp_use_auth = Some(smtp_use_auth);
  }

  pub fn with_smtp_use_auth(mut self, smtp_use_auth: bool) -> EventChannelParameters {
    self.smtp_use_auth = Some(smtp_use_auth);
    self
  }

  pub fn smtp_use_auth(&self) -> Option<&bool> {
    self.smtp_use_auth.as_ref()
  }

  pub fn reset_smtp_use_auth(&mut self) {
    self.smtp_use_auth = None;
  }

  pub fn set_smtp_username(&mut self, smtp_username: String) {
    self.smtp_username = Some(smtp_username);
  }

  pub fn with_smtp_username(mut self, smtp_username: String) -> EventChannelParameters {
    self.smtp_username = Some(smtp_username);
    self
  }

  pub fn smtp_username(&self) -> Option<&String> {
    self.smtp_username.as_ref()
  }

  pub fn reset_smtp_username(&mut self) {
    self.smtp_username = None;
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> EventChannelParameters {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

}



