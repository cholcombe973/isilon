/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsKrb5DefaultsKrb5Settings {
  /// If true, allow the use of DES encryption
  #[serde(rename = "allow_weak_crypto")]
  allow_weak_crypto: Option<bool>,
  /// If true, always attempts to preauthenticate to the domain controller.
  #[serde(rename = "always_send_preauth")]
  always_send_preauth: Option<bool>,
  /// Specifies the realm for unqualified names.
  #[serde(rename = "default_realm")]
  default_realm: Option<String>,
  /// If true, find KDCs through the DNS.
  #[serde(rename = "dns_lookup_kdc")]
  dns_lookup_kdc: Option<bool>,
  /// If true, find realm names through the DNS.
  #[serde(rename = "dns_lookup_realm")]
  dns_lookup_realm: Option<bool>
}

impl SettingsKrb5DefaultsKrb5Settings {
  pub fn new() -> SettingsKrb5DefaultsKrb5Settings {
    SettingsKrb5DefaultsKrb5Settings {
      allow_weak_crypto: None,
      always_send_preauth: None,
      default_realm: None,
      dns_lookup_kdc: None,
      dns_lookup_realm: None
    }
  }

  pub fn set_allow_weak_crypto(&mut self, allow_weak_crypto: bool) {
    self.allow_weak_crypto = Some(allow_weak_crypto);
  }

  pub fn with_allow_weak_crypto(mut self, allow_weak_crypto: bool) -> SettingsKrb5DefaultsKrb5Settings {
    self.allow_weak_crypto = Some(allow_weak_crypto);
    self
  }

  pub fn allow_weak_crypto(&self) -> Option<&bool> {
    self.allow_weak_crypto.as_ref()
  }

  pub fn reset_allow_weak_crypto(&mut self) {
    self.allow_weak_crypto = None;
  }

  pub fn set_always_send_preauth(&mut self, always_send_preauth: bool) {
    self.always_send_preauth = Some(always_send_preauth);
  }

  pub fn with_always_send_preauth(mut self, always_send_preauth: bool) -> SettingsKrb5DefaultsKrb5Settings {
    self.always_send_preauth = Some(always_send_preauth);
    self
  }

  pub fn always_send_preauth(&self) -> Option<&bool> {
    self.always_send_preauth.as_ref()
  }

  pub fn reset_always_send_preauth(&mut self) {
    self.always_send_preauth = None;
  }

  pub fn set_default_realm(&mut self, default_realm: String) {
    self.default_realm = Some(default_realm);
  }

  pub fn with_default_realm(mut self, default_realm: String) -> SettingsKrb5DefaultsKrb5Settings {
    self.default_realm = Some(default_realm);
    self
  }

  pub fn default_realm(&self) -> Option<&String> {
    self.default_realm.as_ref()
  }

  pub fn reset_default_realm(&mut self) {
    self.default_realm = None;
  }

  pub fn set_dns_lookup_kdc(&mut self, dns_lookup_kdc: bool) {
    self.dns_lookup_kdc = Some(dns_lookup_kdc);
  }

  pub fn with_dns_lookup_kdc(mut self, dns_lookup_kdc: bool) -> SettingsKrb5DefaultsKrb5Settings {
    self.dns_lookup_kdc = Some(dns_lookup_kdc);
    self
  }

  pub fn dns_lookup_kdc(&self) -> Option<&bool> {
    self.dns_lookup_kdc.as_ref()
  }

  pub fn reset_dns_lookup_kdc(&mut self) {
    self.dns_lookup_kdc = None;
  }

  pub fn set_dns_lookup_realm(&mut self, dns_lookup_realm: bool) {
    self.dns_lookup_realm = Some(dns_lookup_realm);
  }

  pub fn with_dns_lookup_realm(mut self, dns_lookup_realm: bool) -> SettingsKrb5DefaultsKrb5Settings {
    self.dns_lookup_realm = Some(dns_lookup_realm);
    self
  }

  pub fn dns_lookup_realm(&self) -> Option<&bool> {
    self.dns_lookup_realm.as_ref()
  }

  pub fn reset_dns_lookup_realm(&mut self) {
    self.dns_lookup_realm = None;
  }

}



