/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolStatusUnhealthyItem {
  /// The affected nodes and/or drives.
  #[serde(rename = "affected")]
  affected: Vec<::models::StoragepoolStatusUnhealthyItemAffectedItem>,
  /// 
  #[serde(rename = "diskpool")]
  diskpool: Option<::models::StoragepoolStatusUnhealthyItemDiskpool>,
  /// An array of containing any health issues with this pool.  If the pool is healthy, the list is empty.
  #[serde(rename = "health_flags")]
  health_flags: Option<Vec<String>>
}

impl StoragepoolStatusUnhealthyItem {
  pub fn new(affected: Vec<::models::StoragepoolStatusUnhealthyItemAffectedItem>) -> StoragepoolStatusUnhealthyItem {
    StoragepoolStatusUnhealthyItem {
      affected: affected,
      diskpool: None,
      health_flags: None
    }
  }

  pub fn set_affected(&mut self, affected: Vec<::models::StoragepoolStatusUnhealthyItemAffectedItem>) {
    self.affected = affected;
  }

  pub fn with_affected(mut self, affected: Vec<::models::StoragepoolStatusUnhealthyItemAffectedItem>) -> StoragepoolStatusUnhealthyItem {
    self.affected = affected;
    self
  }

  pub fn affected(&self) -> &Vec<::models::StoragepoolStatusUnhealthyItemAffectedItem> {
    &self.affected
  }


  pub fn set_diskpool(&mut self, diskpool: ::models::StoragepoolStatusUnhealthyItemDiskpool) {
    self.diskpool = Some(diskpool);
  }

  pub fn with_diskpool(mut self, diskpool: ::models::StoragepoolStatusUnhealthyItemDiskpool) -> StoragepoolStatusUnhealthyItem {
    self.diskpool = Some(diskpool);
    self
  }

  pub fn diskpool(&self) -> Option<&::models::StoragepoolStatusUnhealthyItemDiskpool> {
    self.diskpool.as_ref()
  }

  pub fn reset_diskpool(&mut self) {
    self.diskpool = None;
  }

  pub fn set_health_flags(&mut self, health_flags: Vec<String>) {
    self.health_flags = Some(health_flags);
  }

  pub fn with_health_flags(mut self, health_flags: Vec<String>) -> StoragepoolStatusUnhealthyItem {
    self.health_flags = Some(health_flags);
    self
  }

  pub fn health_flags(&self) -> Option<&Vec<String>> {
    self.health_flags.as_ref()
  }

  pub fn reset_health_flags(&mut self) {
    self.health_flags = None;
  }

}



