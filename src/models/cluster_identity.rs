/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterIdentity : Unprivileged cluster information for display when logging in.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterIdentity {
  /// A description of the cluster.
  #[serde(rename = "description")]
  description: String,
  /// The information displayed when a user logs in to the cluster.
  #[serde(rename = "logon")]
  logon: ::models::ClusterIdentityLogon,
  /// Enum to control the display message about the MTTDL of the cluster. This does NOT change the MTTDL of a cluster in anyway, and is purely a value for displaying messages.
  #[serde(rename = "mttdl_level_msg")]
  mttdl_level_msg: String,
  /// The name of the cluster.
  #[serde(rename = "name")]
  name: String
}

impl ClusterIdentity {
  /// Unprivileged cluster information for display when logging in.
  pub fn new(description: String, logon: ::models::ClusterIdentityLogon, mttdl_level_msg: String, name: String) -> ClusterIdentity {
    ClusterIdentity {
      description: description,
      logon: logon,
      mttdl_level_msg: mttdl_level_msg,
      name: name
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> ClusterIdentity {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_logon(&mut self, logon: ::models::ClusterIdentityLogon) {
    self.logon = logon;
  }

  pub fn with_logon(mut self, logon: ::models::ClusterIdentityLogon) -> ClusterIdentity {
    self.logon = logon;
    self
  }

  pub fn logon(&self) -> &::models::ClusterIdentityLogon {
    &self.logon
  }


  pub fn set_mttdl_level_msg(&mut self, mttdl_level_msg: String) {
    self.mttdl_level_msg = mttdl_level_msg;
  }

  pub fn with_mttdl_level_msg(mut self, mttdl_level_msg: String) -> ClusterIdentity {
    self.mttdl_level_msg = mttdl_level_msg;
    self
  }

  pub fn mttdl_level_msg(&self) -> &String {
    &self.mttdl_level_msg
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ClusterIdentity {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


}



