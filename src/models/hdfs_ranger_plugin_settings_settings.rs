/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HdfsRangerPluginSettingsSettings {
  /// Enable or disable the HDFS ranger plugin
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// The scheme, hostname, and port of the Apache Ranger server (e.g. http://ranger.com:6080)
  #[serde(rename = "policy_manager_url")]
  policy_manager_url: Option<String>,
  /// The HDFS repository name that is registered with Apache Ranger server
  #[serde(rename = "repository_name")]
  repository_name: Option<String>
}

impl HdfsRangerPluginSettingsSettings {
  pub fn new() -> HdfsRangerPluginSettingsSettings {
    HdfsRangerPluginSettingsSettings {
      enabled: None,
      policy_manager_url: None,
      repository_name: None
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> HdfsRangerPluginSettingsSettings {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_policy_manager_url(&mut self, policy_manager_url: String) {
    self.policy_manager_url = Some(policy_manager_url);
  }

  pub fn with_policy_manager_url(mut self, policy_manager_url: String) -> HdfsRangerPluginSettingsSettings {
    self.policy_manager_url = Some(policy_manager_url);
    self
  }

  pub fn policy_manager_url(&self) -> Option<&String> {
    self.policy_manager_url.as_ref()
  }

  pub fn reset_policy_manager_url(&mut self) {
    self.policy_manager_url = None;
  }

  pub fn set_repository_name(&mut self, repository_name: String) {
    self.repository_name = Some(repository_name);
  }

  pub fn with_repository_name(mut self, repository_name: String) -> HdfsRangerPluginSettingsSettings {
    self.repository_name = Some(repository_name);
    self
  }

  pub fn repository_name(&self) -> Option<&String> {
    self.repository_name.as_ref()
  }

  pub fn reset_repository_name(&mut self) {
    self.repository_name = None;
  }

}



