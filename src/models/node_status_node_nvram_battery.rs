/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStatusNodeNvramBattery {
  /// The current status color of the NVRAM battery.
  #[serde(rename = "color")]
  color: Option<String>,
  /// Identifying index for the NVRAM battery.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// The current status message of the NVRAM battery.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The current voltage of the NVRAM battery.
  #[serde(rename = "voltage")]
  voltage: Option<String>
}

impl NodeStatusNodeNvramBattery {
  pub fn new() -> NodeStatusNodeNvramBattery {
    NodeStatusNodeNvramBattery {
      color: None,
      id: None,
      status: None,
      voltage: None
    }
  }

  pub fn set_color(&mut self, color: String) {
    self.color = Some(color);
  }

  pub fn with_color(mut self, color: String) -> NodeStatusNodeNvramBattery {
    self.color = Some(color);
    self
  }

  pub fn color(&self) -> Option<&String> {
    self.color.as_ref()
  }

  pub fn reset_color(&mut self) {
    self.color = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> NodeStatusNodeNvramBattery {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> NodeStatusNodeNvramBattery {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_voltage(&mut self, voltage: String) {
    self.voltage = Some(voltage);
  }

  pub fn with_voltage(mut self, voltage: String) -> NodeStatusNodeNvramBattery {
    self.voltage = Some(voltage);
    self
  }

  pub fn voltage(&self) -> Option<&String> {
    self.voltage.as_ref()
  }

  pub fn reset_voltage(&mut self) {
    self.voltage = None;
  }

}



