/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaQuotasSummarySummary {
  /// Total number of quotas.
  #[serde(rename = "count")]
  count: i32,
  /// Total number of default-group quotas.
  #[serde(rename = "default_group_quotas_count")]
  default_group_quotas_count: i32,
  /// Total number of default-user quotas.
  #[serde(rename = "default_user_quotas_count")]
  default_user_quotas_count: i32,
  /// Total number of directory quotas.
  #[serde(rename = "directory_quotas_count")]
  directory_quotas_count: i32,
  /// Total number of -group quotas.
  #[serde(rename = "group_quotas_count")]
  group_quotas_count: i32,
  /// Total number of user and group totals that are linked.
  #[serde(rename = "linked_quotas_count")]
  linked_quotas_count: i32,
  /// Total number of user quotas.
  #[serde(rename = "user_quotas_count")]
  user_quotas_count: i32
}

impl QuotaQuotasSummarySummary {
  pub fn new(count: i32, default_group_quotas_count: i32, default_user_quotas_count: i32, directory_quotas_count: i32, group_quotas_count: i32, linked_quotas_count: i32, user_quotas_count: i32) -> QuotaQuotasSummarySummary {
    QuotaQuotasSummarySummary {
      count: count,
      default_group_quotas_count: default_group_quotas_count,
      default_user_quotas_count: default_user_quotas_count,
      directory_quotas_count: directory_quotas_count,
      group_quotas_count: group_quotas_count,
      linked_quotas_count: linked_quotas_count,
      user_quotas_count: user_quotas_count
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = count;
  }

  pub fn with_count(mut self, count: i32) -> QuotaQuotasSummarySummary {
    self.count = count;
    self
  }

  pub fn count(&self) -> &i32 {
    &self.count
  }


  pub fn set_default_group_quotas_count(&mut self, default_group_quotas_count: i32) {
    self.default_group_quotas_count = default_group_quotas_count;
  }

  pub fn with_default_group_quotas_count(mut self, default_group_quotas_count: i32) -> QuotaQuotasSummarySummary {
    self.default_group_quotas_count = default_group_quotas_count;
    self
  }

  pub fn default_group_quotas_count(&self) -> &i32 {
    &self.default_group_quotas_count
  }


  pub fn set_default_user_quotas_count(&mut self, default_user_quotas_count: i32) {
    self.default_user_quotas_count = default_user_quotas_count;
  }

  pub fn with_default_user_quotas_count(mut self, default_user_quotas_count: i32) -> QuotaQuotasSummarySummary {
    self.default_user_quotas_count = default_user_quotas_count;
    self
  }

  pub fn default_user_quotas_count(&self) -> &i32 {
    &self.default_user_quotas_count
  }


  pub fn set_directory_quotas_count(&mut self, directory_quotas_count: i32) {
    self.directory_quotas_count = directory_quotas_count;
  }

  pub fn with_directory_quotas_count(mut self, directory_quotas_count: i32) -> QuotaQuotasSummarySummary {
    self.directory_quotas_count = directory_quotas_count;
    self
  }

  pub fn directory_quotas_count(&self) -> &i32 {
    &self.directory_quotas_count
  }


  pub fn set_group_quotas_count(&mut self, group_quotas_count: i32) {
    self.group_quotas_count = group_quotas_count;
  }

  pub fn with_group_quotas_count(mut self, group_quotas_count: i32) -> QuotaQuotasSummarySummary {
    self.group_quotas_count = group_quotas_count;
    self
  }

  pub fn group_quotas_count(&self) -> &i32 {
    &self.group_quotas_count
  }


  pub fn set_linked_quotas_count(&mut self, linked_quotas_count: i32) {
    self.linked_quotas_count = linked_quotas_count;
  }

  pub fn with_linked_quotas_count(mut self, linked_quotas_count: i32) -> QuotaQuotasSummarySummary {
    self.linked_quotas_count = linked_quotas_count;
    self
  }

  pub fn linked_quotas_count(&self) -> &i32 {
    &self.linked_quotas_count
  }


  pub fn set_user_quotas_count(&mut self, user_quotas_count: i32) {
    self.user_quotas_count = user_quotas_count;
  }

  pub fn with_user_quotas_count(mut self, user_quotas_count: i32) -> QuotaQuotasSummarySummary {
    self.user_quotas_count = user_quotas_count;
    self
  }

  pub fn user_quotas_count(&self) -> &i32 {
    &self.user_quotas_count
  }


}



