/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NamespaceObject {
  /// Specifies the date when the object was last accessed in HTTP date/time format.
  #[serde(rename = "access_time")]
  access_time: Option<String>,
  /// Specifies the time when the object was last accessed in UNIX Epoch format.
  #[serde(rename = "atime_val")]
  atime_val: Option<i32>,
  /// Specifies the block size of the object.
  #[serde(rename = "block_size")]
  block_size: Option<i32>,
  /// Specifies the number of blocks that compose the object.
  #[serde(rename = "blocks")]
  blocks: Option<i32>,
  /// Specifies the time when the object data was created in UNIX Epoch format.
  #[serde(rename = "btime_val")]
  btime_val: Option<i32>,
  /// Specifies the date when the object was last changed (including data and metadata changes) in HTTP date/time format.
  #[serde(rename = "change_time")]
  change_time: Option<String>,
  /// Specifies the date when the object data was created in HTTP date/time format.
  #[serde(rename = "create_time")]
  create_time: Option<String>,
  /// Specifies the time when the object was last changed (including data and metadata changes) in UNIX Epoch format.
  #[serde(rename = "ctime_val")]
  ctime_val: Option<i32>,
  /// Specifies the GID for the owner.
  #[serde(rename = "gid")]
  gid: Option<i32>,
  /// Specifies the group name for the owner of the object.
  #[serde(rename = "group")]
  group: Option<String>,
  /// Specifies the object ID, which is also the INODE number.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Specifies whether the file is hidden or not.
  #[serde(rename = "is_hidden")]
  is_hidden: Option<bool>,
  /// Specifies the time when the object data was last modified in HTTP date/time format.
  #[serde(rename = "last_modified")]
  last_modified: Option<String>,
  /// Specifies the UNIX mode octal number.
  #[serde(rename = "mode")]
  mode: Option<String>,
  /// Specifies the time when the object data was last modified in UNIX Epoch format.
  #[serde(rename = "mtime_val")]
  mtime_val: Option<i32>,
  /// Specifies the name of the object.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Specifies the number of hard links to the object.
  #[serde(rename = "nlink")]
  nlink: Option<i32>,
  /// Specifies the user name for the owner of the object.
  #[serde(rename = "owner")]
  owner: Option<String>,
  /// Specifies the size of the object in bytes.
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "stub")]
  stub: Option<bool>,
  /// Specifies the object type, which can be one of the following values: container, object, pipe, character_device, block_device, symbolic_link, socket, or whiteout_file.
  #[serde(rename = "type")]
  _type: Option<String>,
  /// Specifies the UID for the owner.
  #[serde(rename = "uid")]
  uid: Option<i32>
}

impl NamespaceObject {
  pub fn new() -> NamespaceObject {
    NamespaceObject {
      access_time: None,
      atime_val: None,
      block_size: None,
      blocks: None,
      btime_val: None,
      change_time: None,
      create_time: None,
      ctime_val: None,
      gid: None,
      group: None,
      id: None,
      is_hidden: None,
      last_modified: None,
      mode: None,
      mtime_val: None,
      name: None,
      nlink: None,
      owner: None,
      size: None,
      stub: None,
      _type: None,
      uid: None
    }
  }

  pub fn set_access_time(&mut self, access_time: String) {
    self.access_time = Some(access_time);
  }

  pub fn with_access_time(mut self, access_time: String) -> NamespaceObject {
    self.access_time = Some(access_time);
    self
  }

  pub fn access_time(&self) -> Option<&String> {
    self.access_time.as_ref()
  }

  pub fn reset_access_time(&mut self) {
    self.access_time = None;
  }

  pub fn set_atime_val(&mut self, atime_val: i32) {
    self.atime_val = Some(atime_val);
  }

  pub fn with_atime_val(mut self, atime_val: i32) -> NamespaceObject {
    self.atime_val = Some(atime_val);
    self
  }

  pub fn atime_val(&self) -> Option<&i32> {
    self.atime_val.as_ref()
  }

  pub fn reset_atime_val(&mut self) {
    self.atime_val = None;
  }

  pub fn set_block_size(&mut self, block_size: i32) {
    self.block_size = Some(block_size);
  }

  pub fn with_block_size(mut self, block_size: i32) -> NamespaceObject {
    self.block_size = Some(block_size);
    self
  }

  pub fn block_size(&self) -> Option<&i32> {
    self.block_size.as_ref()
  }

  pub fn reset_block_size(&mut self) {
    self.block_size = None;
  }

  pub fn set_blocks(&mut self, blocks: i32) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: i32) -> NamespaceObject {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&i32> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_btime_val(&mut self, btime_val: i32) {
    self.btime_val = Some(btime_val);
  }

  pub fn with_btime_val(mut self, btime_val: i32) -> NamespaceObject {
    self.btime_val = Some(btime_val);
    self
  }

  pub fn btime_val(&self) -> Option<&i32> {
    self.btime_val.as_ref()
  }

  pub fn reset_btime_val(&mut self) {
    self.btime_val = None;
  }

  pub fn set_change_time(&mut self, change_time: String) {
    self.change_time = Some(change_time);
  }

  pub fn with_change_time(mut self, change_time: String) -> NamespaceObject {
    self.change_time = Some(change_time);
    self
  }

  pub fn change_time(&self) -> Option<&String> {
    self.change_time.as_ref()
  }

  pub fn reset_change_time(&mut self) {
    self.change_time = None;
  }

  pub fn set_create_time(&mut self, create_time: String) {
    self.create_time = Some(create_time);
  }

  pub fn with_create_time(mut self, create_time: String) -> NamespaceObject {
    self.create_time = Some(create_time);
    self
  }

  pub fn create_time(&self) -> Option<&String> {
    self.create_time.as_ref()
  }

  pub fn reset_create_time(&mut self) {
    self.create_time = None;
  }

  pub fn set_ctime_val(&mut self, ctime_val: i32) {
    self.ctime_val = Some(ctime_val);
  }

  pub fn with_ctime_val(mut self, ctime_val: i32) -> NamespaceObject {
    self.ctime_val = Some(ctime_val);
    self
  }

  pub fn ctime_val(&self) -> Option<&i32> {
    self.ctime_val.as_ref()
  }

  pub fn reset_ctime_val(&mut self) {
    self.ctime_val = None;
  }

  pub fn set_gid(&mut self, gid: i32) {
    self.gid = Some(gid);
  }

  pub fn with_gid(mut self, gid: i32) -> NamespaceObject {
    self.gid = Some(gid);
    self
  }

  pub fn gid(&self) -> Option<&i32> {
    self.gid.as_ref()
  }

  pub fn reset_gid(&mut self) {
    self.gid = None;
  }

  pub fn set_group(&mut self, group: String) {
    self.group = Some(group);
  }

  pub fn with_group(mut self, group: String) -> NamespaceObject {
    self.group = Some(group);
    self
  }

  pub fn group(&self) -> Option<&String> {
    self.group.as_ref()
  }

  pub fn reset_group(&mut self) {
    self.group = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> NamespaceObject {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_is_hidden(&mut self, is_hidden: bool) {
    self.is_hidden = Some(is_hidden);
  }

  pub fn with_is_hidden(mut self, is_hidden: bool) -> NamespaceObject {
    self.is_hidden = Some(is_hidden);
    self
  }

  pub fn is_hidden(&self) -> Option<&bool> {
    self.is_hidden.as_ref()
  }

  pub fn reset_is_hidden(&mut self) {
    self.is_hidden = None;
  }

  pub fn set_last_modified(&mut self, last_modified: String) {
    self.last_modified = Some(last_modified);
  }

  pub fn with_last_modified(mut self, last_modified: String) -> NamespaceObject {
    self.last_modified = Some(last_modified);
    self
  }

  pub fn last_modified(&self) -> Option<&String> {
    self.last_modified.as_ref()
  }

  pub fn reset_last_modified(&mut self) {
    self.last_modified = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: String) -> NamespaceObject {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&String> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_mtime_val(&mut self, mtime_val: i32) {
    self.mtime_val = Some(mtime_val);
  }

  pub fn with_mtime_val(mut self, mtime_val: i32) -> NamespaceObject {
    self.mtime_val = Some(mtime_val);
    self
  }

  pub fn mtime_val(&self) -> Option<&i32> {
    self.mtime_val.as_ref()
  }

  pub fn reset_mtime_val(&mut self) {
    self.mtime_val = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NamespaceObject {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_nlink(&mut self, nlink: i32) {
    self.nlink = Some(nlink);
  }

  pub fn with_nlink(mut self, nlink: i32) -> NamespaceObject {
    self.nlink = Some(nlink);
    self
  }

  pub fn nlink(&self) -> Option<&i32> {
    self.nlink.as_ref()
  }

  pub fn reset_nlink(&mut self) {
    self.nlink = None;
  }

  pub fn set_owner(&mut self, owner: String) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: String) -> NamespaceObject {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&String> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> NamespaceObject {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_stub(&mut self, stub: bool) {
    self.stub = Some(stub);
  }

  pub fn with_stub(mut self, stub: bool) -> NamespaceObject {
    self.stub = Some(stub);
    self
  }

  pub fn stub(&self) -> Option<&bool> {
    self.stub.as_ref()
  }

  pub fn reset_stub(&mut self) {
    self.stub = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> NamespaceObject {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_uid(&mut self, uid: i32) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: i32) -> NamespaceObject {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&i32> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

}



