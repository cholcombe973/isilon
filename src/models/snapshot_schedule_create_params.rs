/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotScheduleCreateParams {
  /// Alias name to create for each snapshot.
  #[serde(rename = "alias")]
  alias: Option<String>,
  /// Time in seconds added to creation time to construction expiration time.
  #[serde(rename = "duration")]
  duration: Option<i32>,
  /// The schedule name.
  #[serde(rename = "name")]
  name: String,
  /// The /ifs path snapshotted.
  #[serde(rename = "path")]
  path: String,
  /// Pattern expanded with strftime to create snapshot names.
  #[serde(rename = "pattern")]
  pattern: String,
  /// The isidate compatible natural language description of the schedule.
  #[serde(rename = "schedule")]
  schedule: String
}

impl SnapshotScheduleCreateParams {
  pub fn new(name: String, path: String, pattern: String, schedule: String) -> SnapshotScheduleCreateParams {
    SnapshotScheduleCreateParams {
      alias: None,
      duration: None,
      name: name,
      path: path,
      pattern: pattern,
      schedule: schedule
    }
  }

  pub fn set_alias(&mut self, alias: String) {
    self.alias = Some(alias);
  }

  pub fn with_alias(mut self, alias: String) -> SnapshotScheduleCreateParams {
    self.alias = Some(alias);
    self
  }

  pub fn alias(&self) -> Option<&String> {
    self.alias.as_ref()
  }

  pub fn reset_alias(&mut self) {
    self.alias = None;
  }

  pub fn set_duration(&mut self, duration: i32) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i32) -> SnapshotScheduleCreateParams {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i32> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> SnapshotScheduleCreateParams {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> SnapshotScheduleCreateParams {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_pattern(&mut self, pattern: String) {
    self.pattern = pattern;
  }

  pub fn with_pattern(mut self, pattern: String) -> SnapshotScheduleCreateParams {
    self.pattern = pattern;
    self
  }

  pub fn pattern(&self) -> &String {
    &self.pattern
  }


  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = schedule;
  }

  pub fn with_schedule(mut self, schedule: String) -> SnapshotScheduleCreateParams {
    self.schedule = schedule;
    self
  }

  pub fn schedule(&self) -> &String {
    &self.schedule
  }


}



