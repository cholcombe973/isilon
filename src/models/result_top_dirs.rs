/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResultTopDirs {
  /// Change in directory ranking from result set comparison.
  #[serde(rename = "change")]
  change: Option<i32>,
  /// Directory access time enabled.
  #[serde(rename = "dir_atime_enabled")]
  dir_atime_enabled: bool,
  /// Directory listing.
  #[serde(rename = "dirs")]
  dirs: Vec<::models::ResultTopDirsDir>,
  /// Limit on number of top results.
  #[serde(rename = "top_n_max")]
  top_n_max: i32,
  /// Total count of directory results.
  #[serde(rename = "total_count")]
  total_count: i32
}

impl ResultTopDirs {
  pub fn new(dir_atime_enabled: bool, dirs: Vec<::models::ResultTopDirsDir>, top_n_max: i32, total_count: i32) -> ResultTopDirs {
    ResultTopDirs {
      change: None,
      dir_atime_enabled: dir_atime_enabled,
      dirs: dirs,
      top_n_max: top_n_max,
      total_count: total_count
    }
  }

  pub fn set_change(&mut self, change: i32) {
    self.change = Some(change);
  }

  pub fn with_change(mut self, change: i32) -> ResultTopDirs {
    self.change = Some(change);
    self
  }

  pub fn change(&self) -> Option<&i32> {
    self.change.as_ref()
  }

  pub fn reset_change(&mut self) {
    self.change = None;
  }

  pub fn set_dir_atime_enabled(&mut self, dir_atime_enabled: bool) {
    self.dir_atime_enabled = dir_atime_enabled;
  }

  pub fn with_dir_atime_enabled(mut self, dir_atime_enabled: bool) -> ResultTopDirs {
    self.dir_atime_enabled = dir_atime_enabled;
    self
  }

  pub fn dir_atime_enabled(&self) -> &bool {
    &self.dir_atime_enabled
  }


  pub fn set_dirs(&mut self, dirs: Vec<::models::ResultTopDirsDir>) {
    self.dirs = dirs;
  }

  pub fn with_dirs(mut self, dirs: Vec<::models::ResultTopDirsDir>) -> ResultTopDirs {
    self.dirs = dirs;
    self
  }

  pub fn dirs(&self) -> &Vec<::models::ResultTopDirsDir> {
    &self.dirs
  }


  pub fn set_top_n_max(&mut self, top_n_max: i32) {
    self.top_n_max = top_n_max;
  }

  pub fn with_top_n_max(mut self, top_n_max: i32) -> ResultTopDirs {
    self.top_n_max = top_n_max;
    self
  }

  pub fn top_n_max(&self) -> &i32 {
    &self.top_n_max
  }


  pub fn set_total_count(&mut self, total_count: i32) {
    self.total_count = total_count;
  }

  pub fn with_total_count(mut self, total_count: i32) -> ResultTopDirs {
    self.total_count = total_count;
    self
  }

  pub fn total_count(&self) -> &i32 {
    &self.total_count
  }


}



