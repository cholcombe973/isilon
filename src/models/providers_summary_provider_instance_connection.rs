/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProvidersSummaryProviderInstanceConnection {
  /// Specifies the IP address of the provider.
  #[serde(rename = "address")]
  address: Option<String>,
  /// Specifies the last time the server was contacted.
  #[serde(rename = "last_used")]
  last_used: Option<String>,
  /// Specifies the fully qualified domain name of the server.
  #[serde(rename = "server")]
  server: Option<String>
}

impl ProvidersSummaryProviderInstanceConnection {
  pub fn new() -> ProvidersSummaryProviderInstanceConnection {
    ProvidersSummaryProviderInstanceConnection {
      address: None,
      last_used: None,
      server: None
    }
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> ProvidersSummaryProviderInstanceConnection {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_last_used(&mut self, last_used: String) {
    self.last_used = Some(last_used);
  }

  pub fn with_last_used(mut self, last_used: String) -> ProvidersSummaryProviderInstanceConnection {
    self.last_used = Some(last_used);
    self
  }

  pub fn last_used(&self) -> Option<&String> {
    self.last_used.as_ref()
  }

  pub fn reset_last_used(&mut self) {
    self.last_used = None;
  }

  pub fn set_server(&mut self, server: String) {
    self.server = Some(server);
  }

  pub fn with_server(mut self, server: String) -> ProvidersSummaryProviderInstanceConnection {
    self.server = Some(server);
    self
  }

  pub fn server(&self) -> Option<&String> {
    self.server.as_ref()
  }

  pub fn reset_server(&mut self) {
    self.server = None;
  }

}



