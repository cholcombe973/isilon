/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RemotesupportConnectemcConnectemc {
  /// Email the customer if all transmission methods fail.
  #[serde(rename = "email_customer_on_failure")]
  email_customer_on_failure: Option<bool>,
  /// Enable ConnectEMC.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.
  #[serde(rename = "gateway_access_pools")]
  gateway_access_pools: Option<Vec<String>>,
  /// Primary ESRS Gateway. Necessary to enable ConnectEMC.
  #[serde(rename = "primary_esrs_gateway")]
  primary_esrs_gateway: Option<String>,
  /// Secondary ESRS Gateway. Used if Primary is unavailable.
  #[serde(rename = "secondary_esrs_gateway")]
  secondary_esrs_gateway: Option<String>,
  /// Use SMPT if primary and secondary gateways are unavailable.
  #[serde(rename = "use_smtp_failover")]
  use_smtp_failover: Option<bool>
}

impl RemotesupportConnectemcConnectemc {
  pub fn new() -> RemotesupportConnectemcConnectemc {
    RemotesupportConnectemcConnectemc {
      email_customer_on_failure: None,
      enabled: None,
      gateway_access_pools: None,
      primary_esrs_gateway: None,
      secondary_esrs_gateway: None,
      use_smtp_failover: None
    }
  }

  pub fn set_email_customer_on_failure(&mut self, email_customer_on_failure: bool) {
    self.email_customer_on_failure = Some(email_customer_on_failure);
  }

  pub fn with_email_customer_on_failure(mut self, email_customer_on_failure: bool) -> RemotesupportConnectemcConnectemc {
    self.email_customer_on_failure = Some(email_customer_on_failure);
    self
  }

  pub fn email_customer_on_failure(&self) -> Option<&bool> {
    self.email_customer_on_failure.as_ref()
  }

  pub fn reset_email_customer_on_failure(&mut self) {
    self.email_customer_on_failure = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> RemotesupportConnectemcConnectemc {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_gateway_access_pools(&mut self, gateway_access_pools: Vec<String>) {
    self.gateway_access_pools = Some(gateway_access_pools);
  }

  pub fn with_gateway_access_pools(mut self, gateway_access_pools: Vec<String>) -> RemotesupportConnectemcConnectemc {
    self.gateway_access_pools = Some(gateway_access_pools);
    self
  }

  pub fn gateway_access_pools(&self) -> Option<&Vec<String>> {
    self.gateway_access_pools.as_ref()
  }

  pub fn reset_gateway_access_pools(&mut self) {
    self.gateway_access_pools = None;
  }

  pub fn set_primary_esrs_gateway(&mut self, primary_esrs_gateway: String) {
    self.primary_esrs_gateway = Some(primary_esrs_gateway);
  }

  pub fn with_primary_esrs_gateway(mut self, primary_esrs_gateway: String) -> RemotesupportConnectemcConnectemc {
    self.primary_esrs_gateway = Some(primary_esrs_gateway);
    self
  }

  pub fn primary_esrs_gateway(&self) -> Option<&String> {
    self.primary_esrs_gateway.as_ref()
  }

  pub fn reset_primary_esrs_gateway(&mut self) {
    self.primary_esrs_gateway = None;
  }

  pub fn set_secondary_esrs_gateway(&mut self, secondary_esrs_gateway: String) {
    self.secondary_esrs_gateway = Some(secondary_esrs_gateway);
  }

  pub fn with_secondary_esrs_gateway(mut self, secondary_esrs_gateway: String) -> RemotesupportConnectemcConnectemc {
    self.secondary_esrs_gateway = Some(secondary_esrs_gateway);
    self
  }

  pub fn secondary_esrs_gateway(&self) -> Option<&String> {
    self.secondary_esrs_gateway.as_ref()
  }

  pub fn reset_secondary_esrs_gateway(&mut self) {
    self.secondary_esrs_gateway = None;
  }

  pub fn set_use_smtp_failover(&mut self, use_smtp_failover: bool) {
    self.use_smtp_failover = Some(use_smtp_failover);
  }

  pub fn with_use_smtp_failover(mut self, use_smtp_failover: bool) -> RemotesupportConnectemcConnectemc {
    self.use_smtp_failover = Some(use_smtp_failover);
    self
  }

  pub fn use_smtp_failover(&self) -> Option<&bool> {
    self.use_smtp_failover.as_ref()
  }

  pub fn reset_use_smtp_failover(&mut self) {
    self.use_smtp_failover = None;
  }

}



