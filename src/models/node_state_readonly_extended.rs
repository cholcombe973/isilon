/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeStateReadonlyExtended : Node readonly state.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStateReadonlyExtended {
  /// The current read-only mode allowed status for the node.
  #[serde(rename = "allowed")]
  allowed: Option<bool>,
  /// The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// The current read-only mode status for the node.
  #[serde(rename = "mode")]
  mode: Option<bool>,
  /// The current read-only mode status description for the node.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The read-only state values are valid (False = Error).
  #[serde(rename = "valid")]
  valid: Option<bool>,
  /// The current read-only value (enumerated bitfield) for the node.
  #[serde(rename = "value")]
  value: Option<i32>
}

impl NodeStateReadonlyExtended {
  /// Node readonly state.
  pub fn new() -> NodeStateReadonlyExtended {
    NodeStateReadonlyExtended {
      allowed: None,
      enabled: None,
      mode: None,
      status: None,
      valid: None,
      value: None
    }
  }

  pub fn set_allowed(&mut self, allowed: bool) {
    self.allowed = Some(allowed);
  }

  pub fn with_allowed(mut self, allowed: bool) -> NodeStateReadonlyExtended {
    self.allowed = Some(allowed);
    self
  }

  pub fn allowed(&self) -> Option<&bool> {
    self.allowed.as_ref()
  }

  pub fn reset_allowed(&mut self) {
    self.allowed = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> NodeStateReadonlyExtended {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_mode(&mut self, mode: bool) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: bool) -> NodeStateReadonlyExtended {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&bool> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> NodeStateReadonlyExtended {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_valid(&mut self, valid: bool) {
    self.valid = Some(valid);
  }

  pub fn with_valid(mut self, valid: bool) -> NodeStateReadonlyExtended {
    self.valid = Some(valid);
    self
  }

  pub fn valid(&self) -> Option<&bool> {
    self.valid.as_ref()
  }

  pub fn reset_valid(&mut self) {
    self.valid = None;
  }

  pub fn set_value(&mut self, value: i32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: i32) -> NodeStateReadonlyExtended {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&i32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



