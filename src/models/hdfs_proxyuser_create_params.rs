/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// HdfsProxyuserCreateParams : This is hdfs impersonation information of a proxyuser

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HdfsProxyuserCreateParams {
  /// The ID of the role.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Users or groups impersonated by proxyuser.
  #[serde(rename = "members")]
  members: Option<Vec<::models::AuthAccessAccessItemFileGroup>>,
  /// The name of the proxyuser.
  #[serde(rename = "name")]
  name: String
}

impl HdfsProxyuserCreateParams {
  /// This is hdfs impersonation information of a proxyuser
  pub fn new(name: String) -> HdfsProxyuserCreateParams {
    HdfsProxyuserCreateParams {
      id: None,
      members: None,
      name: name
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> HdfsProxyuserCreateParams {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_members(&mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) {
    self.members = Some(members);
  }

  pub fn with_members(mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) -> HdfsProxyuserCreateParams {
    self.members = Some(members);
    self
  }

  pub fn members(&self) -> Option<&Vec<::models::AuthAccessAccessItemFileGroup>> {
    self.members.as_ref()
  }

  pub fn reset_members(&mut self) {
    self.members = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> HdfsProxyuserCreateParams {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


}



