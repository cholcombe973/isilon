/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CompatibilitiesSsdActiveIdParams {
  /// Do not delete ssd compatibility, only assess if deletion is possible.
  #[serde(rename = "assess")]
  assess: Option<bool>,
  /// Are we enabling or disabling count
  #[serde(rename = "count")]
  count: bool,
  /// The optional id of the second ssd compatibility.
  #[serde(rename = "id_2")]
  id_2: Option<i32>
}

impl CompatibilitiesSsdActiveIdParams {
  pub fn new(count: bool) -> CompatibilitiesSsdActiveIdParams {
    CompatibilitiesSsdActiveIdParams {
      assess: None,
      count: count,
      id_2: None
    }
  }

  pub fn set_assess(&mut self, assess: bool) {
    self.assess = Some(assess);
  }

  pub fn with_assess(mut self, assess: bool) -> CompatibilitiesSsdActiveIdParams {
    self.assess = Some(assess);
    self
  }

  pub fn assess(&self) -> Option<&bool> {
    self.assess.as_ref()
  }

  pub fn reset_assess(&mut self) {
    self.assess = None;
  }

  pub fn set_count(&mut self, count: bool) {
    self.count = count;
  }

  pub fn with_count(mut self, count: bool) -> CompatibilitiesSsdActiveIdParams {
    self.count = count;
    self
  }

  pub fn count(&self) -> &bool {
    &self.count
  }


  pub fn set_id_2(&mut self, id_2: i32) {
    self.id_2 = Some(id_2);
  }

  pub fn with_id_2(mut self, id_2: i32) -> CompatibilitiesSsdActiveIdParams {
    self.id_2 = Some(id_2);
    self
  }

  pub fn id_2(&self) -> Option<&i32> {
    self.id_2.as_ref()
  }

  pub fn reset_id_2(&mut self) {
    self.id_2 = None;
  }

}



