/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DebugStatsHandler {
  /// Per-method statistics.
  #[serde(rename = "DELETE")]
  DELETE: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "GET")]
  GET: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "HEAD")]
  HEAD: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "POST")]
  POST: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "PUT")]
  PUT: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "UNSUPPORTED")]
  UNSUPPORTED: Option<::models::DebugStatsUnknown>,
  /// The URI.
  #[serde(rename = "name")]
  name: Option<String>
}

impl DebugStatsHandler {
  pub fn new() -> DebugStatsHandler {
    DebugStatsHandler {
      DELETE: None,
      GET: None,
      HEAD: None,
      POST: None,
      PUT: None,
      UNSUPPORTED: None,
      name: None
    }
  }

  pub fn set_DELETE(&mut self, DELETE: ::models::DebugStatsUnknown) {
    self.DELETE = Some(DELETE);
  }

  pub fn with_DELETE(mut self, DELETE: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.DELETE = Some(DELETE);
    self
  }

  pub fn DELETE(&self) -> Option<&::models::DebugStatsUnknown> {
    self.DELETE.as_ref()
  }

  pub fn reset_DELETE(&mut self) {
    self.DELETE = None;
  }

  pub fn set_GET(&mut self, GET: ::models::DebugStatsUnknown) {
    self.GET = Some(GET);
  }

  pub fn with_GET(mut self, GET: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.GET = Some(GET);
    self
  }

  pub fn GET(&self) -> Option<&::models::DebugStatsUnknown> {
    self.GET.as_ref()
  }

  pub fn reset_GET(&mut self) {
    self.GET = None;
  }

  pub fn set_HEAD(&mut self, HEAD: ::models::DebugStatsUnknown) {
    self.HEAD = Some(HEAD);
  }

  pub fn with_HEAD(mut self, HEAD: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.HEAD = Some(HEAD);
    self
  }

  pub fn HEAD(&self) -> Option<&::models::DebugStatsUnknown> {
    self.HEAD.as_ref()
  }

  pub fn reset_HEAD(&mut self) {
    self.HEAD = None;
  }

  pub fn set_POST(&mut self, POST: ::models::DebugStatsUnknown) {
    self.POST = Some(POST);
  }

  pub fn with_POST(mut self, POST: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.POST = Some(POST);
    self
  }

  pub fn POST(&self) -> Option<&::models::DebugStatsUnknown> {
    self.POST.as_ref()
  }

  pub fn reset_POST(&mut self) {
    self.POST = None;
  }

  pub fn set_PUT(&mut self, PUT: ::models::DebugStatsUnknown) {
    self.PUT = Some(PUT);
  }

  pub fn with_PUT(mut self, PUT: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.PUT = Some(PUT);
    self
  }

  pub fn PUT(&self) -> Option<&::models::DebugStatsUnknown> {
    self.PUT.as_ref()
  }

  pub fn reset_PUT(&mut self) {
    self.PUT = None;
  }

  pub fn set_UNSUPPORTED(&mut self, UNSUPPORTED: ::models::DebugStatsUnknown) {
    self.UNSUPPORTED = Some(UNSUPPORTED);
  }

  pub fn with_UNSUPPORTED(mut self, UNSUPPORTED: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.UNSUPPORTED = Some(UNSUPPORTED);
    self
  }

  pub fn UNSUPPORTED(&self) -> Option<&::models::DebugStatsUnknown> {
    self.UNSUPPORTED.as_ref()
  }

  pub fn reset_UNSUPPORTED(&mut self) {
    self.UNSUPPORTED = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DebugStatsHandler {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



