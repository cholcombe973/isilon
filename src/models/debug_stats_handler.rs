/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DebugStatsHandler {
  /// Per-method statistics.
  #[serde(rename = "DELETE")]
  delete: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "GET")]
  get: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "HEAD")]
  head: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "POST")]
  post: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "PUT")]
  put: Option<::models::DebugStatsUnknown>,
  /// Per-method statistics.
  #[serde(rename = "UNSUPPORTED")]
  unsupported: Option<::models::DebugStatsUnknown>,
  /// The URI.
  #[serde(rename = "name")]
  name: Option<String>
}

impl DebugStatsHandler {
  pub fn new() -> DebugStatsHandler {
    DebugStatsHandler {
      delete: None,
      get: None,
      head: None,
      post: None,
      put: None,
      unsupported: None,
      name: None
    }
  }

  pub fn set_delete(&mut self, delete: ::models::DebugStatsUnknown) {
    self.delete = Some(delete);
  }

  pub fn with_delete(mut self, delete: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.delete = Some(delete);
    self
  }

  pub fn delete(&self) -> Option<&::models::DebugStatsUnknown> {
    self.delete.as_ref()
  }

  pub fn reset_delete(&mut self) {
    self.delete = None;
  }

  pub fn set_get(&mut self, get: ::models::DebugStatsUnknown) {
    self.get = Some(get);
  }

  pub fn with_get(mut self, get: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.get = Some(get);
    self
  }

  pub fn get(&self) -> Option<&::models::DebugStatsUnknown> {
    self.get.as_ref()
  }

  pub fn reset_get(&mut self) {
    self.get = None;
  }

  pub fn set_head(&mut self, head: ::models::DebugStatsUnknown) {
    self.head = Some(head);
  }

  pub fn with_head(mut self, head: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.head = Some(head);
    self
  }

  pub fn head(&self) -> Option<&::models::DebugStatsUnknown> {
    self.head.as_ref()
  }

  pub fn reset_head(&mut self) {
    self.head = None;
  }

  pub fn set_post(&mut self, post: ::models::DebugStatsUnknown) {
    self.post = Some(post);
  }

  pub fn with_post(mut self, post: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.post = Some(post);
    self
  }

  pub fn post(&self) -> Option<&::models::DebugStatsUnknown> {
    self.post.as_ref()
  }

  pub fn reset_post(&mut self) {
    self.post = None;
  }

  pub fn set_put(&mut self, put: ::models::DebugStatsUnknown) {
    self.put = Some(put);
  }

  pub fn with_put(mut self, put: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.put = Some(put);
    self
  }

  pub fn put(&self) -> Option<&::models::DebugStatsUnknown> {
    self.put.as_ref()
  }

  pub fn reset_put(&mut self) {
    self.put = None;
  }

  pub fn set_unsupported(&mut self, unsupported: ::models::DebugStatsUnknown) {
    self.unsupported = Some(unsupported);
  }

  pub fn with_unsupported(mut self, unsupported: ::models::DebugStatsUnknown) -> DebugStatsHandler {
    self.unsupported = Some(unsupported);
    self
  }

  pub fn unsupported(&self) -> Option<&::models::DebugStatsUnknown> {
    self.unsupported.as_ref()
  }

  pub fn reset_unsupported(&mut self) {
    self.unsupported = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DebugStatsHandler {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



