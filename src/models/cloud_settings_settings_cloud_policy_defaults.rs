/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudSettingsSettingsCloudPolicyDefaults {
  /// Specifies if files with snapshots should be archived.
  #[serde(rename = "archive_snapshot_files")]
  archive_snapshot_files: Option<bool>,
  /// Specifies default cloudpool cache settings for new filepool policies.
  #[serde(rename = "cache")]
  cache: Option<::models::CloudSettingsSettingsCloudPolicyDefaultsCache>,
  /// Specifies if files should be compressed.
  #[serde(rename = "compression")]
  compression: Option<bool>,
  /// Specifies the minimum amount of time archived data will be retained in the cloud after deletion.
  #[serde(rename = "data_retention")]
  data_retention: Option<i32>,
  /// Specifies if files should be encrypted.
  #[serde(rename = "encryption")]
  encryption: Option<bool>,
  /// (Used with NDMP backups only.  Not applicable to SyncIQ.)  The minimum amount of time cloud files will be retained after the creation of a full NDMP backup.
  #[serde(rename = "full_backup_retention")]
  full_backup_retention: Option<i32>,
  /// (Used with SyncIQ and NDMP backups.)  The minimum amount of time cloud files will be retained after the creation of a SyncIQ backup or an incremental NDMP backup.
  #[serde(rename = "incremental_backup_retention")]
  incremental_backup_retention: Option<i32>,
  /// The minimum amount of time to wait before updating cloud data with local changes.
  #[serde(rename = "writeback_frequency")]
  writeback_frequency: Option<i32>
}

impl CloudSettingsSettingsCloudPolicyDefaults {
  pub fn new() -> CloudSettingsSettingsCloudPolicyDefaults {
    CloudSettingsSettingsCloudPolicyDefaults {
      archive_snapshot_files: None,
      cache: None,
      compression: None,
      data_retention: None,
      encryption: None,
      full_backup_retention: None,
      incremental_backup_retention: None,
      writeback_frequency: None
    }
  }

  pub fn set_archive_snapshot_files(&mut self, archive_snapshot_files: bool) {
    self.archive_snapshot_files = Some(archive_snapshot_files);
  }

  pub fn with_archive_snapshot_files(mut self, archive_snapshot_files: bool) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.archive_snapshot_files = Some(archive_snapshot_files);
    self
  }

  pub fn archive_snapshot_files(&self) -> Option<&bool> {
    self.archive_snapshot_files.as_ref()
  }

  pub fn reset_archive_snapshot_files(&mut self) {
    self.archive_snapshot_files = None;
  }

  pub fn set_cache(&mut self, cache: ::models::CloudSettingsSettingsCloudPolicyDefaultsCache) {
    self.cache = Some(cache);
  }

  pub fn with_cache(mut self, cache: ::models::CloudSettingsSettingsCloudPolicyDefaultsCache) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.cache = Some(cache);
    self
  }

  pub fn cache(&self) -> Option<&::models::CloudSettingsSettingsCloudPolicyDefaultsCache> {
    self.cache.as_ref()
  }

  pub fn reset_cache(&mut self) {
    self.cache = None;
  }

  pub fn set_compression(&mut self, compression: bool) {
    self.compression = Some(compression);
  }

  pub fn with_compression(mut self, compression: bool) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.compression = Some(compression);
    self
  }

  pub fn compression(&self) -> Option<&bool> {
    self.compression.as_ref()
  }

  pub fn reset_compression(&mut self) {
    self.compression = None;
  }

  pub fn set_data_retention(&mut self, data_retention: i32) {
    self.data_retention = Some(data_retention);
  }

  pub fn with_data_retention(mut self, data_retention: i32) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.data_retention = Some(data_retention);
    self
  }

  pub fn data_retention(&self) -> Option<&i32> {
    self.data_retention.as_ref()
  }

  pub fn reset_data_retention(&mut self) {
    self.data_retention = None;
  }

  pub fn set_encryption(&mut self, encryption: bool) {
    self.encryption = Some(encryption);
  }

  pub fn with_encryption(mut self, encryption: bool) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.encryption = Some(encryption);
    self
  }

  pub fn encryption(&self) -> Option<&bool> {
    self.encryption.as_ref()
  }

  pub fn reset_encryption(&mut self) {
    self.encryption = None;
  }

  pub fn set_full_backup_retention(&mut self, full_backup_retention: i32) {
    self.full_backup_retention = Some(full_backup_retention);
  }

  pub fn with_full_backup_retention(mut self, full_backup_retention: i32) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.full_backup_retention = Some(full_backup_retention);
    self
  }

  pub fn full_backup_retention(&self) -> Option<&i32> {
    self.full_backup_retention.as_ref()
  }

  pub fn reset_full_backup_retention(&mut self) {
    self.full_backup_retention = None;
  }

  pub fn set_incremental_backup_retention(&mut self, incremental_backup_retention: i32) {
    self.incremental_backup_retention = Some(incremental_backup_retention);
  }

  pub fn with_incremental_backup_retention(mut self, incremental_backup_retention: i32) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.incremental_backup_retention = Some(incremental_backup_retention);
    self
  }

  pub fn incremental_backup_retention(&self) -> Option<&i32> {
    self.incremental_backup_retention.as_ref()
  }

  pub fn reset_incremental_backup_retention(&mut self) {
    self.incremental_backup_retention = None;
  }

  pub fn set_writeback_frequency(&mut self, writeback_frequency: i32) {
    self.writeback_frequency = Some(writeback_frequency);
  }

  pub fn with_writeback_frequency(mut self, writeback_frequency: i32) -> CloudSettingsSettingsCloudPolicyDefaults {
    self.writeback_frequency = Some(writeback_frequency);
    self
  }

  pub fn writeback_frequency(&self) -> Option<&i32> {
    self.writeback_frequency.as_ref()
  }

  pub fn reset_writeback_frequency(&mut self) {
    self.writeback_frequency = None;
  }

}



