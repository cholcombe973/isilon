/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterFirmwareStatusNodePackageItem {
  /// Valid checksum string for binary. One of the following: 'ok', 'bad', 'file_missing', or 'na'
  #[serde(rename = "checksum")]
  checksum: Option<String>,
  /// The name of the firmware binary.
  #[serde(rename = "firmware")]
  firmware: Option<String>,
  /// The version string for the binary.
  #[serde(rename = "version")]
  version: Option<String>
}

impl ClusterFirmwareStatusNodePackageItem {
  pub fn new() -> ClusterFirmwareStatusNodePackageItem {
    ClusterFirmwareStatusNodePackageItem {
      checksum: None,
      firmware: None,
      version: None
    }
  }

  pub fn set_checksum(&mut self, checksum: String) {
    self.checksum = Some(checksum);
  }

  pub fn with_checksum(mut self, checksum: String) -> ClusterFirmwareStatusNodePackageItem {
    self.checksum = Some(checksum);
    self
  }

  pub fn checksum(&self) -> Option<&String> {
    self.checksum.as_ref()
  }

  pub fn reset_checksum(&mut self) {
    self.checksum = None;
  }

  pub fn set_firmware(&mut self, firmware: String) {
    self.firmware = Some(firmware);
  }

  pub fn with_firmware(mut self, firmware: String) -> ClusterFirmwareStatusNodePackageItem {
    self.firmware = Some(firmware);
    self
  }

  pub fn firmware(&self) -> Option<&String> {
    self.firmware.as_ref()
  }

  pub fn reset_firmware(&mut self) {
    self.firmware = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> ClusterFirmwareStatusNodePackageItem {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



