/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthGroupExtended {
  #[serde(rename = "dn")]
  dn: Option<String>,
  #[serde(rename = "dns_domain")]
  dns_domain: Option<String>,
  #[serde(rename = "domain")]
  domain: Option<String>,
  /// If true, the GID was generated.
  #[serde(rename = "generated_gid")]
  generated_gid: Option<bool>,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "gid")]
  gid: Option<::models::AuthAccessAccessItemFileGroup>,
  /// Specifies the user or group ID.
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "member_of")]
  member_of: Option<Vec<::models::AuthAccessAccessItemFileGroup>>,
  /// Specifies a user or group name.
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "object_history")]
  object_history: Option<Vec<::models::AuthGroupObjectHistoryItem>>,
  #[serde(rename = "provider")]
  provider: Option<String>,
  #[serde(rename = "sam_account_name")]
  sam_account_name: Option<String>,
  /// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
  #[serde(rename = "sid")]
  sid: Option<::models::AuthAccessAccessItemFileGroup>,
  /// Specifies the object type.
  #[serde(rename = "type")]
  _type: String
}

impl AuthGroupExtended {
  pub fn new(id: String, name: String, _type: String) -> AuthGroupExtended {
    AuthGroupExtended {
      dn: None,
      dns_domain: None,
      domain: None,
      generated_gid: None,
      gid: None,
      id: id,
      member_of: None,
      name: name,
      object_history: None,
      provider: None,
      sam_account_name: None,
      sid: None,
      _type: _type
    }
  }

  pub fn set_dn(&mut self, dn: String) {
    self.dn = Some(dn);
  }

  pub fn with_dn(mut self, dn: String) -> AuthGroupExtended {
    self.dn = Some(dn);
    self
  }

  pub fn dn(&self) -> Option<&String> {
    self.dn.as_ref()
  }

  pub fn reset_dn(&mut self) {
    self.dn = None;
  }

  pub fn set_dns_domain(&mut self, dns_domain: String) {
    self.dns_domain = Some(dns_domain);
  }

  pub fn with_dns_domain(mut self, dns_domain: String) -> AuthGroupExtended {
    self.dns_domain = Some(dns_domain);
    self
  }

  pub fn dns_domain(&self) -> Option<&String> {
    self.dns_domain.as_ref()
  }

  pub fn reset_dns_domain(&mut self) {
    self.dns_domain = None;
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> AuthGroupExtended {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

  pub fn set_generated_gid(&mut self, generated_gid: bool) {
    self.generated_gid = Some(generated_gid);
  }

  pub fn with_generated_gid(mut self, generated_gid: bool) -> AuthGroupExtended {
    self.generated_gid = Some(generated_gid);
    self
  }

  pub fn generated_gid(&self) -> Option<&bool> {
    self.generated_gid.as_ref()
  }

  pub fn reset_generated_gid(&mut self) {
    self.generated_gid = None;
  }

  pub fn set_gid(&mut self, gid: ::models::AuthAccessAccessItemFileGroup) {
    self.gid = Some(gid);
  }

  pub fn with_gid(mut self, gid: ::models::AuthAccessAccessItemFileGroup) -> AuthGroupExtended {
    self.gid = Some(gid);
    self
  }

  pub fn gid(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.gid.as_ref()
  }

  pub fn reset_gid(&mut self) {
    self.gid = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> AuthGroupExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_member_of(&mut self, member_of: Vec<::models::AuthAccessAccessItemFileGroup>) {
    self.member_of = Some(member_of);
  }

  pub fn with_member_of(mut self, member_of: Vec<::models::AuthAccessAccessItemFileGroup>) -> AuthGroupExtended {
    self.member_of = Some(member_of);
    self
  }

  pub fn member_of(&self) -> Option<&Vec<::models::AuthAccessAccessItemFileGroup>> {
    self.member_of.as_ref()
  }

  pub fn reset_member_of(&mut self) {
    self.member_of = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> AuthGroupExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_object_history(&mut self, object_history: Vec<::models::AuthGroupObjectHistoryItem>) {
    self.object_history = Some(object_history);
  }

  pub fn with_object_history(mut self, object_history: Vec<::models::AuthGroupObjectHistoryItem>) -> AuthGroupExtended {
    self.object_history = Some(object_history);
    self
  }

  pub fn object_history(&self) -> Option<&Vec<::models::AuthGroupObjectHistoryItem>> {
    self.object_history.as_ref()
  }

  pub fn reset_object_history(&mut self) {
    self.object_history = None;
  }

  pub fn set_provider(&mut self, provider: String) {
    self.provider = Some(provider);
  }

  pub fn with_provider(mut self, provider: String) -> AuthGroupExtended {
    self.provider = Some(provider);
    self
  }

  pub fn provider(&self) -> Option<&String> {
    self.provider.as_ref()
  }

  pub fn reset_provider(&mut self) {
    self.provider = None;
  }

  pub fn set_sam_account_name(&mut self, sam_account_name: String) {
    self.sam_account_name = Some(sam_account_name);
  }

  pub fn with_sam_account_name(mut self, sam_account_name: String) -> AuthGroupExtended {
    self.sam_account_name = Some(sam_account_name);
    self
  }

  pub fn sam_account_name(&self) -> Option<&String> {
    self.sam_account_name.as_ref()
  }

  pub fn reset_sam_account_name(&mut self) {
    self.sam_account_name = None;
  }

  pub fn set_sid(&mut self, sid: ::models::AuthAccessAccessItemFileGroup) {
    self.sid = Some(sid);
  }

  pub fn with_sid(mut self, sid: ::models::AuthAccessAccessItemFileGroup) -> AuthGroupExtended {
    self.sid = Some(sid);
    self
  }

  pub fn sid(&self) -> Option<&::models::AuthAccessAccessItemFileGroup> {
    self.sid.as_ref()
  }

  pub fn reset_sid(&mut self) {
    self.sid = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> AuthGroupExtended {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



