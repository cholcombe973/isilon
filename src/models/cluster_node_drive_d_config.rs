/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterNodeDriveDConfig {
  /// Configuration setting for drive alerts.
  #[serde(rename = "alert")]
  alert: Option<::models::NodeDriveconfigNodeAlert>,
  /// Configuration settings for drive formatting.
  #[serde(rename = "allow")]
  allow: Option<::models::NodeDriveconfigNodeAllow>,
  /// Configuration settings for automatic replacement recognition (ARR).
  #[serde(rename = "automatic_replacement_recognition")]
  automatic_replacement_recognition: Option<::models::NodeDriveconfigNodeAutomaticReplacementRecognition>,
  /// Configuration settings for drive statistics logs.
  #[serde(rename = "log")]
  log: Option<::models::NodeDriveconfigNodeLog>,
  /// Configuration settings for a node reboot due to a drive error.
  #[serde(rename = "reboot")]
  reboot: Option<::models::NodeDriveconfigNodeReboot>,
  /// Configuration settings for sleeping the drive daemon before node is rescanned.
  #[serde(rename = "spin_wait")]
  spin_wait: Option<::models::NodeDriveconfigNodeSpinWait>,
  /// Configuration settings to evaluate a drive stall.
  #[serde(rename = "stall")]
  stall: Option<::models::NodeDriveconfigNodeStall>
}

impl ClusterNodeDriveDConfig {
  pub fn new() -> ClusterNodeDriveDConfig {
    ClusterNodeDriveDConfig {
      alert: None,
      allow: None,
      automatic_replacement_recognition: None,
      log: None,
      reboot: None,
      spin_wait: None,
      stall: None
    }
  }

  pub fn set_alert(&mut self, alert: ::models::NodeDriveconfigNodeAlert) {
    self.alert = Some(alert);
  }

  pub fn with_alert(mut self, alert: ::models::NodeDriveconfigNodeAlert) -> ClusterNodeDriveDConfig {
    self.alert = Some(alert);
    self
  }

  pub fn alert(&self) -> Option<&::models::NodeDriveconfigNodeAlert> {
    self.alert.as_ref()
  }

  pub fn reset_alert(&mut self) {
    self.alert = None;
  }

  pub fn set_allow(&mut self, allow: ::models::NodeDriveconfigNodeAllow) {
    self.allow = Some(allow);
  }

  pub fn with_allow(mut self, allow: ::models::NodeDriveconfigNodeAllow) -> ClusterNodeDriveDConfig {
    self.allow = Some(allow);
    self
  }

  pub fn allow(&self) -> Option<&::models::NodeDriveconfigNodeAllow> {
    self.allow.as_ref()
  }

  pub fn reset_allow(&mut self) {
    self.allow = None;
  }

  pub fn set_automatic_replacement_recognition(&mut self, automatic_replacement_recognition: ::models::NodeDriveconfigNodeAutomaticReplacementRecognition) {
    self.automatic_replacement_recognition = Some(automatic_replacement_recognition);
  }

  pub fn with_automatic_replacement_recognition(mut self, automatic_replacement_recognition: ::models::NodeDriveconfigNodeAutomaticReplacementRecognition) -> ClusterNodeDriveDConfig {
    self.automatic_replacement_recognition = Some(automatic_replacement_recognition);
    self
  }

  pub fn automatic_replacement_recognition(&self) -> Option<&::models::NodeDriveconfigNodeAutomaticReplacementRecognition> {
    self.automatic_replacement_recognition.as_ref()
  }

  pub fn reset_automatic_replacement_recognition(&mut self) {
    self.automatic_replacement_recognition = None;
  }

  pub fn set_log(&mut self, log: ::models::NodeDriveconfigNodeLog) {
    self.log = Some(log);
  }

  pub fn with_log(mut self, log: ::models::NodeDriveconfigNodeLog) -> ClusterNodeDriveDConfig {
    self.log = Some(log);
    self
  }

  pub fn log(&self) -> Option<&::models::NodeDriveconfigNodeLog> {
    self.log.as_ref()
  }

  pub fn reset_log(&mut self) {
    self.log = None;
  }

  pub fn set_reboot(&mut self, reboot: ::models::NodeDriveconfigNodeReboot) {
    self.reboot = Some(reboot);
  }

  pub fn with_reboot(mut self, reboot: ::models::NodeDriveconfigNodeReboot) -> ClusterNodeDriveDConfig {
    self.reboot = Some(reboot);
    self
  }

  pub fn reboot(&self) -> Option<&::models::NodeDriveconfigNodeReboot> {
    self.reboot.as_ref()
  }

  pub fn reset_reboot(&mut self) {
    self.reboot = None;
  }

  pub fn set_spin_wait(&mut self, spin_wait: ::models::NodeDriveconfigNodeSpinWait) {
    self.spin_wait = Some(spin_wait);
  }

  pub fn with_spin_wait(mut self, spin_wait: ::models::NodeDriveconfigNodeSpinWait) -> ClusterNodeDriveDConfig {
    self.spin_wait = Some(spin_wait);
    self
  }

  pub fn spin_wait(&self) -> Option<&::models::NodeDriveconfigNodeSpinWait> {
    self.spin_wait.as_ref()
  }

  pub fn reset_spin_wait(&mut self) {
    self.spin_wait = None;
  }

  pub fn set_stall(&mut self, stall: ::models::NodeDriveconfigNodeStall) {
    self.stall = Some(stall);
  }

  pub fn with_stall(mut self, stall: ::models::NodeDriveconfigNodeStall) -> ClusterNodeDriveDConfig {
    self.stall = Some(stall);
    self
  }

  pub fn stall(&self) -> Option<&::models::NodeDriveconfigNodeStall> {
    self.stall.as_ref()
  }

  pub fn reset_stall(&mut self) {
    self.stall = None;
  }

}



