/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryProtocolStatsProtocolStats {
  /// 
  #[serde(rename = "cpu")]
  cpu: Option<::models::SummaryProtocolStatsProtocolStatsCpu>,
  /// 
  #[serde(rename = "disk")]
  disk: Option<::models::SummaryProtocolStatsProtocolStatsDisk>,
  /// 
  #[serde(rename = "network")]
  network: Option<::models::SummaryProtocolStatsProtocolStatsNetwork>,
  /// 
  #[serde(rename = "onefs")]
  onefs: Option<::models::SummaryProtocolStatsProtocolStatsOnefs>,
  /// A single protocol for which statistics should be reported.
  #[serde(rename = "protocol")]
  protocol: Option<::models::SummaryProtocolStatsProtocolStatsProtocol>,
  /// Unix Epoch time in seconds of the request.
  #[serde(rename = "time")]
  time: i32
}

impl SummaryProtocolStatsProtocolStats {
  pub fn new(time: i32) -> SummaryProtocolStatsProtocolStats {
    SummaryProtocolStatsProtocolStats {
      cpu: None,
      disk: None,
      network: None,
      onefs: None,
      protocol: None,
      time: time
    }
  }

  pub fn set_cpu(&mut self, cpu: ::models::SummaryProtocolStatsProtocolStatsCpu) {
    self.cpu = Some(cpu);
  }

  pub fn with_cpu(mut self, cpu: ::models::SummaryProtocolStatsProtocolStatsCpu) -> SummaryProtocolStatsProtocolStats {
    self.cpu = Some(cpu);
    self
  }

  pub fn cpu(&self) -> Option<&::models::SummaryProtocolStatsProtocolStatsCpu> {
    self.cpu.as_ref()
  }

  pub fn reset_cpu(&mut self) {
    self.cpu = None;
  }

  pub fn set_disk(&mut self, disk: ::models::SummaryProtocolStatsProtocolStatsDisk) {
    self.disk = Some(disk);
  }

  pub fn with_disk(mut self, disk: ::models::SummaryProtocolStatsProtocolStatsDisk) -> SummaryProtocolStatsProtocolStats {
    self.disk = Some(disk);
    self
  }

  pub fn disk(&self) -> Option<&::models::SummaryProtocolStatsProtocolStatsDisk> {
    self.disk.as_ref()
  }

  pub fn reset_disk(&mut self) {
    self.disk = None;
  }

  pub fn set_network(&mut self, network: ::models::SummaryProtocolStatsProtocolStatsNetwork) {
    self.network = Some(network);
  }

  pub fn with_network(mut self, network: ::models::SummaryProtocolStatsProtocolStatsNetwork) -> SummaryProtocolStatsProtocolStats {
    self.network = Some(network);
    self
  }

  pub fn network(&self) -> Option<&::models::SummaryProtocolStatsProtocolStatsNetwork> {
    self.network.as_ref()
  }

  pub fn reset_network(&mut self) {
    self.network = None;
  }

  pub fn set_onefs(&mut self, onefs: ::models::SummaryProtocolStatsProtocolStatsOnefs) {
    self.onefs = Some(onefs);
  }

  pub fn with_onefs(mut self, onefs: ::models::SummaryProtocolStatsProtocolStatsOnefs) -> SummaryProtocolStatsProtocolStats {
    self.onefs = Some(onefs);
    self
  }

  pub fn onefs(&self) -> Option<&::models::SummaryProtocolStatsProtocolStatsOnefs> {
    self.onefs.as_ref()
  }

  pub fn reset_onefs(&mut self) {
    self.onefs = None;
  }

  pub fn set_protocol(&mut self, protocol: ::models::SummaryProtocolStatsProtocolStatsProtocol) {
    self.protocol = Some(protocol);
  }

  pub fn with_protocol(mut self, protocol: ::models::SummaryProtocolStatsProtocolStatsProtocol) -> SummaryProtocolStatsProtocolStats {
    self.protocol = Some(protocol);
    self
  }

  pub fn protocol(&self) -> Option<&::models::SummaryProtocolStatsProtocolStatsProtocol> {
    self.protocol.as_ref()
  }

  pub fn reset_protocol(&mut self) {
    self.protocol = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i32) -> SummaryProtocolStatsProtocolStats {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i32 {
    &self.time
  }


}



