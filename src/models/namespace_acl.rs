/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NamespaceAcl {
  /// Provides the JSON array of access rights.
  #[serde(rename = "acl")]
  acl: Option<Vec<::models::AclObject>>,
  /// If the directory has access rights set, then this field is returned as acl. If the directory has POSIX permissions set, then this field is returned as mode.
  #[serde(rename = "authoritative")]
  authoritative: Option<String>,
  /// Provides the JSON object for the group persona of the owner.
  #[serde(rename = "group")]
  group: Option<::models::MemberObject>,
  /// Provides the POSIX mode.
  #[serde(rename = "mode")]
  mode: Option<String>,
  /// Provides the JSON object for the owner persona.
  #[serde(rename = "owner")]
  owner: Option<::models::MemberObject>
}

impl NamespaceAcl {
  pub fn new() -> NamespaceAcl {
    NamespaceAcl {
      acl: None,
      authoritative: None,
      group: None,
      mode: None,
      owner: None
    }
  }

  pub fn set_acl(&mut self, acl: Vec<::models::AclObject>) {
    self.acl = Some(acl);
  }

  pub fn with_acl(mut self, acl: Vec<::models::AclObject>) -> NamespaceAcl {
    self.acl = Some(acl);
    self
  }

  pub fn acl(&self) -> Option<&Vec<::models::AclObject>> {
    self.acl.as_ref()
  }

  pub fn reset_acl(&mut self) {
    self.acl = None;
  }

  pub fn set_authoritative(&mut self, authoritative: String) {
    self.authoritative = Some(authoritative);
  }

  pub fn with_authoritative(mut self, authoritative: String) -> NamespaceAcl {
    self.authoritative = Some(authoritative);
    self
  }

  pub fn authoritative(&self) -> Option<&String> {
    self.authoritative.as_ref()
  }

  pub fn reset_authoritative(&mut self) {
    self.authoritative = None;
  }

  pub fn set_group(&mut self, group: ::models::MemberObject) {
    self.group = Some(group);
  }

  pub fn with_group(mut self, group: ::models::MemberObject) -> NamespaceAcl {
    self.group = Some(group);
    self
  }

  pub fn group(&self) -> Option<&::models::MemberObject> {
    self.group.as_ref()
  }

  pub fn reset_group(&mut self) {
    self.group = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: String) -> NamespaceAcl {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&String> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_owner(&mut self, owner: ::models::MemberObject) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: ::models::MemberObject) -> NamespaceAcl {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&::models::MemberObject> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

}



