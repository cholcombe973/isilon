/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DedupeReportExtended {
  /// The amount of space the directory trees under this job's paths now take up, compared to what they would take up if not deduplicated (0 ~ 100).
  #[serde(rename = "dedupe_percent")]
  dedupe_percent: Option<String>,
  /// The amount of time in seconds it took to run this job.
  #[serde(rename = "elapsed_time")]
  elapsed_time: Option<i32>,
  /// An unique identifier for this report.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// The job id this report refers to.
  #[serde(rename = "job_id")]
  job_id: Option<i32>,
  /// The type of dedupe job this report refers to.
  #[serde(rename = "job_type")]
  job_type: Option<String>,
  /// A list of report entries for this dedupe job.
  #[serde(rename = "reports")]
  reports: Option<Vec<::models::DedupeReport>>
}

impl DedupeReportExtended {
  pub fn new() -> DedupeReportExtended {
    DedupeReportExtended {
      dedupe_percent: None,
      elapsed_time: None,
      id: None,
      job_id: None,
      job_type: None,
      reports: None
    }
  }

  pub fn set_dedupe_percent(&mut self, dedupe_percent: String) {
    self.dedupe_percent = Some(dedupe_percent);
  }

  pub fn with_dedupe_percent(mut self, dedupe_percent: String) -> DedupeReportExtended {
    self.dedupe_percent = Some(dedupe_percent);
    self
  }

  pub fn dedupe_percent(&self) -> Option<&String> {
    self.dedupe_percent.as_ref()
  }

  pub fn reset_dedupe_percent(&mut self) {
    self.dedupe_percent = None;
  }

  pub fn set_elapsed_time(&mut self, elapsed_time: i32) {
    self.elapsed_time = Some(elapsed_time);
  }

  pub fn with_elapsed_time(mut self, elapsed_time: i32) -> DedupeReportExtended {
    self.elapsed_time = Some(elapsed_time);
    self
  }

  pub fn elapsed_time(&self) -> Option<&i32> {
    self.elapsed_time.as_ref()
  }

  pub fn reset_elapsed_time(&mut self) {
    self.elapsed_time = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> DedupeReportExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_job_id(&mut self, job_id: i32) {
    self.job_id = Some(job_id);
  }

  pub fn with_job_id(mut self, job_id: i32) -> DedupeReportExtended {
    self.job_id = Some(job_id);
    self
  }

  pub fn job_id(&self) -> Option<&i32> {
    self.job_id.as_ref()
  }

  pub fn reset_job_id(&mut self) {
    self.job_id = None;
  }

  pub fn set_job_type(&mut self, job_type: String) {
    self.job_type = Some(job_type);
  }

  pub fn with_job_type(mut self, job_type: String) -> DedupeReportExtended {
    self.job_type = Some(job_type);
    self
  }

  pub fn job_type(&self) -> Option<&String> {
    self.job_type.as_ref()
  }

  pub fn reset_job_type(&mut self) {
    self.job_type = None;
  }

  pub fn set_reports(&mut self, reports: Vec<::models::DedupeReport>) {
    self.reports = Some(reports);
  }

  pub fn with_reports(mut self, reports: Vec<::models::DedupeReport>) -> DedupeReportExtended {
    self.reports = Some(reports);
    self
  }

  pub fn reports(&self) -> Option<&Vec<::models::DedupeReport>> {
    self.reports.as_ref()
  }

  pub fn reset_reports(&mut self) {
    self.reports = None;
  }

}



