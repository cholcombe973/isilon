/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HttpSettingsSettings {
  /// Enable Access Control Authentication
  #[serde(rename = "access_control")]
  access_control: Option<bool>,
  /// Enable Basic Authentication
  #[serde(rename = "basic_authentication")]
  basic_authentication: Option<bool>,
  /// Enable DAV specification
  #[serde(rename = "dav")]
  dav: Option<bool>,
  /// Enable HTTP access logging
  #[serde(rename = "enable_access_log")]
  enable_access_log: Option<bool>,
  /// Use HTTPS transport
  #[serde(rename = "https")]
  https: Option<bool>,
  /// Enable Integrated Authentication
  #[serde(rename = "integrated_authentication")]
  integrated_authentication: Option<bool>,
  /// Document root directory. Must be within /ifs.
  #[serde(rename = "server_root")]
  server_root: Option<String>,
  /// Enable/disable the HTTP service or redirect to WebUI.
  #[serde(rename = "service")]
  service: Option<String>
}

impl HttpSettingsSettings {
  pub fn new() -> HttpSettingsSettings {
    HttpSettingsSettings {
      access_control: None,
      basic_authentication: None,
      dav: None,
      enable_access_log: None,
      https: None,
      integrated_authentication: None,
      server_root: None,
      service: None
    }
  }

  pub fn set_access_control(&mut self, access_control: bool) {
    self.access_control = Some(access_control);
  }

  pub fn with_access_control(mut self, access_control: bool) -> HttpSettingsSettings {
    self.access_control = Some(access_control);
    self
  }

  pub fn access_control(&self) -> Option<&bool> {
    self.access_control.as_ref()
  }

  pub fn reset_access_control(&mut self) {
    self.access_control = None;
  }

  pub fn set_basic_authentication(&mut self, basic_authentication: bool) {
    self.basic_authentication = Some(basic_authentication);
  }

  pub fn with_basic_authentication(mut self, basic_authentication: bool) -> HttpSettingsSettings {
    self.basic_authentication = Some(basic_authentication);
    self
  }

  pub fn basic_authentication(&self) -> Option<&bool> {
    self.basic_authentication.as_ref()
  }

  pub fn reset_basic_authentication(&mut self) {
    self.basic_authentication = None;
  }

  pub fn set_dav(&mut self, dav: bool) {
    self.dav = Some(dav);
  }

  pub fn with_dav(mut self, dav: bool) -> HttpSettingsSettings {
    self.dav = Some(dav);
    self
  }

  pub fn dav(&self) -> Option<&bool> {
    self.dav.as_ref()
  }

  pub fn reset_dav(&mut self) {
    self.dav = None;
  }

  pub fn set_enable_access_log(&mut self, enable_access_log: bool) {
    self.enable_access_log = Some(enable_access_log);
  }

  pub fn with_enable_access_log(mut self, enable_access_log: bool) -> HttpSettingsSettings {
    self.enable_access_log = Some(enable_access_log);
    self
  }

  pub fn enable_access_log(&self) -> Option<&bool> {
    self.enable_access_log.as_ref()
  }

  pub fn reset_enable_access_log(&mut self) {
    self.enable_access_log = None;
  }

  pub fn set_https(&mut self, https: bool) {
    self.https = Some(https);
  }

  pub fn with_https(mut self, https: bool) -> HttpSettingsSettings {
    self.https = Some(https);
    self
  }

  pub fn https(&self) -> Option<&bool> {
    self.https.as_ref()
  }

  pub fn reset_https(&mut self) {
    self.https = None;
  }

  pub fn set_integrated_authentication(&mut self, integrated_authentication: bool) {
    self.integrated_authentication = Some(integrated_authentication);
  }

  pub fn with_integrated_authentication(mut self, integrated_authentication: bool) -> HttpSettingsSettings {
    self.integrated_authentication = Some(integrated_authentication);
    self
  }

  pub fn integrated_authentication(&self) -> Option<&bool> {
    self.integrated_authentication.as_ref()
  }

  pub fn reset_integrated_authentication(&mut self) {
    self.integrated_authentication = None;
  }

  pub fn set_server_root(&mut self, server_root: String) {
    self.server_root = Some(server_root);
  }

  pub fn with_server_root(mut self, server_root: String) -> HttpSettingsSettings {
    self.server_root = Some(server_root);
    self
  }

  pub fn server_root(&self) -> Option<&String> {
    self.server_root.as_ref()
  }

  pub fn reset_server_root(&mut self) {
    self.server_root = None;
  }

  pub fn set_service(&mut self, service: String) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: String) -> HttpSettingsSettings {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&String> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

}



