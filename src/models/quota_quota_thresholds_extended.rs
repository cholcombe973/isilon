/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaQuotaThresholdsExtended {
  /// Usage bytes at which notifications will be sent but writes will not be denied.
  #[serde(rename = "advisory")]
  advisory: Option<i32>,
  /// Usage bytes at which further writes will be denied.
  #[serde(rename = "hard")]
  hard: Option<i32>,
  /// Usage bytes at which notifications will be sent and soft grace time will be started.
  #[serde(rename = "soft")]
  soft: Option<i32>,
  /// Time in seconds after which the soft threshold has been hit before writes will be denied.
  #[serde(rename = "soft_grace")]
  soft_grace: Option<i32>,
  /// True if the advisory threshold has been hit.
  #[serde(rename = "advisory_exceeded")]
  advisory_exceeded: Option<bool>,
  /// Time at which advisory threshold was hit.
  #[serde(rename = "advisory_last_exceeded")]
  advisory_last_exceeded: Option<i32>,
  /// True if the hard threshold has been hit.
  #[serde(rename = "hard_exceeded")]
  hard_exceeded: Option<bool>,
  /// Time at which hard threshold was hit.
  #[serde(rename = "hard_last_exceeded")]
  hard_last_exceeded: Option<i32>,
  /// True if the soft threshold has been hit.
  #[serde(rename = "soft_exceeded")]
  soft_exceeded: Option<bool>,
  /// Time at which soft threshold was hit
  #[serde(rename = "soft_last_exceeded")]
  soft_last_exceeded: Option<i32>
}

impl QuotaQuotaThresholdsExtended {
  pub fn new() -> QuotaQuotaThresholdsExtended {
    QuotaQuotaThresholdsExtended {
      advisory: None,
      hard: None,
      soft: None,
      soft_grace: None,
      advisory_exceeded: None,
      advisory_last_exceeded: None,
      hard_exceeded: None,
      hard_last_exceeded: None,
      soft_exceeded: None,
      soft_last_exceeded: None
    }
  }

  pub fn set_advisory(&mut self, advisory: i32) {
    self.advisory = Some(advisory);
  }

  pub fn with_advisory(mut self, advisory: i32) -> QuotaQuotaThresholdsExtended {
    self.advisory = Some(advisory);
    self
  }

  pub fn advisory(&self) -> Option<&i32> {
    self.advisory.as_ref()
  }

  pub fn reset_advisory(&mut self) {
    self.advisory = None;
  }

  pub fn set_hard(&mut self, hard: i32) {
    self.hard = Some(hard);
  }

  pub fn with_hard(mut self, hard: i32) -> QuotaQuotaThresholdsExtended {
    self.hard = Some(hard);
    self
  }

  pub fn hard(&self) -> Option<&i32> {
    self.hard.as_ref()
  }

  pub fn reset_hard(&mut self) {
    self.hard = None;
  }

  pub fn set_soft(&mut self, soft: i32) {
    self.soft = Some(soft);
  }

  pub fn with_soft(mut self, soft: i32) -> QuotaQuotaThresholdsExtended {
    self.soft = Some(soft);
    self
  }

  pub fn soft(&self) -> Option<&i32> {
    self.soft.as_ref()
  }

  pub fn reset_soft(&mut self) {
    self.soft = None;
  }

  pub fn set_soft_grace(&mut self, soft_grace: i32) {
    self.soft_grace = Some(soft_grace);
  }

  pub fn with_soft_grace(mut self, soft_grace: i32) -> QuotaQuotaThresholdsExtended {
    self.soft_grace = Some(soft_grace);
    self
  }

  pub fn soft_grace(&self) -> Option<&i32> {
    self.soft_grace.as_ref()
  }

  pub fn reset_soft_grace(&mut self) {
    self.soft_grace = None;
  }

  pub fn set_advisory_exceeded(&mut self, advisory_exceeded: bool) {
    self.advisory_exceeded = Some(advisory_exceeded);
  }

  pub fn with_advisory_exceeded(mut self, advisory_exceeded: bool) -> QuotaQuotaThresholdsExtended {
    self.advisory_exceeded = Some(advisory_exceeded);
    self
  }

  pub fn advisory_exceeded(&self) -> Option<&bool> {
    self.advisory_exceeded.as_ref()
  }

  pub fn reset_advisory_exceeded(&mut self) {
    self.advisory_exceeded = None;
  }

  pub fn set_advisory_last_exceeded(&mut self, advisory_last_exceeded: i32) {
    self.advisory_last_exceeded = Some(advisory_last_exceeded);
  }

  pub fn with_advisory_last_exceeded(mut self, advisory_last_exceeded: i32) -> QuotaQuotaThresholdsExtended {
    self.advisory_last_exceeded = Some(advisory_last_exceeded);
    self
  }

  pub fn advisory_last_exceeded(&self) -> Option<&i32> {
    self.advisory_last_exceeded.as_ref()
  }

  pub fn reset_advisory_last_exceeded(&mut self) {
    self.advisory_last_exceeded = None;
  }

  pub fn set_hard_exceeded(&mut self, hard_exceeded: bool) {
    self.hard_exceeded = Some(hard_exceeded);
  }

  pub fn with_hard_exceeded(mut self, hard_exceeded: bool) -> QuotaQuotaThresholdsExtended {
    self.hard_exceeded = Some(hard_exceeded);
    self
  }

  pub fn hard_exceeded(&self) -> Option<&bool> {
    self.hard_exceeded.as_ref()
  }

  pub fn reset_hard_exceeded(&mut self) {
    self.hard_exceeded = None;
  }

  pub fn set_hard_last_exceeded(&mut self, hard_last_exceeded: i32) {
    self.hard_last_exceeded = Some(hard_last_exceeded);
  }

  pub fn with_hard_last_exceeded(mut self, hard_last_exceeded: i32) -> QuotaQuotaThresholdsExtended {
    self.hard_last_exceeded = Some(hard_last_exceeded);
    self
  }

  pub fn hard_last_exceeded(&self) -> Option<&i32> {
    self.hard_last_exceeded.as_ref()
  }

  pub fn reset_hard_last_exceeded(&mut self) {
    self.hard_last_exceeded = None;
  }

  pub fn set_soft_exceeded(&mut self, soft_exceeded: bool) {
    self.soft_exceeded = Some(soft_exceeded);
  }

  pub fn with_soft_exceeded(mut self, soft_exceeded: bool) -> QuotaQuotaThresholdsExtended {
    self.soft_exceeded = Some(soft_exceeded);
    self
  }

  pub fn soft_exceeded(&self) -> Option<&bool> {
    self.soft_exceeded.as_ref()
  }

  pub fn reset_soft_exceeded(&mut self) {
    self.soft_exceeded = None;
  }

  pub fn set_soft_last_exceeded(&mut self, soft_last_exceeded: i32) {
    self.soft_last_exceeded = Some(soft_last_exceeded);
  }

  pub fn with_soft_last_exceeded(mut self, soft_last_exceeded: i32) -> QuotaQuotaThresholdsExtended {
    self.soft_last_exceeded = Some(soft_last_exceeded);
    self
  }

  pub fn soft_last_exceeded(&self) -> Option<&i32> {
    self.soft_last_exceeded.as_ref()
  }

  pub fn reset_soft_last_exceeded(&mut self) {
    self.soft_last_exceeded = None;
  }

}



