/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthGroupCreateParams {
  /// Specifies the numeric group identifier.
  #[serde(rename = "gid")]
  gid: Option<i32>,
  /// Specifies the members of the group.
  #[serde(rename = "members")]
  members: Option<Vec<::models::AuthAccessAccessItemFileGroup>>,
  /// Specifies the group name.
  #[serde(rename = "name")]
  name: String,
  /// Specifies the security identifier.
  #[serde(rename = "sid")]
  sid: Option<String>
}

impl AuthGroupCreateParams {
  pub fn new(name: String) -> AuthGroupCreateParams {
    AuthGroupCreateParams {
      gid: None,
      members: None,
      name: name,
      sid: None
    }
  }

  pub fn set_gid(&mut self, gid: i32) {
    self.gid = Some(gid);
  }

  pub fn with_gid(mut self, gid: i32) -> AuthGroupCreateParams {
    self.gid = Some(gid);
    self
  }

  pub fn gid(&self) -> Option<&i32> {
    self.gid.as_ref()
  }

  pub fn reset_gid(&mut self) {
    self.gid = None;
  }

  pub fn set_members(&mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) {
    self.members = Some(members);
  }

  pub fn with_members(mut self, members: Vec<::models::AuthAccessAccessItemFileGroup>) -> AuthGroupCreateParams {
    self.members = Some(members);
    self
  }

  pub fn members(&self) -> Option<&Vec<::models::AuthAccessAccessItemFileGroup>> {
    self.members.as_ref()
  }

  pub fn reset_members(&mut self) {
    self.members = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> AuthGroupCreateParams {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_sid(&mut self, sid: String) {
    self.sid = Some(sid);
  }

  pub fn with_sid(mut self, sid: String) -> AuthGroupCreateParams {
    self.sid = Some(sid);
    self
  }

  pub fn sid(&self) -> Option<&String> {
    self.sid.as_ref()
  }

  pub fn reset_sid(&mut self) {
    self.sid = None;
  }

}



