/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
  /// Sleep timeout for a recovery thread with pending tasks
  #[serde(rename = "recovery_with_tasks")]
  recovery_with_tasks: Option<f32>,
  /// Sleep timeout for a recovery thread without pending tasks
  #[serde(rename = "recovery_without_tasks")]
  recovery_without_tasks: Option<f32>,
  /// Sleep timeout for a non-recovery thread with pending tasks
  #[serde(rename = "with_tasks")]
  with_tasks: Option<f32>,
  /// Sleep timeout for a non-recovery thread without pending tasks
  #[serde(rename = "without_tasks")]
  without_tasks: Option<f32>
}

impl CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
  pub fn new() -> CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
    CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
      recovery_with_tasks: None,
      recovery_without_tasks: None,
      with_tasks: None,
      without_tasks: None
    }
  }

  pub fn set_recovery_with_tasks(&mut self, recovery_with_tasks: f32) {
    self.recovery_with_tasks = Some(recovery_with_tasks);
  }

  pub fn with_recovery_with_tasks(mut self, recovery_with_tasks: f32) -> CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
    self.recovery_with_tasks = Some(recovery_with_tasks);
    self
  }

  pub fn recovery_with_tasks(&self) -> Option<&f32> {
    self.recovery_with_tasks.as_ref()
  }

  pub fn reset_recovery_with_tasks(&mut self) {
    self.recovery_with_tasks = None;
  }

  pub fn set_recovery_without_tasks(&mut self, recovery_without_tasks: f32) {
    self.recovery_without_tasks = Some(recovery_without_tasks);
  }

  pub fn with_recovery_without_tasks(mut self, recovery_without_tasks: f32) -> CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
    self.recovery_without_tasks = Some(recovery_without_tasks);
    self
  }

  pub fn recovery_without_tasks(&self) -> Option<&f32> {
    self.recovery_without_tasks.as_ref()
  }

  pub fn reset_recovery_without_tasks(&mut self) {
    self.recovery_without_tasks = None;
  }

  pub fn set_with_tasks(&mut self, with_tasks: f32) {
    self.with_tasks = Some(with_tasks);
  }

  pub fn with_with_tasks(mut self, with_tasks: f32) -> CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
    self.with_tasks = Some(with_tasks);
    self
  }

  pub fn with_tasks(&self) -> Option<&f32> {
    self.with_tasks.as_ref()
  }

  pub fn reset_with_tasks(&mut self) {
    self.with_tasks = None;
  }

  pub fn set_without_tasks(&mut self, without_tasks: f32) {
    self.without_tasks = Some(without_tasks);
  }

  pub fn with_without_tasks(mut self, without_tasks: f32) -> CloudSettingsSettingsSleepTimeoutCloudGarbageCollection {
    self.without_tasks = Some(without_tasks);
    self
  }

  pub fn without_tasks(&self) -> Option<&f32> {
    self.without_tasks.as_ref()
  }

  pub fn reset_without_tasks(&mut self) {
    self.without_tasks = None;
  }

}



