/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WormCreateParams {
  /// Specifies whether to commit the file to a WORM state after the retention date is set.
  #[serde(rename = "commit_to_worm")]
  commit_to_worm: Option<bool>,
  /// Specifies the retention expiration date string in Coordinated Universal Time (UTC/GMT).
  #[serde(rename = "worm_retention_date")]
  worm_retention_date: Option<String>
}

impl WormCreateParams {
  pub fn new() -> WormCreateParams {
    WormCreateParams {
      commit_to_worm: None,
      worm_retention_date: None
    }
  }

  pub fn set_commit_to_worm(&mut self, commit_to_worm: bool) {
    self.commit_to_worm = Some(commit_to_worm);
  }

  pub fn with_commit_to_worm(mut self, commit_to_worm: bool) -> WormCreateParams {
    self.commit_to_worm = Some(commit_to_worm);
    self
  }

  pub fn commit_to_worm(&self) -> Option<&bool> {
    self.commit_to_worm.as_ref()
  }

  pub fn reset_commit_to_worm(&mut self) {
    self.commit_to_worm = None;
  }

  pub fn set_worm_retention_date(&mut self, worm_retention_date: String) {
    self.worm_retention_date = Some(worm_retention_date);
  }

  pub fn with_worm_retention_date(mut self, worm_retention_date: String) -> WormCreateParams {
    self.worm_retention_date = Some(worm_retention_date);
    self
  }

  pub fn worm_retention_date(&self) -> Option<&String> {
    self.worm_retention_date.as_ref()
  }

  pub fn reset_worm_retention_date(&mut self) {
    self.worm_retention_date = None;
  }

}



