/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProvidersNisNisItem {
  /// If true, enables authentication and identity management through the authentication provider.
  #[serde(rename = "authentication")]
  authentication: Option<bool>,
  /// If true, connects the provider to a random server.
  #[serde(rename = "balance_servers")]
  balance_servers: Option<bool>,
  /// Specifies the time in seconds between provider online checks.
  #[serde(rename = "check_online_interval")]
  check_online_interval: Option<i32>,
  /// Automatically creates the home directory on the first login.
  #[serde(rename = "create_home_directory")]
  create_home_directory: Option<bool>,
  /// If true, enables the NIS provider.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// If true, allows the provider to enumerate groups.
  #[serde(rename = "enumerate_groups")]
  enumerate_groups: Option<bool>,
  /// If true, allows the provider to enumerate users.
  #[serde(rename = "enumerate_users")]
  enumerate_users: Option<bool>,
  /// Specifies the list of groups that can be resolved.
  #[serde(rename = "findable_groups")]
  findable_groups: Option<Vec<String>>,
  /// Specifies the list of users that can be resolved.
  #[serde(rename = "findable_users")]
  findable_users: Option<Vec<String>>,
  /// Specifies the domain for this provider through which groups are qualified.
  #[serde(rename = "group_domain")]
  group_domain: Option<String>,
  /// Specifies the path to the home directory template.
  #[serde(rename = "home_directory_template")]
  home_directory_template: Option<String>,
  /// If true, enables host name look ups.
  #[serde(rename = "hostname_lookup")]
  hostname_lookup: Option<bool>,
  /// Specifies the NIS provider ID.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Specifies the groups that can be viewed in the provider.
  #[serde(rename = "listable_groups")]
  listable_groups: Option<Vec<String>>,
  /// Specifies the users that can be viewed in the provider.
  #[serde(rename = "listable_users")]
  listable_users: Option<Vec<String>>,
  /// Specifies the login shell path.
  #[serde(rename = "login_shell")]
  login_shell: Option<String>,
  /// Specifies the NIS provider name.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Specifies the NIS domain name.
  #[serde(rename = "nis_domain")]
  nis_domain: Option<String>,
  /// Normalizes group names to lowercase before look up.
  #[serde(rename = "normalize_groups")]
  normalize_groups: Option<bool>,
  /// Normalizes user names to lowercase before look up.
  #[serde(rename = "normalize_users")]
  normalize_users: Option<bool>,
  /// Specifies which NTLM versions to support for users with NTLM-compatible credentials.
  #[serde(rename = "ntlm_support")]
  ntlm_support: Option<String>,
  /// Specifies the domain for the provider.
  #[serde(rename = "provider_domain")]
  provider_domain: Option<String>,
  /// Specifies the request timeout interval in seconds.
  #[serde(rename = "request_timeout")]
  request_timeout: Option<i32>,
  /// If true, checks the provider for filtered lists of findable and unfindable users and groups.
  #[serde(rename = "restrict_findable")]
  restrict_findable: Option<bool>,
  /// If true, checks the provider for filtered lists of listable and unlistable users and groups.
  #[serde(rename = "restrict_listable")]
  restrict_listable: Option<bool>,
  /// Specifies the timeout period in seconds after which a request will be retried.
  #[serde(rename = "retry_time")]
  retry_time: Option<i32>,
  /// Adds an NIS server for this provider.
  #[serde(rename = "servers")]
  servers: Option<Vec<String>>,
  /// Specifies the status of the provider.
  #[serde(rename = "status")]
  status: Option<String>,
  /// If true, indicates that this provider instance was created by OneFS and cannot be removed.
  #[serde(rename = "system")]
  system: Option<bool>,
  /// Specifies groups that cannot be resolved by the provider.
  #[serde(rename = "unfindable_groups")]
  unfindable_groups: Option<Vec<String>>,
  /// Specifies users that cannot be resolved by the provider.
  #[serde(rename = "unfindable_users")]
  unfindable_users: Option<Vec<String>>,
  /// Specifies a group that cannot be listed by the provider.
  #[serde(rename = "unlistable_groups")]
  unlistable_groups: Option<Vec<String>>,
  /// Specifies a user that cannot be listed by the provider.
  #[serde(rename = "unlistable_users")]
  unlistable_users: Option<Vec<String>>,
  /// Specifies the domain for this provider through which users are qualified.
  #[serde(rename = "user_domain")]
  user_domain: Option<String>,
  /// If true, specifies TCP for YP Match operations.
  #[serde(rename = "ypmatch_using_tcp")]
  ypmatch_using_tcp: Option<bool>
}

impl ProvidersNisNisItem {
  pub fn new() -> ProvidersNisNisItem {
    ProvidersNisNisItem {
      authentication: None,
      balance_servers: None,
      check_online_interval: None,
      create_home_directory: None,
      enabled: None,
      enumerate_groups: None,
      enumerate_users: None,
      findable_groups: None,
      findable_users: None,
      group_domain: None,
      home_directory_template: None,
      hostname_lookup: None,
      id: None,
      listable_groups: None,
      listable_users: None,
      login_shell: None,
      name: None,
      nis_domain: None,
      normalize_groups: None,
      normalize_users: None,
      ntlm_support: None,
      provider_domain: None,
      request_timeout: None,
      restrict_findable: None,
      restrict_listable: None,
      retry_time: None,
      servers: None,
      status: None,
      system: None,
      unfindable_groups: None,
      unfindable_users: None,
      unlistable_groups: None,
      unlistable_users: None,
      user_domain: None,
      ypmatch_using_tcp: None
    }
  }

  pub fn set_authentication(&mut self, authentication: bool) {
    self.authentication = Some(authentication);
  }

  pub fn with_authentication(mut self, authentication: bool) -> ProvidersNisNisItem {
    self.authentication = Some(authentication);
    self
  }

  pub fn authentication(&self) -> Option<&bool> {
    self.authentication.as_ref()
  }

  pub fn reset_authentication(&mut self) {
    self.authentication = None;
  }

  pub fn set_balance_servers(&mut self, balance_servers: bool) {
    self.balance_servers = Some(balance_servers);
  }

  pub fn with_balance_servers(mut self, balance_servers: bool) -> ProvidersNisNisItem {
    self.balance_servers = Some(balance_servers);
    self
  }

  pub fn balance_servers(&self) -> Option<&bool> {
    self.balance_servers.as_ref()
  }

  pub fn reset_balance_servers(&mut self) {
    self.balance_servers = None;
  }

  pub fn set_check_online_interval(&mut self, check_online_interval: i32) {
    self.check_online_interval = Some(check_online_interval);
  }

  pub fn with_check_online_interval(mut self, check_online_interval: i32) -> ProvidersNisNisItem {
    self.check_online_interval = Some(check_online_interval);
    self
  }

  pub fn check_online_interval(&self) -> Option<&i32> {
    self.check_online_interval.as_ref()
  }

  pub fn reset_check_online_interval(&mut self) {
    self.check_online_interval = None;
  }

  pub fn set_create_home_directory(&mut self, create_home_directory: bool) {
    self.create_home_directory = Some(create_home_directory);
  }

  pub fn with_create_home_directory(mut self, create_home_directory: bool) -> ProvidersNisNisItem {
    self.create_home_directory = Some(create_home_directory);
    self
  }

  pub fn create_home_directory(&self) -> Option<&bool> {
    self.create_home_directory.as_ref()
  }

  pub fn reset_create_home_directory(&mut self) {
    self.create_home_directory = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> ProvidersNisNisItem {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_enumerate_groups(&mut self, enumerate_groups: bool) {
    self.enumerate_groups = Some(enumerate_groups);
  }

  pub fn with_enumerate_groups(mut self, enumerate_groups: bool) -> ProvidersNisNisItem {
    self.enumerate_groups = Some(enumerate_groups);
    self
  }

  pub fn enumerate_groups(&self) -> Option<&bool> {
    self.enumerate_groups.as_ref()
  }

  pub fn reset_enumerate_groups(&mut self) {
    self.enumerate_groups = None;
  }

  pub fn set_enumerate_users(&mut self, enumerate_users: bool) {
    self.enumerate_users = Some(enumerate_users);
  }

  pub fn with_enumerate_users(mut self, enumerate_users: bool) -> ProvidersNisNisItem {
    self.enumerate_users = Some(enumerate_users);
    self
  }

  pub fn enumerate_users(&self) -> Option<&bool> {
    self.enumerate_users.as_ref()
  }

  pub fn reset_enumerate_users(&mut self) {
    self.enumerate_users = None;
  }

  pub fn set_findable_groups(&mut self, findable_groups: Vec<String>) {
    self.findable_groups = Some(findable_groups);
  }

  pub fn with_findable_groups(mut self, findable_groups: Vec<String>) -> ProvidersNisNisItem {
    self.findable_groups = Some(findable_groups);
    self
  }

  pub fn findable_groups(&self) -> Option<&Vec<String>> {
    self.findable_groups.as_ref()
  }

  pub fn reset_findable_groups(&mut self) {
    self.findable_groups = None;
  }

  pub fn set_findable_users(&mut self, findable_users: Vec<String>) {
    self.findable_users = Some(findable_users);
  }

  pub fn with_findable_users(mut self, findable_users: Vec<String>) -> ProvidersNisNisItem {
    self.findable_users = Some(findable_users);
    self
  }

  pub fn findable_users(&self) -> Option<&Vec<String>> {
    self.findable_users.as_ref()
  }

  pub fn reset_findable_users(&mut self) {
    self.findable_users = None;
  }

  pub fn set_group_domain(&mut self, group_domain: String) {
    self.group_domain = Some(group_domain);
  }

  pub fn with_group_domain(mut self, group_domain: String) -> ProvidersNisNisItem {
    self.group_domain = Some(group_domain);
    self
  }

  pub fn group_domain(&self) -> Option<&String> {
    self.group_domain.as_ref()
  }

  pub fn reset_group_domain(&mut self) {
    self.group_domain = None;
  }

  pub fn set_home_directory_template(&mut self, home_directory_template: String) {
    self.home_directory_template = Some(home_directory_template);
  }

  pub fn with_home_directory_template(mut self, home_directory_template: String) -> ProvidersNisNisItem {
    self.home_directory_template = Some(home_directory_template);
    self
  }

  pub fn home_directory_template(&self) -> Option<&String> {
    self.home_directory_template.as_ref()
  }

  pub fn reset_home_directory_template(&mut self) {
    self.home_directory_template = None;
  }

  pub fn set_hostname_lookup(&mut self, hostname_lookup: bool) {
    self.hostname_lookup = Some(hostname_lookup);
  }

  pub fn with_hostname_lookup(mut self, hostname_lookup: bool) -> ProvidersNisNisItem {
    self.hostname_lookup = Some(hostname_lookup);
    self
  }

  pub fn hostname_lookup(&self) -> Option<&bool> {
    self.hostname_lookup.as_ref()
  }

  pub fn reset_hostname_lookup(&mut self) {
    self.hostname_lookup = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ProvidersNisNisItem {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_listable_groups(&mut self, listable_groups: Vec<String>) {
    self.listable_groups = Some(listable_groups);
  }

  pub fn with_listable_groups(mut self, listable_groups: Vec<String>) -> ProvidersNisNisItem {
    self.listable_groups = Some(listable_groups);
    self
  }

  pub fn listable_groups(&self) -> Option<&Vec<String>> {
    self.listable_groups.as_ref()
  }

  pub fn reset_listable_groups(&mut self) {
    self.listable_groups = None;
  }

  pub fn set_listable_users(&mut self, listable_users: Vec<String>) {
    self.listable_users = Some(listable_users);
  }

  pub fn with_listable_users(mut self, listable_users: Vec<String>) -> ProvidersNisNisItem {
    self.listable_users = Some(listable_users);
    self
  }

  pub fn listable_users(&self) -> Option<&Vec<String>> {
    self.listable_users.as_ref()
  }

  pub fn reset_listable_users(&mut self) {
    self.listable_users = None;
  }

  pub fn set_login_shell(&mut self, login_shell: String) {
    self.login_shell = Some(login_shell);
  }

  pub fn with_login_shell(mut self, login_shell: String) -> ProvidersNisNisItem {
    self.login_shell = Some(login_shell);
    self
  }

  pub fn login_shell(&self) -> Option<&String> {
    self.login_shell.as_ref()
  }

  pub fn reset_login_shell(&mut self) {
    self.login_shell = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ProvidersNisNisItem {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_nis_domain(&mut self, nis_domain: String) {
    self.nis_domain = Some(nis_domain);
  }

  pub fn with_nis_domain(mut self, nis_domain: String) -> ProvidersNisNisItem {
    self.nis_domain = Some(nis_domain);
    self
  }

  pub fn nis_domain(&self) -> Option<&String> {
    self.nis_domain.as_ref()
  }

  pub fn reset_nis_domain(&mut self) {
    self.nis_domain = None;
  }

  pub fn set_normalize_groups(&mut self, normalize_groups: bool) {
    self.normalize_groups = Some(normalize_groups);
  }

  pub fn with_normalize_groups(mut self, normalize_groups: bool) -> ProvidersNisNisItem {
    self.normalize_groups = Some(normalize_groups);
    self
  }

  pub fn normalize_groups(&self) -> Option<&bool> {
    self.normalize_groups.as_ref()
  }

  pub fn reset_normalize_groups(&mut self) {
    self.normalize_groups = None;
  }

  pub fn set_normalize_users(&mut self, normalize_users: bool) {
    self.normalize_users = Some(normalize_users);
  }

  pub fn with_normalize_users(mut self, normalize_users: bool) -> ProvidersNisNisItem {
    self.normalize_users = Some(normalize_users);
    self
  }

  pub fn normalize_users(&self) -> Option<&bool> {
    self.normalize_users.as_ref()
  }

  pub fn reset_normalize_users(&mut self) {
    self.normalize_users = None;
  }

  pub fn set_ntlm_support(&mut self, ntlm_support: String) {
    self.ntlm_support = Some(ntlm_support);
  }

  pub fn with_ntlm_support(mut self, ntlm_support: String) -> ProvidersNisNisItem {
    self.ntlm_support = Some(ntlm_support);
    self
  }

  pub fn ntlm_support(&self) -> Option<&String> {
    self.ntlm_support.as_ref()
  }

  pub fn reset_ntlm_support(&mut self) {
    self.ntlm_support = None;
  }

  pub fn set_provider_domain(&mut self, provider_domain: String) {
    self.provider_domain = Some(provider_domain);
  }

  pub fn with_provider_domain(mut self, provider_domain: String) -> ProvidersNisNisItem {
    self.provider_domain = Some(provider_domain);
    self
  }

  pub fn provider_domain(&self) -> Option<&String> {
    self.provider_domain.as_ref()
  }

  pub fn reset_provider_domain(&mut self) {
    self.provider_domain = None;
  }

  pub fn set_request_timeout(&mut self, request_timeout: i32) {
    self.request_timeout = Some(request_timeout);
  }

  pub fn with_request_timeout(mut self, request_timeout: i32) -> ProvidersNisNisItem {
    self.request_timeout = Some(request_timeout);
    self
  }

  pub fn request_timeout(&self) -> Option<&i32> {
    self.request_timeout.as_ref()
  }

  pub fn reset_request_timeout(&mut self) {
    self.request_timeout = None;
  }

  pub fn set_restrict_findable(&mut self, restrict_findable: bool) {
    self.restrict_findable = Some(restrict_findable);
  }

  pub fn with_restrict_findable(mut self, restrict_findable: bool) -> ProvidersNisNisItem {
    self.restrict_findable = Some(restrict_findable);
    self
  }

  pub fn restrict_findable(&self) -> Option<&bool> {
    self.restrict_findable.as_ref()
  }

  pub fn reset_restrict_findable(&mut self) {
    self.restrict_findable = None;
  }

  pub fn set_restrict_listable(&mut self, restrict_listable: bool) {
    self.restrict_listable = Some(restrict_listable);
  }

  pub fn with_restrict_listable(mut self, restrict_listable: bool) -> ProvidersNisNisItem {
    self.restrict_listable = Some(restrict_listable);
    self
  }

  pub fn restrict_listable(&self) -> Option<&bool> {
    self.restrict_listable.as_ref()
  }

  pub fn reset_restrict_listable(&mut self) {
    self.restrict_listable = None;
  }

  pub fn set_retry_time(&mut self, retry_time: i32) {
    self.retry_time = Some(retry_time);
  }

  pub fn with_retry_time(mut self, retry_time: i32) -> ProvidersNisNisItem {
    self.retry_time = Some(retry_time);
    self
  }

  pub fn retry_time(&self) -> Option<&i32> {
    self.retry_time.as_ref()
  }

  pub fn reset_retry_time(&mut self) {
    self.retry_time = None;
  }

  pub fn set_servers(&mut self, servers: Vec<String>) {
    self.servers = Some(servers);
  }

  pub fn with_servers(mut self, servers: Vec<String>) -> ProvidersNisNisItem {
    self.servers = Some(servers);
    self
  }

  pub fn servers(&self) -> Option<&Vec<String>> {
    self.servers.as_ref()
  }

  pub fn reset_servers(&mut self) {
    self.servers = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> ProvidersNisNisItem {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_system(&mut self, system: bool) {
    self.system = Some(system);
  }

  pub fn with_system(mut self, system: bool) -> ProvidersNisNisItem {
    self.system = Some(system);
    self
  }

  pub fn system(&self) -> Option<&bool> {
    self.system.as_ref()
  }

  pub fn reset_system(&mut self) {
    self.system = None;
  }

  pub fn set_unfindable_groups(&mut self, unfindable_groups: Vec<String>) {
    self.unfindable_groups = Some(unfindable_groups);
  }

  pub fn with_unfindable_groups(mut self, unfindable_groups: Vec<String>) -> ProvidersNisNisItem {
    self.unfindable_groups = Some(unfindable_groups);
    self
  }

  pub fn unfindable_groups(&self) -> Option<&Vec<String>> {
    self.unfindable_groups.as_ref()
  }

  pub fn reset_unfindable_groups(&mut self) {
    self.unfindable_groups = None;
  }

  pub fn set_unfindable_users(&mut self, unfindable_users: Vec<String>) {
    self.unfindable_users = Some(unfindable_users);
  }

  pub fn with_unfindable_users(mut self, unfindable_users: Vec<String>) -> ProvidersNisNisItem {
    self.unfindable_users = Some(unfindable_users);
    self
  }

  pub fn unfindable_users(&self) -> Option<&Vec<String>> {
    self.unfindable_users.as_ref()
  }

  pub fn reset_unfindable_users(&mut self) {
    self.unfindable_users = None;
  }

  pub fn set_unlistable_groups(&mut self, unlistable_groups: Vec<String>) {
    self.unlistable_groups = Some(unlistable_groups);
  }

  pub fn with_unlistable_groups(mut self, unlistable_groups: Vec<String>) -> ProvidersNisNisItem {
    self.unlistable_groups = Some(unlistable_groups);
    self
  }

  pub fn unlistable_groups(&self) -> Option<&Vec<String>> {
    self.unlistable_groups.as_ref()
  }

  pub fn reset_unlistable_groups(&mut self) {
    self.unlistable_groups = None;
  }

  pub fn set_unlistable_users(&mut self, unlistable_users: Vec<String>) {
    self.unlistable_users = Some(unlistable_users);
  }

  pub fn with_unlistable_users(mut self, unlistable_users: Vec<String>) -> ProvidersNisNisItem {
    self.unlistable_users = Some(unlistable_users);
    self
  }

  pub fn unlistable_users(&self) -> Option<&Vec<String>> {
    self.unlistable_users.as_ref()
  }

  pub fn reset_unlistable_users(&mut self) {
    self.unlistable_users = None;
  }

  pub fn set_user_domain(&mut self, user_domain: String) {
    self.user_domain = Some(user_domain);
  }

  pub fn with_user_domain(mut self, user_domain: String) -> ProvidersNisNisItem {
    self.user_domain = Some(user_domain);
    self
  }

  pub fn user_domain(&self) -> Option<&String> {
    self.user_domain.as_ref()
  }

  pub fn reset_user_domain(&mut self) {
    self.user_domain = None;
  }

  pub fn set_ypmatch_using_tcp(&mut self, ypmatch_using_tcp: bool) {
    self.ypmatch_using_tcp = Some(ypmatch_using_tcp);
  }

  pub fn with_ypmatch_using_tcp(mut self, ypmatch_using_tcp: bool) -> ProvidersNisNisItem {
    self.ypmatch_using_tcp = Some(ypmatch_using_tcp);
    self
  }

  pub fn ypmatch_using_tcp(&self) -> Option<&bool> {
    self.ypmatch_using_tcp.as_ref()
  }

  pub fn reset_ypmatch_using_tcp(&mut self) {
    self.ypmatch_using_tcp = None;
  }

}



