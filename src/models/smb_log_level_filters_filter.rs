/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SmbLogLevelFiltersFilter {
  /// Unique ID of the log filter.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Array of client IP addresses to filter against.
  #[serde(rename = "ip_addrs")]
  ip_addrs: Option<Vec<String>>,
  /// Logging level of the filter.
  #[serde(rename = "level")]
  level: String,
  /// Array of SMB operations to filter against.
  #[serde(rename = "ops")]
  ops: Option<Vec<String>>
}

impl SmbLogLevelFiltersFilter {
  pub fn new(level: String) -> SmbLogLevelFiltersFilter {
    SmbLogLevelFiltersFilter {
      id: None,
      ip_addrs: None,
      level: level,
      ops: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SmbLogLevelFiltersFilter {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_ip_addrs(&mut self, ip_addrs: Vec<String>) {
    self.ip_addrs = Some(ip_addrs);
  }

  pub fn with_ip_addrs(mut self, ip_addrs: Vec<String>) -> SmbLogLevelFiltersFilter {
    self.ip_addrs = Some(ip_addrs);
    self
  }

  pub fn ip_addrs(&self) -> Option<&Vec<String>> {
    self.ip_addrs.as_ref()
  }

  pub fn reset_ip_addrs(&mut self) {
    self.ip_addrs = None;
  }

  pub fn set_level(&mut self, level: String) {
    self.level = level;
  }

  pub fn with_level(mut self, level: String) -> SmbLogLevelFiltersFilter {
    self.level = level;
    self
  }

  pub fn level(&self) -> &String {
    &self.level
  }


  pub fn set_ops(&mut self, ops: Vec<String>) {
    self.ops = Some(ops);
  }

  pub fn with_ops(mut self, ops: Vec<String>) -> SmbLogLevelFiltersFilter {
    self.ops = Some(ops);
    self
  }

  pub fn ops(&self) -> Option<&Vec<String>> {
    self.ops.as_ref()
  }

  pub fn reset_ops(&mut self) {
    self.ops = None;
  }

}



