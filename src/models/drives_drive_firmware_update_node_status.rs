/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DrivesDriveFirmwareUpdateNodeStatus {
  /// The number of drives that did not successfully complete firmware updates update on the node.
  #[serde(rename = "failed")]
  failed: Option<i32>,
  /// Time when drive firmware update finished on node.
  #[serde(rename = "finish_time")]
  finish_time: Option<String>,
  /// Number of drives remaining to be updated on node.
  #[serde(rename = "remaining")]
  remaining: Option<i32>,
  /// Time when drive firmware update started on node.
  #[serde(rename = "start_time")]
  start_time: Option<String>,
  /// Overall status of this nodes firmware updates.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The number of drives that completed firmware updates on the node.
  #[serde(rename = "updated")]
  updated: Option<i32>
}

impl DrivesDriveFirmwareUpdateNodeStatus {
  pub fn new() -> DrivesDriveFirmwareUpdateNodeStatus {
    DrivesDriveFirmwareUpdateNodeStatus {
      failed: None,
      finish_time: None,
      remaining: None,
      start_time: None,
      status: None,
      updated: None
    }
  }

  pub fn set_failed(&mut self, failed: i32) {
    self.failed = Some(failed);
  }

  pub fn with_failed(mut self, failed: i32) -> DrivesDriveFirmwareUpdateNodeStatus {
    self.failed = Some(failed);
    self
  }

  pub fn failed(&self) -> Option<&i32> {
    self.failed.as_ref()
  }

  pub fn reset_failed(&mut self) {
    self.failed = None;
  }

  pub fn set_finish_time(&mut self, finish_time: String) {
    self.finish_time = Some(finish_time);
  }

  pub fn with_finish_time(mut self, finish_time: String) -> DrivesDriveFirmwareUpdateNodeStatus {
    self.finish_time = Some(finish_time);
    self
  }

  pub fn finish_time(&self) -> Option<&String> {
    self.finish_time.as_ref()
  }

  pub fn reset_finish_time(&mut self) {
    self.finish_time = None;
  }

  pub fn set_remaining(&mut self, remaining: i32) {
    self.remaining = Some(remaining);
  }

  pub fn with_remaining(mut self, remaining: i32) -> DrivesDriveFirmwareUpdateNodeStatus {
    self.remaining = Some(remaining);
    self
  }

  pub fn remaining(&self) -> Option<&i32> {
    self.remaining.as_ref()
  }

  pub fn reset_remaining(&mut self) {
    self.remaining = None;
  }

  pub fn set_start_time(&mut self, start_time: String) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: String) -> DrivesDriveFirmwareUpdateNodeStatus {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&String> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> DrivesDriveFirmwareUpdateNodeStatus {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_updated(&mut self, updated: i32) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: i32) -> DrivesDriveFirmwareUpdateNodeStatus {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&i32> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

}



