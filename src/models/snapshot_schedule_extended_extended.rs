/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotScheduleExtendedExtended {
  /// Alias name to create for each snapshot.
  #[serde(rename = "alias")]
  alias: Option<String>,
  /// Time in seconds added to creation time to construction expiration time.
  #[serde(rename = "duration")]
  duration: Option<i32>,
  /// The system ID given to the schedule.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// The schedule name.
  #[serde(rename = "name")]
  name: Option<String>,
  /// Unix Epoch time of next snapshot to be created.
  #[serde(rename = "next_run")]
  next_run: Option<i32>,
  /// Formatted name (see pattern) of next snapshot to be created.
  #[serde(rename = "next_snapshot")]
  next_snapshot: Option<String>,
  /// The /ifs path snapshotted.
  #[serde(rename = "path")]
  path: Option<String>,
  /// Pattern expanded with strftime to create snapshot names.
  #[serde(rename = "pattern")]
  pattern: Option<String>,
  /// The isidate compatible natural language description of the schedule.
  #[serde(rename = "schedule")]
  schedule: Option<String>
}

impl SnapshotScheduleExtendedExtended {
  pub fn new() -> SnapshotScheduleExtendedExtended {
    SnapshotScheduleExtendedExtended {
      alias: None,
      duration: None,
      id: None,
      name: None,
      next_run: None,
      next_snapshot: None,
      path: None,
      pattern: None,
      schedule: None
    }
  }

  pub fn set_alias(&mut self, alias: String) {
    self.alias = Some(alias);
  }

  pub fn with_alias(mut self, alias: String) -> SnapshotScheduleExtendedExtended {
    self.alias = Some(alias);
    self
  }

  pub fn alias(&self) -> Option<&String> {
    self.alias.as_ref()
  }

  pub fn reset_alias(&mut self) {
    self.alias = None;
  }

  pub fn set_duration(&mut self, duration: i32) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i32) -> SnapshotScheduleExtendedExtended {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i32> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SnapshotScheduleExtendedExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> SnapshotScheduleExtendedExtended {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_next_run(&mut self, next_run: i32) {
    self.next_run = Some(next_run);
  }

  pub fn with_next_run(mut self, next_run: i32) -> SnapshotScheduleExtendedExtended {
    self.next_run = Some(next_run);
    self
  }

  pub fn next_run(&self) -> Option<&i32> {
    self.next_run.as_ref()
  }

  pub fn reset_next_run(&mut self) {
    self.next_run = None;
  }

  pub fn set_next_snapshot(&mut self, next_snapshot: String) {
    self.next_snapshot = Some(next_snapshot);
  }

  pub fn with_next_snapshot(mut self, next_snapshot: String) -> SnapshotScheduleExtendedExtended {
    self.next_snapshot = Some(next_snapshot);
    self
  }

  pub fn next_snapshot(&self) -> Option<&String> {
    self.next_snapshot.as_ref()
  }

  pub fn reset_next_snapshot(&mut self) {
    self.next_snapshot = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> SnapshotScheduleExtendedExtended {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_pattern(&mut self, pattern: String) {
    self.pattern = Some(pattern);
  }

  pub fn with_pattern(mut self, pattern: String) -> SnapshotScheduleExtendedExtended {
    self.pattern = Some(pattern);
    self
  }

  pub fn pattern(&self) -> Option<&String> {
    self.pattern.as_ref()
  }

  pub fn reset_pattern(&mut self) {
    self.pattern = None;
  }

  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = Some(schedule);
  }

  pub fn with_schedule(mut self, schedule: String) -> SnapshotScheduleExtendedExtended {
    self.schedule = Some(schedule);
    self
  }

  pub fn schedule(&self) -> Option<&String> {
    self.schedule.as_ref()
  }

  pub fn reset_schedule(&mut self) {
    self.schedule = None;
  }

}



