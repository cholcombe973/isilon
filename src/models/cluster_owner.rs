/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterOwner : Cluster contact info settings.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterOwner {
  /// Cluster owner company name.
  #[serde(rename = "company")]
  company: Option<String>,
  /// Cluster owner location.
  #[serde(rename = "location")]
  location: Option<String>,
  /// Cluster owner primary email address.
  #[serde(rename = "primary_email")]
  primary_email: Option<String>,
  /// Cluster owner primary contact name.
  #[serde(rename = "primary_name")]
  primary_name: Option<String>,
  /// Cluster owner primary contact phone number 1.
  #[serde(rename = "primary_phone1")]
  primary_phone1: Option<String>,
  /// Cluster owner primary contact phone number 2.
  #[serde(rename = "primary_phone2")]
  primary_phone2: Option<String>,
  /// Cluster owner secondary email address.
  #[serde(rename = "secondary_email")]
  secondary_email: Option<String>,
  /// Cluster owner secondary contact name.
  #[serde(rename = "secondary_name")]
  secondary_name: Option<String>,
  /// Cluster owner secondary contact phone number 1.
  #[serde(rename = "secondary_phone1")]
  secondary_phone1: Option<String>,
  /// Cluster owner secondary contact phone number 2.
  #[serde(rename = "secondary_phone2")]
  secondary_phone2: Option<String>
}

impl ClusterOwner {
  /// Cluster contact info settings.
  pub fn new() -> ClusterOwner {
    ClusterOwner {
      company: None,
      location: None,
      primary_email: None,
      primary_name: None,
      primary_phone1: None,
      primary_phone2: None,
      secondary_email: None,
      secondary_name: None,
      secondary_phone1: None,
      secondary_phone2: None
    }
  }

  pub fn set_company(&mut self, company: String) {
    self.company = Some(company);
  }

  pub fn with_company(mut self, company: String) -> ClusterOwner {
    self.company = Some(company);
    self
  }

  pub fn company(&self) -> Option<&String> {
    self.company.as_ref()
  }

  pub fn reset_company(&mut self) {
    self.company = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> ClusterOwner {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_primary_email(&mut self, primary_email: String) {
    self.primary_email = Some(primary_email);
  }

  pub fn with_primary_email(mut self, primary_email: String) -> ClusterOwner {
    self.primary_email = Some(primary_email);
    self
  }

  pub fn primary_email(&self) -> Option<&String> {
    self.primary_email.as_ref()
  }

  pub fn reset_primary_email(&mut self) {
    self.primary_email = None;
  }

  pub fn set_primary_name(&mut self, primary_name: String) {
    self.primary_name = Some(primary_name);
  }

  pub fn with_primary_name(mut self, primary_name: String) -> ClusterOwner {
    self.primary_name = Some(primary_name);
    self
  }

  pub fn primary_name(&self) -> Option<&String> {
    self.primary_name.as_ref()
  }

  pub fn reset_primary_name(&mut self) {
    self.primary_name = None;
  }

  pub fn set_primary_phone1(&mut self, primary_phone1: String) {
    self.primary_phone1 = Some(primary_phone1);
  }

  pub fn with_primary_phone1(mut self, primary_phone1: String) -> ClusterOwner {
    self.primary_phone1 = Some(primary_phone1);
    self
  }

  pub fn primary_phone1(&self) -> Option<&String> {
    self.primary_phone1.as_ref()
  }

  pub fn reset_primary_phone1(&mut self) {
    self.primary_phone1 = None;
  }

  pub fn set_primary_phone2(&mut self, primary_phone2: String) {
    self.primary_phone2 = Some(primary_phone2);
  }

  pub fn with_primary_phone2(mut self, primary_phone2: String) -> ClusterOwner {
    self.primary_phone2 = Some(primary_phone2);
    self
  }

  pub fn primary_phone2(&self) -> Option<&String> {
    self.primary_phone2.as_ref()
  }

  pub fn reset_primary_phone2(&mut self) {
    self.primary_phone2 = None;
  }

  pub fn set_secondary_email(&mut self, secondary_email: String) {
    self.secondary_email = Some(secondary_email);
  }

  pub fn with_secondary_email(mut self, secondary_email: String) -> ClusterOwner {
    self.secondary_email = Some(secondary_email);
    self
  }

  pub fn secondary_email(&self) -> Option<&String> {
    self.secondary_email.as_ref()
  }

  pub fn reset_secondary_email(&mut self) {
    self.secondary_email = None;
  }

  pub fn set_secondary_name(&mut self, secondary_name: String) {
    self.secondary_name = Some(secondary_name);
  }

  pub fn with_secondary_name(mut self, secondary_name: String) -> ClusterOwner {
    self.secondary_name = Some(secondary_name);
    self
  }

  pub fn secondary_name(&self) -> Option<&String> {
    self.secondary_name.as_ref()
  }

  pub fn reset_secondary_name(&mut self) {
    self.secondary_name = None;
  }

  pub fn set_secondary_phone1(&mut self, secondary_phone1: String) {
    self.secondary_phone1 = Some(secondary_phone1);
  }

  pub fn with_secondary_phone1(mut self, secondary_phone1: String) -> ClusterOwner {
    self.secondary_phone1 = Some(secondary_phone1);
    self
  }

  pub fn secondary_phone1(&self) -> Option<&String> {
    self.secondary_phone1.as_ref()
  }

  pub fn reset_secondary_phone1(&mut self) {
    self.secondary_phone1 = None;
  }

  pub fn set_secondary_phone2(&mut self, secondary_phone2: String) {
    self.secondary_phone2 = Some(secondary_phone2);
  }

  pub fn with_secondary_phone2(mut self, secondary_phone2: String) -> ClusterOwner {
    self.secondary_phone2 = Some(secondary_phone2);
    self
  }

  pub fn secondary_phone2(&self) -> Option<&String> {
    self.secondary_phone2.as_ref()
  }

  pub fn reset_secondary_phone2(&mut self) {
    self.secondary_phone2 = None;
  }

}



