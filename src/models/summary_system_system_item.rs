/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummarySystemSystemItem {
  /// The percentage CPU utilization.
  #[serde(rename = "cpu")]
  cpu: f32,
  /// Traffic to disk (in bytes/sec).
  #[serde(rename = "disk_in")]
  disk_in: f32,
  /// Traffic from disk (in bytes/sec).
  #[serde(rename = "disk_out")]
  disk_out: f32,
  /// The total throughput (in bytes/sec) for FTP operations.
  #[serde(rename = "ftp")]
  ftp: f32,
  /// The total throughput (in bytes/second) for HDFS operations.
  #[serde(rename = "hdfs")]
  hdfs: f32,
  /// The total throughput (in bytes/sec) for HTTP operations.
  #[serde(rename = "http")]
  http: f32,
  /// Incoming network traffic (in bytes/sec) for all operations.
  #[serde(rename = "net_in")]
  net_in: f32,
  /// Outgoing network traffic (in bytes/sec) for all operations.
  #[serde(rename = "net_out")]
  net_out: f32,
  /// The total throughput (in bytes/sec) for NFS (NFS3 & NFS4) operations.
  #[serde(rename = "nfs")]
  nfs: f32,
  /// Node ID/LNN, 'All' for cluster.
  #[serde(rename = "node")]
  node: String,
  /// The total throughput (in bytes/sec) for SMB (SMB1 & SMB2) operations.
  #[serde(rename = "smb")]
  smb: f32,
  /// Unix Epoch time in seconds of the request.
  #[serde(rename = "time")]
  time: i32,
  /// The total throughput (in bytes/sec) for all protocols listed.
  #[serde(rename = "total")]
  total: f32
}

impl SummarySystemSystemItem {
  pub fn new(cpu: f32, disk_in: f32, disk_out: f32, ftp: f32, hdfs: f32, http: f32, net_in: f32, net_out: f32, nfs: f32, node: String, smb: f32, time: i32, total: f32) -> SummarySystemSystemItem {
    SummarySystemSystemItem {
      cpu: cpu,
      disk_in: disk_in,
      disk_out: disk_out,
      ftp: ftp,
      hdfs: hdfs,
      http: http,
      net_in: net_in,
      net_out: net_out,
      nfs: nfs,
      node: node,
      smb: smb,
      time: time,
      total: total
    }
  }

  pub fn set_cpu(&mut self, cpu: f32) {
    self.cpu = cpu;
  }

  pub fn with_cpu(mut self, cpu: f32) -> SummarySystemSystemItem {
    self.cpu = cpu;
    self
  }

  pub fn cpu(&self) -> &f32 {
    &self.cpu
  }


  pub fn set_disk_in(&mut self, disk_in: f32) {
    self.disk_in = disk_in;
  }

  pub fn with_disk_in(mut self, disk_in: f32) -> SummarySystemSystemItem {
    self.disk_in = disk_in;
    self
  }

  pub fn disk_in(&self) -> &f32 {
    &self.disk_in
  }


  pub fn set_disk_out(&mut self, disk_out: f32) {
    self.disk_out = disk_out;
  }

  pub fn with_disk_out(mut self, disk_out: f32) -> SummarySystemSystemItem {
    self.disk_out = disk_out;
    self
  }

  pub fn disk_out(&self) -> &f32 {
    &self.disk_out
  }


  pub fn set_ftp(&mut self, ftp: f32) {
    self.ftp = ftp;
  }

  pub fn with_ftp(mut self, ftp: f32) -> SummarySystemSystemItem {
    self.ftp = ftp;
    self
  }

  pub fn ftp(&self) -> &f32 {
    &self.ftp
  }


  pub fn set_hdfs(&mut self, hdfs: f32) {
    self.hdfs = hdfs;
  }

  pub fn with_hdfs(mut self, hdfs: f32) -> SummarySystemSystemItem {
    self.hdfs = hdfs;
    self
  }

  pub fn hdfs(&self) -> &f32 {
    &self.hdfs
  }


  pub fn set_http(&mut self, http: f32) {
    self.http = http;
  }

  pub fn with_http(mut self, http: f32) -> SummarySystemSystemItem {
    self.http = http;
    self
  }

  pub fn http(&self) -> &f32 {
    &self.http
  }


  pub fn set_net_in(&mut self, net_in: f32) {
    self.net_in = net_in;
  }

  pub fn with_net_in(mut self, net_in: f32) -> SummarySystemSystemItem {
    self.net_in = net_in;
    self
  }

  pub fn net_in(&self) -> &f32 {
    &self.net_in
  }


  pub fn set_net_out(&mut self, net_out: f32) {
    self.net_out = net_out;
  }

  pub fn with_net_out(mut self, net_out: f32) -> SummarySystemSystemItem {
    self.net_out = net_out;
    self
  }

  pub fn net_out(&self) -> &f32 {
    &self.net_out
  }


  pub fn set_nfs(&mut self, nfs: f32) {
    self.nfs = nfs;
  }

  pub fn with_nfs(mut self, nfs: f32) -> SummarySystemSystemItem {
    self.nfs = nfs;
    self
  }

  pub fn nfs(&self) -> &f32 {
    &self.nfs
  }


  pub fn set_node(&mut self, node: String) {
    self.node = node;
  }

  pub fn with_node(mut self, node: String) -> SummarySystemSystemItem {
    self.node = node;
    self
  }

  pub fn node(&self) -> &String {
    &self.node
  }


  pub fn set_smb(&mut self, smb: f32) {
    self.smb = smb;
  }

  pub fn with_smb(mut self, smb: f32) -> SummarySystemSystemItem {
    self.smb = smb;
    self
  }

  pub fn smb(&self) -> &f32 {
    &self.smb
  }


  pub fn set_time(&mut self, time: i32) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i32) -> SummarySystemSystemItem {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i32 {
    &self.time
  }


  pub fn set_total(&mut self, total: f32) {
    self.total = total;
  }

  pub fn with_total(mut self, total: f32) -> SummarySystemSystemItem {
    self.total = total;
    self
  }

  pub fn total(&self) -> &f32 {
    &self.total
  }


}



