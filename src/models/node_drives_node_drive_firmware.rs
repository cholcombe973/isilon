/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeDrivesNodeDriveFirmware {
  /// This drive's current firmware revision
  #[serde(rename = "current_firmware")]
  current_firmware: Option<String>,
  /// This drive's desired firmware revision.
  #[serde(rename = "desired_firmware")]
  desired_firmware: Option<String>
}

impl NodeDrivesNodeDriveFirmware {
  pub fn new() -> NodeDrivesNodeDriveFirmware {
    NodeDrivesNodeDriveFirmware {
      current_firmware: None,
      desired_firmware: None
    }
  }

  pub fn set_current_firmware(&mut self, current_firmware: String) {
    self.current_firmware = Some(current_firmware);
  }

  pub fn with_current_firmware(mut self, current_firmware: String) -> NodeDrivesNodeDriveFirmware {
    self.current_firmware = Some(current_firmware);
    self
  }

  pub fn current_firmware(&self) -> Option<&String> {
    self.current_firmware.as_ref()
  }

  pub fn reset_current_firmware(&mut self) {
    self.current_firmware = None;
  }

  pub fn set_desired_firmware(&mut self, desired_firmware: String) {
    self.desired_firmware = Some(desired_firmware);
  }

  pub fn with_desired_firmware(mut self, desired_firmware: String) -> NodeDrivesNodeDriveFirmware {
    self.desired_firmware = Some(desired_firmware);
    self
  }

  pub fn desired_firmware(&self) -> Option<&String> {
    self.desired_firmware.as_ref()
  }

  pub fn reset_desired_firmware(&mut self) {
    self.desired_firmware = None;
  }

}



