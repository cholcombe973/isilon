/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobPolicyExtended {
  /// A helpful human-readable description of the impact policy.
  #[serde(rename = "description")]
  description: String,
  #[serde(rename = "intervals")]
  intervals: Vec<::models::JobPolicyInterval>,
  /// The ID of the impact policy.
  #[serde(rename = "id")]
  id: String,
  /// The name of the impact policy.
  #[serde(rename = "name")]
  name: String,
  /// Whether or not this is a read-only system impact policy.
  #[serde(rename = "system")]
  system: Option<bool>
}

impl JobPolicyExtended {
  pub fn new(description: String, intervals: Vec<::models::JobPolicyInterval>, id: String, name: String) -> JobPolicyExtended {
    JobPolicyExtended {
      description: description,
      intervals: intervals,
      id: id,
      name: name,
      system: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> JobPolicyExtended {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_intervals(&mut self, intervals: Vec<::models::JobPolicyInterval>) {
    self.intervals = intervals;
  }

  pub fn with_intervals(mut self, intervals: Vec<::models::JobPolicyInterval>) -> JobPolicyExtended {
    self.intervals = intervals;
    self
  }

  pub fn intervals(&self) -> &Vec<::models::JobPolicyInterval> {
    &self.intervals
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> JobPolicyExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> JobPolicyExtended {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_system(&mut self, system: bool) {
    self.system = Some(system);
  }

  pub fn with_system(mut self, system: bool) -> JobPolicyExtended {
    self.system = Some(system);
    self
  }

  pub fn system(&self) -> Option<&bool> {
    self.system.as_ref()
  }

  pub fn reset_system(&mut self) {
    self.system = None;
  }

}



