/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NtpSettingsSettings {
  /// Number of nodes that will contact the NTP servers.
  #[serde(rename = "chimers")]
  chimers: Option<i32>,
  /// Node number (LNN) for nodes excluded from chimer duty.
  #[serde(rename = "excluded")]
  excluded: Option<Vec<String>>,
  /// Path to NTP key file within /ifs.
  #[serde(rename = "key_file")]
  key_file: Option<String>
}

impl NtpSettingsSettings {
  pub fn new() -> NtpSettingsSettings {
    NtpSettingsSettings {
      chimers: None,
      excluded: None,
      key_file: None
    }
  }

  pub fn set_chimers(&mut self, chimers: i32) {
    self.chimers = Some(chimers);
  }

  pub fn with_chimers(mut self, chimers: i32) -> NtpSettingsSettings {
    self.chimers = Some(chimers);
    self
  }

  pub fn chimers(&self) -> Option<&i32> {
    self.chimers.as_ref()
  }

  pub fn reset_chimers(&mut self) {
    self.chimers = None;
  }

  pub fn set_excluded(&mut self, excluded: Vec<String>) {
    self.excluded = Some(excluded);
  }

  pub fn with_excluded(mut self, excluded: Vec<String>) -> NtpSettingsSettings {
    self.excluded = Some(excluded);
    self
  }

  pub fn excluded(&self) -> Option<&Vec<String>> {
    self.excluded.as_ref()
  }

  pub fn reset_excluded(&mut self) {
    self.excluded = None;
  }

  pub fn set_key_file(&mut self, key_file: String) {
    self.key_file = Some(key_file);
  }

  pub fn with_key_file(mut self, key_file: String) -> NtpSettingsSettings {
    self.key_file = Some(key_file);
    self
  }

  pub fn key_file(&self) -> Option<&String> {
    self.key_file.as_ref()
  }

  pub fn reset_key_file(&mut self) {
    self.key_file = None;
  }

}



