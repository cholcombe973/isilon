/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStatusNodePowersupplies {
  /// Count of how many power supplies are supported.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// Count of how many power supplies have failed.
  #[serde(rename = "failures")]
  failures: Option<i32>,
  /// Does this node have a CFF power supply.
  #[serde(rename = "has_cff")]
  has_cff: Option<bool>,
  /// A descriptive status string for this node's power supplies.
  #[serde(rename = "status")]
  status: Option<String>,
  /// List of this node's power supplies.
  #[serde(rename = "supplies")]
  supplies: Option<Vec<::models::NodeStatusNodePowersuppliesSupply>>,
  /// Does this node support CFF power supplies.
  #[serde(rename = "supports_cff")]
  supports_cff: Option<bool>
}

impl NodeStatusNodePowersupplies {
  pub fn new() -> NodeStatusNodePowersupplies {
    NodeStatusNodePowersupplies {
      count: None,
      failures: None,
      has_cff: None,
      status: None,
      supplies: None,
      supports_cff: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> NodeStatusNodePowersupplies {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_failures(&mut self, failures: i32) {
    self.failures = Some(failures);
  }

  pub fn with_failures(mut self, failures: i32) -> NodeStatusNodePowersupplies {
    self.failures = Some(failures);
    self
  }

  pub fn failures(&self) -> Option<&i32> {
    self.failures.as_ref()
  }

  pub fn reset_failures(&mut self) {
    self.failures = None;
  }

  pub fn set_has_cff(&mut self, has_cff: bool) {
    self.has_cff = Some(has_cff);
  }

  pub fn with_has_cff(mut self, has_cff: bool) -> NodeStatusNodePowersupplies {
    self.has_cff = Some(has_cff);
    self
  }

  pub fn has_cff(&self) -> Option<&bool> {
    self.has_cff.as_ref()
  }

  pub fn reset_has_cff(&mut self) {
    self.has_cff = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> NodeStatusNodePowersupplies {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_supplies(&mut self, supplies: Vec<::models::NodeStatusNodePowersuppliesSupply>) {
    self.supplies = Some(supplies);
  }

  pub fn with_supplies(mut self, supplies: Vec<::models::NodeStatusNodePowersuppliesSupply>) -> NodeStatusNodePowersupplies {
    self.supplies = Some(supplies);
    self
  }

  pub fn supplies(&self) -> Option<&Vec<::models::NodeStatusNodePowersuppliesSupply>> {
    self.supplies.as_ref()
  }

  pub fn reset_supplies(&mut self) {
    self.supplies = None;
  }

  pub fn set_supports_cff(&mut self, supports_cff: bool) {
    self.supports_cff = Some(supports_cff);
  }

  pub fn with_supports_cff(mut self, supports_cff: bool) -> NodeStatusNodePowersupplies {
    self.supports_cff = Some(supports_cff);
    self
  }

  pub fn supports_cff(&self) -> Option<&bool> {
    self.supports_cff.as_ref()
  }

  pub fn reset_supports_cff(&mut self) {
    self.supports_cff = None;
  }

}



