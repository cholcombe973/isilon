/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeStateServicelightExtended : Node service light state.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStateServicelightExtended {
  /// The node service light state (True = on).
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// This node has a service light.
  #[serde(rename = "present")]
  present: Option<bool>,
  /// This node supports a service light.
  #[serde(rename = "supported")]
  supported: Option<bool>,
  /// The node service light state is valid (False = Error).
  #[serde(rename = "valid")]
  valid: Option<bool>
}

impl NodeStateServicelightExtended {
  /// Node service light state.
  pub fn new() -> NodeStateServicelightExtended {
    NodeStateServicelightExtended {
      enabled: None,
      present: None,
      supported: None,
      valid: None
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> NodeStateServicelightExtended {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_present(&mut self, present: bool) {
    self.present = Some(present);
  }

  pub fn with_present(mut self, present: bool) -> NodeStateServicelightExtended {
    self.present = Some(present);
    self
  }

  pub fn present(&self) -> Option<&bool> {
    self.present.as_ref()
  }

  pub fn reset_present(&mut self) {
    self.present = None;
  }

  pub fn set_supported(&mut self, supported: bool) {
    self.supported = Some(supported);
  }

  pub fn with_supported(mut self, supported: bool) -> NodeStateServicelightExtended {
    self.supported = Some(supported);
    self
  }

  pub fn supported(&self) -> Option<&bool> {
    self.supported.as_ref()
  }

  pub fn reset_supported(&mut self) {
    self.supported = None;
  }

  pub fn set_valid(&mut self, valid: bool) {
    self.valid = Some(valid);
  }

  pub fn with_valid(mut self, valid: bool) -> NodeStateServicelightExtended {
    self.valid = Some(valid);
    self
  }

  pub fn valid(&self) -> Option<&bool> {
    self.valid.as_ref()
  }

  pub fn reset_valid(&mut self) {
    self.valid = None;
  }

}



