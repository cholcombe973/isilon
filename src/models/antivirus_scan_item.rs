/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AntivirusScanItem : Parameters for a manual antivirus scan.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AntivirusScanItem {
  /// The full path of the file to scan.
  #[serde(rename = "file")]
  file: String,
  /// Forces the scan to run regardless of whether the files were recently scanned. The default value is true.
  #[serde(rename = "force_run")]
  force_run: Option<bool>,
  /// The ID of the policy to use for the scan. By default, the scan will use the MANUAL policy.
  #[serde(rename = "policy")]
  policy: Option<String>,
  /// The ID for the report for this scan. A report ID will be generated if one is not provided.
  #[serde(rename = "report_id")]
  report_id: Option<String>
}

impl AntivirusScanItem {
  /// Parameters for a manual antivirus scan.
  pub fn new(file: String) -> AntivirusScanItem {
    AntivirusScanItem {
      file: file,
      force_run: None,
      policy: None,
      report_id: None
    }
  }

  pub fn set_file(&mut self, file: String) {
    self.file = file;
  }

  pub fn with_file(mut self, file: String) -> AntivirusScanItem {
    self.file = file;
    self
  }

  pub fn file(&self) -> &String {
    &self.file
  }


  pub fn set_force_run(&mut self, force_run: bool) {
    self.force_run = Some(force_run);
  }

  pub fn with_force_run(mut self, force_run: bool) -> AntivirusScanItem {
    self.force_run = Some(force_run);
    self
  }

  pub fn force_run(&self) -> Option<&bool> {
    self.force_run.as_ref()
  }

  pub fn reset_force_run(&mut self) {
    self.force_run = None;
  }

  pub fn set_policy(&mut self, policy: String) {
    self.policy = Some(policy);
  }

  pub fn with_policy(mut self, policy: String) -> AntivirusScanItem {
    self.policy = Some(policy);
    self
  }

  pub fn policy(&self) -> Option<&String> {
    self.policy.as_ref()
  }

  pub fn reset_policy(&mut self) {
    self.policy = None;
  }

  pub fn set_report_id(&mut self, report_id: String) {
    self.report_id = Some(report_id);
  }

  pub fn with_report_id(mut self, report_id: String) -> AntivirusScanItem {
    self.report_id = Some(report_id);
    self
  }

  pub fn report_id(&self) -> Option<&String> {
    self.report_id.as_ref()
  }

  pub fn reset_report_id(&mut self) {
    self.report_id = None;
  }

}



