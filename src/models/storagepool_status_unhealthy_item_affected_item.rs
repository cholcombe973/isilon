/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolStatusUnhealthyItemAffectedItem {
  /// 
  #[serde(rename = "device")]
  device: Option<::models::StoragepoolStatusUnprovisionedItem>,
  /// Whether or not the device is currently down.
  #[serde(rename = "down")]
  down: bool,
  /// Whether or not the device is currently being repaired.
  #[serde(rename = "restriping")]
  restriping: bool,
  /// Whether or not the device is currently smartfailed.
  #[serde(rename = "smartfailed")]
  smartfailed: bool,
  /// The type of affected device.
  #[serde(rename = "type")]
  _type: String
}

impl StoragepoolStatusUnhealthyItemAffectedItem {
  pub fn new(down: bool, restriping: bool, smartfailed: bool, _type: String) -> StoragepoolStatusUnhealthyItemAffectedItem {
    StoragepoolStatusUnhealthyItemAffectedItem {
      device: None,
      down: down,
      restriping: restriping,
      smartfailed: smartfailed,
      _type: _type
    }
  }

  pub fn set_device(&mut self, device: ::models::StoragepoolStatusUnprovisionedItem) {
    self.device = Some(device);
  }

  pub fn with_device(mut self, device: ::models::StoragepoolStatusUnprovisionedItem) -> StoragepoolStatusUnhealthyItemAffectedItem {
    self.device = Some(device);
    self
  }

  pub fn device(&self) -> Option<&::models::StoragepoolStatusUnprovisionedItem> {
    self.device.as_ref()
  }

  pub fn reset_device(&mut self) {
    self.device = None;
  }

  pub fn set_down(&mut self, down: bool) {
    self.down = down;
  }

  pub fn with_down(mut self, down: bool) -> StoragepoolStatusUnhealthyItemAffectedItem {
    self.down = down;
    self
  }

  pub fn down(&self) -> &bool {
    &self.down
  }


  pub fn set_restriping(&mut self, restriping: bool) {
    self.restriping = restriping;
  }

  pub fn with_restriping(mut self, restriping: bool) -> StoragepoolStatusUnhealthyItemAffectedItem {
    self.restriping = restriping;
    self
  }

  pub fn restriping(&self) -> &bool {
    &self.restriping
  }


  pub fn set_smartfailed(&mut self, smartfailed: bool) {
    self.smartfailed = smartfailed;
  }

  pub fn with_smartfailed(mut self, smartfailed: bool) -> StoragepoolStatusUnhealthyItemAffectedItem {
    self.smartfailed = smartfailed;
    self
  }

  pub fn smartfailed(&self) -> &bool {
    &self.smartfailed
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> StoragepoolStatusUnhealthyItemAffectedItem {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



