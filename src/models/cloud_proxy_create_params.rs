/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudProxyCreateParams {
  /// A host name or network address for connecting to this proxy
  #[serde(rename = "host")]
  host: String,
  /// A unique friendly name for this proxy configuration
  #[serde(rename = "name")]
  name: String,
  /// The password to connect to this proxy if required (write-only)
  #[serde(rename = "password")]
  password: Option<String>,
  /// The port used to connect to this proxy
  #[serde(rename = "port")]
  port: i32,
  /// The type of connection used to connect to this proxy
  #[serde(rename = "type")]
  _type: String,
  /// The username to connect to this proxy if required
  #[serde(rename = "username")]
  username: Option<String>
}

impl CloudProxyCreateParams {
  pub fn new(host: String, name: String, port: i32, _type: String) -> CloudProxyCreateParams {
    CloudProxyCreateParams {
      host: host,
      name: name,
      password: None,
      port: port,
      _type: _type,
      username: None
    }
  }

  pub fn set_host(&mut self, host: String) {
    self.host = host;
  }

  pub fn with_host(mut self, host: String) -> CloudProxyCreateParams {
    self.host = host;
    self
  }

  pub fn host(&self) -> &String {
    &self.host
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> CloudProxyCreateParams {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_password(&mut self, password: String) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: String) -> CloudProxyCreateParams {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&String> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_port(&mut self, port: i32) {
    self.port = port;
  }

  pub fn with_port(mut self, port: i32) -> CloudProxyCreateParams {
    self.port = port;
    self
  }

  pub fn port(&self) -> &i32 {
    &self.port
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> CloudProxyCreateParams {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> CloudProxyCreateParams {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



