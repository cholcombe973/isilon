/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudJobExtended {
  /// The time at which the job was completed (if applicable)
  #[serde(rename = "completion_time")]
  completion_time: Option<i32>,
  /// The time at which the job was created
  #[serde(rename = "create_time")]
  create_time: Option<i32>,
  /// A brief description of the job contents
  #[serde(rename = "description")]
  description: Option<String>,
  /// The effective state of the job (e.g,. the combination of operation_state and job_state)
  #[serde(rename = "effective_state")]
  effective_state: Option<String>,
  /// The files and filters addressed by this job
  #[serde(rename = "files")]
  files: Option<::models::CloudJobFiles>,
  /// The job's ID
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Information about the related job engine job if there is one
  #[serde(rename = "job_engine_job")]
  job_engine_job: Option<::models::CloudJobJobEngineJob>,
  /// The current state of the job
  #[serde(rename = "job_state")]
  job_state: Option<String>,
  /// The current state of the operation associated with the job
  #[serde(rename = "operation_state")]
  operation_state: Option<String>,
  /// The last time at which the job state changed
  #[serde(rename = "state_change_time")]
  state_change_time: Option<i32>,
  /// The type of cloud action to be performed by this job.
  #[serde(rename = "type")]
  _type: Option<String>
}

impl CloudJobExtended {
  pub fn new() -> CloudJobExtended {
    CloudJobExtended {
      completion_time: None,
      create_time: None,
      description: None,
      effective_state: None,
      files: None,
      id: None,
      job_engine_job: None,
      job_state: None,
      operation_state: None,
      state_change_time: None,
      _type: None
    }
  }

  pub fn set_completion_time(&mut self, completion_time: i32) {
    self.completion_time = Some(completion_time);
  }

  pub fn with_completion_time(mut self, completion_time: i32) -> CloudJobExtended {
    self.completion_time = Some(completion_time);
    self
  }

  pub fn completion_time(&self) -> Option<&i32> {
    self.completion_time.as_ref()
  }

  pub fn reset_completion_time(&mut self) {
    self.completion_time = None;
  }

  pub fn set_create_time(&mut self, create_time: i32) {
    self.create_time = Some(create_time);
  }

  pub fn with_create_time(mut self, create_time: i32) -> CloudJobExtended {
    self.create_time = Some(create_time);
    self
  }

  pub fn create_time(&self) -> Option<&i32> {
    self.create_time.as_ref()
  }

  pub fn reset_create_time(&mut self) {
    self.create_time = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> CloudJobExtended {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_effective_state(&mut self, effective_state: String) {
    self.effective_state = Some(effective_state);
  }

  pub fn with_effective_state(mut self, effective_state: String) -> CloudJobExtended {
    self.effective_state = Some(effective_state);
    self
  }

  pub fn effective_state(&self) -> Option<&String> {
    self.effective_state.as_ref()
  }

  pub fn reset_effective_state(&mut self) {
    self.effective_state = None;
  }

  pub fn set_files(&mut self, files: ::models::CloudJobFiles) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: ::models::CloudJobFiles) -> CloudJobExtended {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&::models::CloudJobFiles> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> CloudJobExtended {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_job_engine_job(&mut self, job_engine_job: ::models::CloudJobJobEngineJob) {
    self.job_engine_job = Some(job_engine_job);
  }

  pub fn with_job_engine_job(mut self, job_engine_job: ::models::CloudJobJobEngineJob) -> CloudJobExtended {
    self.job_engine_job = Some(job_engine_job);
    self
  }

  pub fn job_engine_job(&self) -> Option<&::models::CloudJobJobEngineJob> {
    self.job_engine_job.as_ref()
  }

  pub fn reset_job_engine_job(&mut self) {
    self.job_engine_job = None;
  }

  pub fn set_job_state(&mut self, job_state: String) {
    self.job_state = Some(job_state);
  }

  pub fn with_job_state(mut self, job_state: String) -> CloudJobExtended {
    self.job_state = Some(job_state);
    self
  }

  pub fn job_state(&self) -> Option<&String> {
    self.job_state.as_ref()
  }

  pub fn reset_job_state(&mut self) {
    self.job_state = None;
  }

  pub fn set_operation_state(&mut self, operation_state: String) {
    self.operation_state = Some(operation_state);
  }

  pub fn with_operation_state(mut self, operation_state: String) -> CloudJobExtended {
    self.operation_state = Some(operation_state);
    self
  }

  pub fn operation_state(&self) -> Option<&String> {
    self.operation_state.as_ref()
  }

  pub fn reset_operation_state(&mut self) {
    self.operation_state = None;
  }

  pub fn set_state_change_time(&mut self, state_change_time: i32) {
    self.state_change_time = Some(state_change_time);
  }

  pub fn with_state_change_time(mut self, state_change_time: i32) -> CloudJobExtended {
    self.state_change_time = Some(state_change_time);
    self
  }

  pub fn state_change_time(&self) -> Option<&i32> {
    self.state_change_time.as_ref()
  }

  pub fn reset_state_change_time(&mut self) {
    self.state_change_time = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with_type(mut self, _type: String) -> CloudJobExtended {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset_type(&mut self) {
    self._type = None;
  }

}



