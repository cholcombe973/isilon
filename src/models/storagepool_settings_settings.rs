/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolSettingsSettings {
  /// Automatically manage IO optimization settings on files.
  #[serde(rename = "automatically_manage_io_optimization")]
  automatically_manage_io_optimization: String,
  /// Automatically manage protection settings on files.
  #[serde(rename = "automatically_manage_protection")]
  automatically_manage_protection: String,
  /// Optimize namespace operations by storing metadata on SSDs.
  #[serde(rename = "global_namespace_acceleration_enabled")]
  global_namespace_acceleration_enabled: bool,
  /// Whether or not namespace operation optimizations are currently in effect.
  #[serde(rename = "global_namespace_acceleration_state")]
  global_namespace_acceleration_state: String,
  /// Automatically add additional protection level to all directories.
  #[serde(rename = "protect_directories_one_level_higher")]
  protect_directories_one_level_higher: bool,
  /// Spill writes into other pools as needed.
  #[serde(rename = "spillover_enabled")]
  spillover_enabled: bool,
  /// Target pool for spilled writes.
  #[serde(rename = "spillover_target")]
  spillover_target: ::models::StoragepoolSettingsSettingsSpilloverTarget,
  /// The L3 Cache default enabled state. This specifies whether L3 Cache should be enabled on new node pools.
  #[serde(rename = "ssd_l3_cache_default_enabled")]
  ssd_l3_cache_default_enabled: bool,
  /// Controls number of mirrors of QAB blocks to place on SSDs.
  #[serde(rename = "ssd_qab_mirrors")]
  ssd_qab_mirrors: String,
  /// Controls number of mirrors of system B-tree blocks to place on SSDs.
  #[serde(rename = "ssd_system_btree_mirrors")]
  ssd_system_btree_mirrors: String,
  /// Controls number of mirrors of system delta blocks to place on SSDs.
  #[serde(rename = "ssd_system_delta_mirrors")]
  ssd_system_delta_mirrors: String,
  /// Deny writes into reserved virtual hot spare space.
  #[serde(rename = "virtual_hot_spare_deny_writes")]
  virtual_hot_spare_deny_writes: bool,
  /// Hide reserved virtual hot spare space from free space counts.
  #[serde(rename = "virtual_hot_spare_hide_spare")]
  virtual_hot_spare_hide_spare: bool,
  /// The number of drives to reserve for the virtual hot spare, from 0-4.
  #[serde(rename = "virtual_hot_spare_limit_drives")]
  virtual_hot_spare_limit_drives: i32,
  /// The percent space to reserve for the virtual hot spare, from 0-20.
  #[serde(rename = "virtual_hot_spare_limit_percent")]
  virtual_hot_spare_limit_percent: i32
}

impl StoragepoolSettingsSettings {
  pub fn new(automatically_manage_io_optimization: String, automatically_manage_protection: String, global_namespace_acceleration_enabled: bool, global_namespace_acceleration_state: String, protect_directories_one_level_higher: bool, spillover_enabled: bool, spillover_target: ::models::StoragepoolSettingsSettingsSpilloverTarget, ssd_l3_cache_default_enabled: bool, ssd_qab_mirrors: String, ssd_system_btree_mirrors: String, ssd_system_delta_mirrors: String, virtual_hot_spare_deny_writes: bool, virtual_hot_spare_hide_spare: bool, virtual_hot_spare_limit_drives: i32, virtual_hot_spare_limit_percent: i32) -> StoragepoolSettingsSettings {
    StoragepoolSettingsSettings {
      automatically_manage_io_optimization: automatically_manage_io_optimization,
      automatically_manage_protection: automatically_manage_protection,
      global_namespace_acceleration_enabled: global_namespace_acceleration_enabled,
      global_namespace_acceleration_state: global_namespace_acceleration_state,
      protect_directories_one_level_higher: protect_directories_one_level_higher,
      spillover_enabled: spillover_enabled,
      spillover_target: spillover_target,
      ssd_l3_cache_default_enabled: ssd_l3_cache_default_enabled,
      ssd_qab_mirrors: ssd_qab_mirrors,
      ssd_system_btree_mirrors: ssd_system_btree_mirrors,
      ssd_system_delta_mirrors: ssd_system_delta_mirrors,
      virtual_hot_spare_deny_writes: virtual_hot_spare_deny_writes,
      virtual_hot_spare_hide_spare: virtual_hot_spare_hide_spare,
      virtual_hot_spare_limit_drives: virtual_hot_spare_limit_drives,
      virtual_hot_spare_limit_percent: virtual_hot_spare_limit_percent
    }
  }

  pub fn set_automatically_manage_io_optimization(&mut self, automatically_manage_io_optimization: String) {
    self.automatically_manage_io_optimization = automatically_manage_io_optimization;
  }

  pub fn with_automatically_manage_io_optimization(mut self, automatically_manage_io_optimization: String) -> StoragepoolSettingsSettings {
    self.automatically_manage_io_optimization = automatically_manage_io_optimization;
    self
  }

  pub fn automatically_manage_io_optimization(&self) -> &String {
    &self.automatically_manage_io_optimization
  }


  pub fn set_automatically_manage_protection(&mut self, automatically_manage_protection: String) {
    self.automatically_manage_protection = automatically_manage_protection;
  }

  pub fn with_automatically_manage_protection(mut self, automatically_manage_protection: String) -> StoragepoolSettingsSettings {
    self.automatically_manage_protection = automatically_manage_protection;
    self
  }

  pub fn automatically_manage_protection(&self) -> &String {
    &self.automatically_manage_protection
  }


  pub fn set_global_namespace_acceleration_enabled(&mut self, global_namespace_acceleration_enabled: bool) {
    self.global_namespace_acceleration_enabled = global_namespace_acceleration_enabled;
  }

  pub fn with_global_namespace_acceleration_enabled(mut self, global_namespace_acceleration_enabled: bool) -> StoragepoolSettingsSettings {
    self.global_namespace_acceleration_enabled = global_namespace_acceleration_enabled;
    self
  }

  pub fn global_namespace_acceleration_enabled(&self) -> &bool {
    &self.global_namespace_acceleration_enabled
  }


  pub fn set_global_namespace_acceleration_state(&mut self, global_namespace_acceleration_state: String) {
    self.global_namespace_acceleration_state = global_namespace_acceleration_state;
  }

  pub fn with_global_namespace_acceleration_state(mut self, global_namespace_acceleration_state: String) -> StoragepoolSettingsSettings {
    self.global_namespace_acceleration_state = global_namespace_acceleration_state;
    self
  }

  pub fn global_namespace_acceleration_state(&self) -> &String {
    &self.global_namespace_acceleration_state
  }


  pub fn set_protect_directories_one_level_higher(&mut self, protect_directories_one_level_higher: bool) {
    self.protect_directories_one_level_higher = protect_directories_one_level_higher;
  }

  pub fn with_protect_directories_one_level_higher(mut self, protect_directories_one_level_higher: bool) -> StoragepoolSettingsSettings {
    self.protect_directories_one_level_higher = protect_directories_one_level_higher;
    self
  }

  pub fn protect_directories_one_level_higher(&self) -> &bool {
    &self.protect_directories_one_level_higher
  }


  pub fn set_spillover_enabled(&mut self, spillover_enabled: bool) {
    self.spillover_enabled = spillover_enabled;
  }

  pub fn with_spillover_enabled(mut self, spillover_enabled: bool) -> StoragepoolSettingsSettings {
    self.spillover_enabled = spillover_enabled;
    self
  }

  pub fn spillover_enabled(&self) -> &bool {
    &self.spillover_enabled
  }


  pub fn set_spillover_target(&mut self, spillover_target: ::models::StoragepoolSettingsSettingsSpilloverTarget) {
    self.spillover_target = spillover_target;
  }

  pub fn with_spillover_target(mut self, spillover_target: ::models::StoragepoolSettingsSettingsSpilloverTarget) -> StoragepoolSettingsSettings {
    self.spillover_target = spillover_target;
    self
  }

  pub fn spillover_target(&self) -> &::models::StoragepoolSettingsSettingsSpilloverTarget {
    &self.spillover_target
  }


  pub fn set_ssd_l3_cache_default_enabled(&mut self, ssd_l3_cache_default_enabled: bool) {
    self.ssd_l3_cache_default_enabled = ssd_l3_cache_default_enabled;
  }

  pub fn with_ssd_l3_cache_default_enabled(mut self, ssd_l3_cache_default_enabled: bool) -> StoragepoolSettingsSettings {
    self.ssd_l3_cache_default_enabled = ssd_l3_cache_default_enabled;
    self
  }

  pub fn ssd_l3_cache_default_enabled(&self) -> &bool {
    &self.ssd_l3_cache_default_enabled
  }


  pub fn set_ssd_qab_mirrors(&mut self, ssd_qab_mirrors: String) {
    self.ssd_qab_mirrors = ssd_qab_mirrors;
  }

  pub fn with_ssd_qab_mirrors(mut self, ssd_qab_mirrors: String) -> StoragepoolSettingsSettings {
    self.ssd_qab_mirrors = ssd_qab_mirrors;
    self
  }

  pub fn ssd_qab_mirrors(&self) -> &String {
    &self.ssd_qab_mirrors
  }


  pub fn set_ssd_system_btree_mirrors(&mut self, ssd_system_btree_mirrors: String) {
    self.ssd_system_btree_mirrors = ssd_system_btree_mirrors;
  }

  pub fn with_ssd_system_btree_mirrors(mut self, ssd_system_btree_mirrors: String) -> StoragepoolSettingsSettings {
    self.ssd_system_btree_mirrors = ssd_system_btree_mirrors;
    self
  }

  pub fn ssd_system_btree_mirrors(&self) -> &String {
    &self.ssd_system_btree_mirrors
  }


  pub fn set_ssd_system_delta_mirrors(&mut self, ssd_system_delta_mirrors: String) {
    self.ssd_system_delta_mirrors = ssd_system_delta_mirrors;
  }

  pub fn with_ssd_system_delta_mirrors(mut self, ssd_system_delta_mirrors: String) -> StoragepoolSettingsSettings {
    self.ssd_system_delta_mirrors = ssd_system_delta_mirrors;
    self
  }

  pub fn ssd_system_delta_mirrors(&self) -> &String {
    &self.ssd_system_delta_mirrors
  }


  pub fn set_virtual_hot_spare_deny_writes(&mut self, virtual_hot_spare_deny_writes: bool) {
    self.virtual_hot_spare_deny_writes = virtual_hot_spare_deny_writes;
  }

  pub fn with_virtual_hot_spare_deny_writes(mut self, virtual_hot_spare_deny_writes: bool) -> StoragepoolSettingsSettings {
    self.virtual_hot_spare_deny_writes = virtual_hot_spare_deny_writes;
    self
  }

  pub fn virtual_hot_spare_deny_writes(&self) -> &bool {
    &self.virtual_hot_spare_deny_writes
  }


  pub fn set_virtual_hot_spare_hide_spare(&mut self, virtual_hot_spare_hide_spare: bool) {
    self.virtual_hot_spare_hide_spare = virtual_hot_spare_hide_spare;
  }

  pub fn with_virtual_hot_spare_hide_spare(mut self, virtual_hot_spare_hide_spare: bool) -> StoragepoolSettingsSettings {
    self.virtual_hot_spare_hide_spare = virtual_hot_spare_hide_spare;
    self
  }

  pub fn virtual_hot_spare_hide_spare(&self) -> &bool {
    &self.virtual_hot_spare_hide_spare
  }


  pub fn set_virtual_hot_spare_limit_drives(&mut self, virtual_hot_spare_limit_drives: i32) {
    self.virtual_hot_spare_limit_drives = virtual_hot_spare_limit_drives;
  }

  pub fn with_virtual_hot_spare_limit_drives(mut self, virtual_hot_spare_limit_drives: i32) -> StoragepoolSettingsSettings {
    self.virtual_hot_spare_limit_drives = virtual_hot_spare_limit_drives;
    self
  }

  pub fn virtual_hot_spare_limit_drives(&self) -> &i32 {
    &self.virtual_hot_spare_limit_drives
  }


  pub fn set_virtual_hot_spare_limit_percent(&mut self, virtual_hot_spare_limit_percent: i32) {
    self.virtual_hot_spare_limit_percent = virtual_hot_spare_limit_percent;
  }

  pub fn with_virtual_hot_spare_limit_percent(mut self, virtual_hot_spare_limit_percent: i32) -> StoragepoolSettingsSettings {
    self.virtual_hot_spare_limit_percent = virtual_hot_spare_limit_percent;
    self
  }

  pub fn virtual_hot_spare_limit_percent(&self) -> &i32 {
    &self.virtual_hot_spare_limit_percent
  }


}



