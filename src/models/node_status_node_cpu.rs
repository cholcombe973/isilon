/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStatusNodeCpu {
  /// Manufacturer model description of this CPU.
  #[serde(rename = "model")]
  model: Option<String>,
  /// CPU overtemp state.
  #[serde(rename = "overtemp")]
  overtemp: Option<String>,
  /// Type of processor and core of this CPU.
  #[serde(rename = "proc")]
  _proc: Option<String>,
  /// CPU throttling (expressed as a percentage).
  #[serde(rename = "speed_limit")]
  speed_limit: Option<String>
}

impl NodeStatusNodeCpu {
  pub fn new() -> NodeStatusNodeCpu {
    NodeStatusNodeCpu {
      model: None,
      overtemp: None,
      _proc: None,
      speed_limit: None
    }
  }

  pub fn set_model(&mut self, model: String) {
    self.model = Some(model);
  }

  pub fn with_model(mut self, model: String) -> NodeStatusNodeCpu {
    self.model = Some(model);
    self
  }

  pub fn model(&self) -> Option<&String> {
    self.model.as_ref()
  }

  pub fn reset_model(&mut self) {
    self.model = None;
  }

  pub fn set_overtemp(&mut self, overtemp: String) {
    self.overtemp = Some(overtemp);
  }

  pub fn with_overtemp(mut self, overtemp: String) -> NodeStatusNodeCpu {
    self.overtemp = Some(overtemp);
    self
  }

  pub fn overtemp(&self) -> Option<&String> {
    self.overtemp.as_ref()
  }

  pub fn reset_overtemp(&mut self) {
    self.overtemp = None;
  }

  pub fn set__proc(&mut self, _proc: String) {
    self._proc = Some(_proc);
  }

  pub fn with__proc(mut self, _proc: String) -> NodeStatusNodeCpu {
    self._proc = Some(_proc);
    self
  }

  pub fn _proc(&self) -> Option<&String> {
    self._proc.as_ref()
  }

  pub fn reset__proc(&mut self) {
    self._proc = None;
  }

  pub fn set_speed_limit(&mut self, speed_limit: String) {
    self.speed_limit = Some(speed_limit);
  }

  pub fn with_speed_limit(mut self, speed_limit: String) -> NodeStatusNodeCpu {
    self.speed_limit = Some(speed_limit);
    self
  }

  pub fn speed_limit(&self) -> Option<&String> {
    self.speed_limit.as_ref()
  }

  pub fn reset_speed_limit(&mut self) {
    self.speed_limit = None;
  }

}



