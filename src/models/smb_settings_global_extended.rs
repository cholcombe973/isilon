/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SmbSettingsGlobalExtended {
  /// Only enumerate files and folders the requesting user has access to.
  #[serde(rename = "access_based_share_enum")]
  access_based_share_enum: Option<bool>,
  /// Specify level of file share audit events to log.
  #[serde(rename = "audit_fileshare")]
  audit_fileshare: Option<String>,
  /// Specifies a list of permissions to audit.
  #[serde(rename = "audit_global_sacl")]
  audit_global_sacl: Option<Vec<::models::SmbSettingsGlobalSettingsAuditGlobalSaclItem>>,
  /// Specify the level of logon audit events to log.
  #[serde(rename = "audit_logon")]
  audit_logon: Option<String>,
  /// Allow access to .snapshot directories in share subdirectories.
  #[serde(rename = "dot_snap_accessible_child")]
  dot_snap_accessible_child: Option<bool>,
  /// Allow access to the .snapshot directory in the root of the share.
  #[serde(rename = "dot_snap_accessible_root")]
  dot_snap_accessible_root: Option<bool>,
  /// Show .snapshot directories in share subdirectories.
  #[serde(rename = "dot_snap_visible_child")]
  dot_snap_visible_child: Option<bool>,
  /// Show the .snapshot directory in the root of a share.
  #[serde(rename = "dot_snap_visible_root")]
  dot_snap_visible_root: Option<bool>,
  /// Indicates whether the server supports signed SMB packets.
  #[serde(rename = "enable_security_signatures")]
  enable_security_signatures: Option<bool>,
  /// Specifies the fully-qualified user to use for guest access.
  #[serde(rename = "guest_user")]
  guest_user: Option<String>,
  /// Specify whether to ignore EAs on files.
  #[serde(rename = "ignore_eas")]
  ignore_eas: Option<bool>,
  /// Specify the number of OneFS driver worker threads per CPU.
  #[serde(rename = "onefs_cpu_multiplier")]
  onefs_cpu_multiplier: Option<i32>,
  /// Set the maximum number of OneFS driver worker threads.
  #[serde(rename = "onefs_num_workers")]
  onefs_num_workers: Option<i32>,
  /// Indicates whether the server requires signed SMB packets.
  #[serde(rename = "require_security_signatures")]
  require_security_signatures: Option<bool>,
  /// Enable Server Side Copy.
  #[serde(rename = "server_side_copy")]
  server_side_copy: Option<bool>,
  /// Provides a description of the server.
  #[serde(rename = "server_string")]
  server_string: Option<String>,
  /// Specify whether service is enabled.
  #[serde(rename = "service")]
  service: Option<bool>,
  /// Specify the number of SRV service worker threads per CPU.
  #[serde(rename = "srv_cpu_multiplier")]
  srv_cpu_multiplier: Option<i32>,
  /// Set the maximum number of SRV service worker threads.
  #[serde(rename = "srv_num_workers")]
  srv_num_workers: Option<i32>,
  /// Support multichannel.
  #[serde(rename = "support_multichannel")]
  support_multichannel: Option<bool>,
  /// Support NetBIOS.
  #[serde(rename = "support_netbios")]
  support_netbios: Option<bool>,
  /// Support the SMB2 protocol on the server.
  #[serde(rename = "support_smb2")]
  support_smb2: Option<bool>
}

impl SmbSettingsGlobalExtended {
  pub fn new() -> SmbSettingsGlobalExtended {
    SmbSettingsGlobalExtended {
      access_based_share_enum: None,
      audit_fileshare: None,
      audit_global_sacl: None,
      audit_logon: None,
      dot_snap_accessible_child: None,
      dot_snap_accessible_root: None,
      dot_snap_visible_child: None,
      dot_snap_visible_root: None,
      enable_security_signatures: None,
      guest_user: None,
      ignore_eas: None,
      onefs_cpu_multiplier: None,
      onefs_num_workers: None,
      require_security_signatures: None,
      server_side_copy: None,
      server_string: None,
      service: None,
      srv_cpu_multiplier: None,
      srv_num_workers: None,
      support_multichannel: None,
      support_netbios: None,
      support_smb2: None
    }
  }

  pub fn set_access_based_share_enum(&mut self, access_based_share_enum: bool) {
    self.access_based_share_enum = Some(access_based_share_enum);
  }

  pub fn with_access_based_share_enum(mut self, access_based_share_enum: bool) -> SmbSettingsGlobalExtended {
    self.access_based_share_enum = Some(access_based_share_enum);
    self
  }

  pub fn access_based_share_enum(&self) -> Option<&bool> {
    self.access_based_share_enum.as_ref()
  }

  pub fn reset_access_based_share_enum(&mut self) {
    self.access_based_share_enum = None;
  }

  pub fn set_audit_fileshare(&mut self, audit_fileshare: String) {
    self.audit_fileshare = Some(audit_fileshare);
  }

  pub fn with_audit_fileshare(mut self, audit_fileshare: String) -> SmbSettingsGlobalExtended {
    self.audit_fileshare = Some(audit_fileshare);
    self
  }

  pub fn audit_fileshare(&self) -> Option<&String> {
    self.audit_fileshare.as_ref()
  }

  pub fn reset_audit_fileshare(&mut self) {
    self.audit_fileshare = None;
  }

  pub fn set_audit_global_sacl(&mut self, audit_global_sacl: Vec<::models::SmbSettingsGlobalSettingsAuditGlobalSaclItem>) {
    self.audit_global_sacl = Some(audit_global_sacl);
  }

  pub fn with_audit_global_sacl(mut self, audit_global_sacl: Vec<::models::SmbSettingsGlobalSettingsAuditGlobalSaclItem>) -> SmbSettingsGlobalExtended {
    self.audit_global_sacl = Some(audit_global_sacl);
    self
  }

  pub fn audit_global_sacl(&self) -> Option<&Vec<::models::SmbSettingsGlobalSettingsAuditGlobalSaclItem>> {
    self.audit_global_sacl.as_ref()
  }

  pub fn reset_audit_global_sacl(&mut self) {
    self.audit_global_sacl = None;
  }

  pub fn set_audit_logon(&mut self, audit_logon: String) {
    self.audit_logon = Some(audit_logon);
  }

  pub fn with_audit_logon(mut self, audit_logon: String) -> SmbSettingsGlobalExtended {
    self.audit_logon = Some(audit_logon);
    self
  }

  pub fn audit_logon(&self) -> Option<&String> {
    self.audit_logon.as_ref()
  }

  pub fn reset_audit_logon(&mut self) {
    self.audit_logon = None;
  }

  pub fn set_dot_snap_accessible_child(&mut self, dot_snap_accessible_child: bool) {
    self.dot_snap_accessible_child = Some(dot_snap_accessible_child);
  }

  pub fn with_dot_snap_accessible_child(mut self, dot_snap_accessible_child: bool) -> SmbSettingsGlobalExtended {
    self.dot_snap_accessible_child = Some(dot_snap_accessible_child);
    self
  }

  pub fn dot_snap_accessible_child(&self) -> Option<&bool> {
    self.dot_snap_accessible_child.as_ref()
  }

  pub fn reset_dot_snap_accessible_child(&mut self) {
    self.dot_snap_accessible_child = None;
  }

  pub fn set_dot_snap_accessible_root(&mut self, dot_snap_accessible_root: bool) {
    self.dot_snap_accessible_root = Some(dot_snap_accessible_root);
  }

  pub fn with_dot_snap_accessible_root(mut self, dot_snap_accessible_root: bool) -> SmbSettingsGlobalExtended {
    self.dot_snap_accessible_root = Some(dot_snap_accessible_root);
    self
  }

  pub fn dot_snap_accessible_root(&self) -> Option<&bool> {
    self.dot_snap_accessible_root.as_ref()
  }

  pub fn reset_dot_snap_accessible_root(&mut self) {
    self.dot_snap_accessible_root = None;
  }

  pub fn set_dot_snap_visible_child(&mut self, dot_snap_visible_child: bool) {
    self.dot_snap_visible_child = Some(dot_snap_visible_child);
  }

  pub fn with_dot_snap_visible_child(mut self, dot_snap_visible_child: bool) -> SmbSettingsGlobalExtended {
    self.dot_snap_visible_child = Some(dot_snap_visible_child);
    self
  }

  pub fn dot_snap_visible_child(&self) -> Option<&bool> {
    self.dot_snap_visible_child.as_ref()
  }

  pub fn reset_dot_snap_visible_child(&mut self) {
    self.dot_snap_visible_child = None;
  }

  pub fn set_dot_snap_visible_root(&mut self, dot_snap_visible_root: bool) {
    self.dot_snap_visible_root = Some(dot_snap_visible_root);
  }

  pub fn with_dot_snap_visible_root(mut self, dot_snap_visible_root: bool) -> SmbSettingsGlobalExtended {
    self.dot_snap_visible_root = Some(dot_snap_visible_root);
    self
  }

  pub fn dot_snap_visible_root(&self) -> Option<&bool> {
    self.dot_snap_visible_root.as_ref()
  }

  pub fn reset_dot_snap_visible_root(&mut self) {
    self.dot_snap_visible_root = None;
  }

  pub fn set_enable_security_signatures(&mut self, enable_security_signatures: bool) {
    self.enable_security_signatures = Some(enable_security_signatures);
  }

  pub fn with_enable_security_signatures(mut self, enable_security_signatures: bool) -> SmbSettingsGlobalExtended {
    self.enable_security_signatures = Some(enable_security_signatures);
    self
  }

  pub fn enable_security_signatures(&self) -> Option<&bool> {
    self.enable_security_signatures.as_ref()
  }

  pub fn reset_enable_security_signatures(&mut self) {
    self.enable_security_signatures = None;
  }

  pub fn set_guest_user(&mut self, guest_user: String) {
    self.guest_user = Some(guest_user);
  }

  pub fn with_guest_user(mut self, guest_user: String) -> SmbSettingsGlobalExtended {
    self.guest_user = Some(guest_user);
    self
  }

  pub fn guest_user(&self) -> Option<&String> {
    self.guest_user.as_ref()
  }

  pub fn reset_guest_user(&mut self) {
    self.guest_user = None;
  }

  pub fn set_ignore_eas(&mut self, ignore_eas: bool) {
    self.ignore_eas = Some(ignore_eas);
  }

  pub fn with_ignore_eas(mut self, ignore_eas: bool) -> SmbSettingsGlobalExtended {
    self.ignore_eas = Some(ignore_eas);
    self
  }

  pub fn ignore_eas(&self) -> Option<&bool> {
    self.ignore_eas.as_ref()
  }

  pub fn reset_ignore_eas(&mut self) {
    self.ignore_eas = None;
  }

  pub fn set_onefs_cpu_multiplier(&mut self, onefs_cpu_multiplier: i32) {
    self.onefs_cpu_multiplier = Some(onefs_cpu_multiplier);
  }

  pub fn with_onefs_cpu_multiplier(mut self, onefs_cpu_multiplier: i32) -> SmbSettingsGlobalExtended {
    self.onefs_cpu_multiplier = Some(onefs_cpu_multiplier);
    self
  }

  pub fn onefs_cpu_multiplier(&self) -> Option<&i32> {
    self.onefs_cpu_multiplier.as_ref()
  }

  pub fn reset_onefs_cpu_multiplier(&mut self) {
    self.onefs_cpu_multiplier = None;
  }

  pub fn set_onefs_num_workers(&mut self, onefs_num_workers: i32) {
    self.onefs_num_workers = Some(onefs_num_workers);
  }

  pub fn with_onefs_num_workers(mut self, onefs_num_workers: i32) -> SmbSettingsGlobalExtended {
    self.onefs_num_workers = Some(onefs_num_workers);
    self
  }

  pub fn onefs_num_workers(&self) -> Option<&i32> {
    self.onefs_num_workers.as_ref()
  }

  pub fn reset_onefs_num_workers(&mut self) {
    self.onefs_num_workers = None;
  }

  pub fn set_require_security_signatures(&mut self, require_security_signatures: bool) {
    self.require_security_signatures = Some(require_security_signatures);
  }

  pub fn with_require_security_signatures(mut self, require_security_signatures: bool) -> SmbSettingsGlobalExtended {
    self.require_security_signatures = Some(require_security_signatures);
    self
  }

  pub fn require_security_signatures(&self) -> Option<&bool> {
    self.require_security_signatures.as_ref()
  }

  pub fn reset_require_security_signatures(&mut self) {
    self.require_security_signatures = None;
  }

  pub fn set_server_side_copy(&mut self, server_side_copy: bool) {
    self.server_side_copy = Some(server_side_copy);
  }

  pub fn with_server_side_copy(mut self, server_side_copy: bool) -> SmbSettingsGlobalExtended {
    self.server_side_copy = Some(server_side_copy);
    self
  }

  pub fn server_side_copy(&self) -> Option<&bool> {
    self.server_side_copy.as_ref()
  }

  pub fn reset_server_side_copy(&mut self) {
    self.server_side_copy = None;
  }

  pub fn set_server_string(&mut self, server_string: String) {
    self.server_string = Some(server_string);
  }

  pub fn with_server_string(mut self, server_string: String) -> SmbSettingsGlobalExtended {
    self.server_string = Some(server_string);
    self
  }

  pub fn server_string(&self) -> Option<&String> {
    self.server_string.as_ref()
  }

  pub fn reset_server_string(&mut self) {
    self.server_string = None;
  }

  pub fn set_service(&mut self, service: bool) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: bool) -> SmbSettingsGlobalExtended {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&bool> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

  pub fn set_srv_cpu_multiplier(&mut self, srv_cpu_multiplier: i32) {
    self.srv_cpu_multiplier = Some(srv_cpu_multiplier);
  }

  pub fn with_srv_cpu_multiplier(mut self, srv_cpu_multiplier: i32) -> SmbSettingsGlobalExtended {
    self.srv_cpu_multiplier = Some(srv_cpu_multiplier);
    self
  }

  pub fn srv_cpu_multiplier(&self) -> Option<&i32> {
    self.srv_cpu_multiplier.as_ref()
  }

  pub fn reset_srv_cpu_multiplier(&mut self) {
    self.srv_cpu_multiplier = None;
  }

  pub fn set_srv_num_workers(&mut self, srv_num_workers: i32) {
    self.srv_num_workers = Some(srv_num_workers);
  }

  pub fn with_srv_num_workers(mut self, srv_num_workers: i32) -> SmbSettingsGlobalExtended {
    self.srv_num_workers = Some(srv_num_workers);
    self
  }

  pub fn srv_num_workers(&self) -> Option<&i32> {
    self.srv_num_workers.as_ref()
  }

  pub fn reset_srv_num_workers(&mut self) {
    self.srv_num_workers = None;
  }

  pub fn set_support_multichannel(&mut self, support_multichannel: bool) {
    self.support_multichannel = Some(support_multichannel);
  }

  pub fn with_support_multichannel(mut self, support_multichannel: bool) -> SmbSettingsGlobalExtended {
    self.support_multichannel = Some(support_multichannel);
    self
  }

  pub fn support_multichannel(&self) -> Option<&bool> {
    self.support_multichannel.as_ref()
  }

  pub fn reset_support_multichannel(&mut self) {
    self.support_multichannel = None;
  }

  pub fn set_support_netbios(&mut self, support_netbios: bool) {
    self.support_netbios = Some(support_netbios);
  }

  pub fn with_support_netbios(mut self, support_netbios: bool) -> SmbSettingsGlobalExtended {
    self.support_netbios = Some(support_netbios);
    self
  }

  pub fn support_netbios(&self) -> Option<&bool> {
    self.support_netbios.as_ref()
  }

  pub fn reset_support_netbios(&mut self) {
    self.support_netbios = None;
  }

  pub fn set_support_smb2(&mut self, support_smb2: bool) {
    self.support_smb2 = Some(support_smb2);
  }

  pub fn with_support_smb2(mut self, support_smb2: bool) -> SmbSettingsGlobalExtended {
    self.support_smb2 = Some(support_smb2);
    self
  }

  pub fn support_smb2(&self) -> Option<&bool> {
    self.support_smb2.as_ref()
  }

  pub fn reset_support_smb2(&mut self) {
    self.support_smb2 = None;
  }

}



