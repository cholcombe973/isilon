/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateSnapshotChangelistResponse {
  /// The ID of the job which created the changelist.
  #[serde(rename = "job_id")]
  job_id: i32,
  /// Number of LIN entries in changelist.
  #[serde(rename = "num_entries")]
  num_entries: Option<i32>,
  /// Root path of all LINs in changelist.
  #[serde(rename = "root_path")]
  root_path: String,
  /// The lower snapid used to compute the changelist.
  #[serde(rename = "snap1")]
  snap1: i32,
  /// The higher snapid used to compute the changelist.
  #[serde(rename = "snap2")]
  snap2: i32,
  /// Status of changelist.
  #[serde(rename = "status")]
  status: String
}

impl CreateSnapshotChangelistResponse {
  pub fn new(job_id: i32, root_path: String, snap1: i32, snap2: i32, status: String) -> CreateSnapshotChangelistResponse {
    CreateSnapshotChangelistResponse {
      job_id: job_id,
      num_entries: None,
      root_path: root_path,
      snap1: snap1,
      snap2: snap2,
      status: status
    }
  }

  pub fn set_job_id(&mut self, job_id: i32) {
    self.job_id = job_id;
  }

  pub fn with_job_id(mut self, job_id: i32) -> CreateSnapshotChangelistResponse {
    self.job_id = job_id;
    self
  }

  pub fn job_id(&self) -> &i32 {
    &self.job_id
  }


  pub fn set_num_entries(&mut self, num_entries: i32) {
    self.num_entries = Some(num_entries);
  }

  pub fn with_num_entries(mut self, num_entries: i32) -> CreateSnapshotChangelistResponse {
    self.num_entries = Some(num_entries);
    self
  }

  pub fn num_entries(&self) -> Option<&i32> {
    self.num_entries.as_ref()
  }

  pub fn reset_num_entries(&mut self) {
    self.num_entries = None;
  }

  pub fn set_root_path(&mut self, root_path: String) {
    self.root_path = root_path;
  }

  pub fn with_root_path(mut self, root_path: String) -> CreateSnapshotChangelistResponse {
    self.root_path = root_path;
    self
  }

  pub fn root_path(&self) -> &String {
    &self.root_path
  }


  pub fn set_snap1(&mut self, snap1: i32) {
    self.snap1 = snap1;
  }

  pub fn with_snap1(mut self, snap1: i32) -> CreateSnapshotChangelistResponse {
    self.snap1 = snap1;
    self
  }

  pub fn snap1(&self) -> &i32 {
    &self.snap1
  }


  pub fn set_snap2(&mut self, snap2: i32) {
    self.snap2 = snap2;
  }

  pub fn with_snap2(mut self, snap2: i32) -> CreateSnapshotChangelistResponse {
    self.snap2 = snap2;
    self
  }

  pub fn snap2(&self) -> &i32 {
    &self.snap2
  }


  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> CreateSnapshotChangelistResponse {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


}



