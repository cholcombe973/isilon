/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StoragepoolStatus {
  /// Disk pools which are currently unhealthy.
  #[serde(rename = "unhealthy")]
  unhealthy: Vec<::models::StoragepoolStatusUnhealthyItem>,
  /// Drives which are not currently provisioned into a disk pool.
  #[serde(rename = "unprovisioned")]
  unprovisioned: Vec<::models::StoragepoolStatusUnprovisionedItem>
}

impl StoragepoolStatus {
  pub fn new(unhealthy: Vec<::models::StoragepoolStatusUnhealthyItem>, unprovisioned: Vec<::models::StoragepoolStatusUnprovisionedItem>) -> StoragepoolStatus {
    StoragepoolStatus {
      unhealthy: unhealthy,
      unprovisioned: unprovisioned
    }
  }

  pub fn set_unhealthy(&mut self, unhealthy: Vec<::models::StoragepoolStatusUnhealthyItem>) {
    self.unhealthy = unhealthy;
  }

  pub fn with_unhealthy(mut self, unhealthy: Vec<::models::StoragepoolStatusUnhealthyItem>) -> StoragepoolStatus {
    self.unhealthy = unhealthy;
    self
  }

  pub fn unhealthy(&self) -> &Vec<::models::StoragepoolStatusUnhealthyItem> {
    &self.unhealthy
  }


  pub fn set_unprovisioned(&mut self, unprovisioned: Vec<::models::StoragepoolStatusUnprovisionedItem>) {
    self.unprovisioned = unprovisioned;
  }

  pub fn with_unprovisioned(mut self, unprovisioned: Vec<::models::StoragepoolStatusUnprovisionedItem>) -> StoragepoolStatus {
    self.unprovisioned = unprovisioned;
    self
  }

  pub fn unprovisioned(&self) -> &Vec<::models::StoragepoolStatusUnprovisionedItem> {
    &self.unprovisioned
  }


}



