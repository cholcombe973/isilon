/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthAccessAccessItemFileFilePermissions {
  /// Returns a status message if the Null ACL is set.
  #[serde(rename = "dacl")]
  dacl: Option<String>,
  /// Returns a status message if the parent directoryhas the delete_child property set for the user.If the delete_child property is set for a user,that user is able to delete the file.the delete_child for the user.
  #[serde(rename = "delete_child")]
  delete_child: Option<String>,
  /// Specifies the Access Control Entry (ACE) for the user.
  #[serde(rename = "expected")]
  expected: Option<String>,
  /// Specifies the mode bits on the file.
  #[serde(rename = "mode")]
  mode: Option<String>,
  /// Returns a status message if the user owns the file.
  #[serde(rename = "ownership")]
  ownership: Option<String>,
  /// Specifies a list of the relevant Access Control Entrieswith respect to the user in the share.
  #[serde(rename = "relevant_aces")]
  relevant_aces: Option<Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>>,
  /// Specifies the mode bits that are related to the user.
  #[serde(rename = "relevant_mode")]
  relevant_mode: Option<String>,
  /// Returns a status message if the user owns the file.
  #[serde(rename = "sticky")]
  sticky: Option<String>
}

impl AuthAccessAccessItemFileFilePermissions {
  pub fn new() -> AuthAccessAccessItemFileFilePermissions {
    AuthAccessAccessItemFileFilePermissions {
      dacl: None,
      delete_child: None,
      expected: None,
      mode: None,
      ownership: None,
      relevant_aces: None,
      relevant_mode: None,
      sticky: None
    }
  }

  pub fn set_dacl(&mut self, dacl: String) {
    self.dacl = Some(dacl);
  }

  pub fn with_dacl(mut self, dacl: String) -> AuthAccessAccessItemFileFilePermissions {
    self.dacl = Some(dacl);
    self
  }

  pub fn dacl(&self) -> Option<&String> {
    self.dacl.as_ref()
  }

  pub fn reset_dacl(&mut self) {
    self.dacl = None;
  }

  pub fn set_delete_child(&mut self, delete_child: String) {
    self.delete_child = Some(delete_child);
  }

  pub fn with_delete_child(mut self, delete_child: String) -> AuthAccessAccessItemFileFilePermissions {
    self.delete_child = Some(delete_child);
    self
  }

  pub fn delete_child(&self) -> Option<&String> {
    self.delete_child.as_ref()
  }

  pub fn reset_delete_child(&mut self) {
    self.delete_child = None;
  }

  pub fn set_expected(&mut self, expected: String) {
    self.expected = Some(expected);
  }

  pub fn with_expected(mut self, expected: String) -> AuthAccessAccessItemFileFilePermissions {
    self.expected = Some(expected);
    self
  }

  pub fn expected(&self) -> Option<&String> {
    self.expected.as_ref()
  }

  pub fn reset_expected(&mut self) {
    self.expected = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: String) -> AuthAccessAccessItemFileFilePermissions {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&String> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_ownership(&mut self, ownership: String) {
    self.ownership = Some(ownership);
  }

  pub fn with_ownership(mut self, ownership: String) -> AuthAccessAccessItemFileFilePermissions {
    self.ownership = Some(ownership);
    self
  }

  pub fn ownership(&self) -> Option<&String> {
    self.ownership.as_ref()
  }

  pub fn reset_ownership(&mut self) {
    self.ownership = None;
  }

  pub fn set_relevant_aces(&mut self, relevant_aces: Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>) {
    self.relevant_aces = Some(relevant_aces);
  }

  pub fn with_relevant_aces(mut self, relevant_aces: Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>) -> AuthAccessAccessItemFileFilePermissions {
    self.relevant_aces = Some(relevant_aces);
    self
  }

  pub fn relevant_aces(&self) -> Option<&Vec<::models::AuthAccessAccessItemShareSharePermissionsShareRelevantAce>> {
    self.relevant_aces.as_ref()
  }

  pub fn reset_relevant_aces(&mut self) {
    self.relevant_aces = None;
  }

  pub fn set_relevant_mode(&mut self, relevant_mode: String) {
    self.relevant_mode = Some(relevant_mode);
  }

  pub fn with_relevant_mode(mut self, relevant_mode: String) -> AuthAccessAccessItemFileFilePermissions {
    self.relevant_mode = Some(relevant_mode);
    self
  }

  pub fn relevant_mode(&self) -> Option<&String> {
    self.relevant_mode.as_ref()
  }

  pub fn reset_relevant_mode(&mut self) {
    self.relevant_mode = None;
  }

  pub fn set_sticky(&mut self, sticky: String) {
    self.sticky = Some(sticky);
  }

  pub fn with_sticky(mut self, sticky: String) -> AuthAccessAccessItemFileFilePermissions {
    self.sticky = Some(sticky);
    self
  }

  pub fn sticky(&self) -> Option<&String> {
    self.sticky.as_ref()
  }

  pub fn reset_sticky(&mut self) {
    self.sticky = None;
  }

}



