/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JobJobCreateParams {
  /// Whether or not to queue the job if one of the same type is already running or queued.
  #[serde(rename = "allow_dup")]
  allow_dup: Option<bool>,
  /// 
  #[serde(rename = "avscan_params")]
  avscan_params: Option<::models::JobJobAvscanParams>,
  /// 
  #[serde(rename = "changelistcreate_params")]
  changelistcreate_params: Option<::models::JobJobChangelistcreateParams>,
  /// 
  #[serde(rename = "domainmark_params")]
  domainmark_params: Option<::models::JobJobDomainmarkParams>,
  /// For jobs which take paths, the IFS paths to pass to the job.
  #[serde(rename = "paths")]
  paths: Option<Vec<String>>,
  /// Impact policy of this job instance.
  #[serde(rename = "policy")]
  policy: Option<String>,
  /// 
  #[serde(rename = "prepair_params")]
  prepair_params: Option<::models::JobJobPrepairParams>,
  /// Priority of this job instance; lower numbers preempt higher numbers.
  #[serde(rename = "priority")]
  priority: Option<i32>,
  /// 
  #[serde(rename = "smartpoolstree_params")]
  smartpoolstree_params: Option<::models::JobJobSmartpoolstreeParams>,
  /// 
  #[serde(rename = "snaprevert_params")]
  snaprevert_params: Option<::models::JobJobSnaprevertParams>,
  /// Job type to queue.
  #[serde(rename = "type")]
  _type: String
}

impl JobJobCreateParams {
  pub fn new(_type: String) -> JobJobCreateParams {
    JobJobCreateParams {
      allow_dup: None,
      avscan_params: None,
      changelistcreate_params: None,
      domainmark_params: None,
      paths: None,
      policy: None,
      prepair_params: None,
      priority: None,
      smartpoolstree_params: None,
      snaprevert_params: None,
      _type: _type
    }
  }

  pub fn set_allow_dup(&mut self, allow_dup: bool) {
    self.allow_dup = Some(allow_dup);
  }

  pub fn with_allow_dup(mut self, allow_dup: bool) -> JobJobCreateParams {
    self.allow_dup = Some(allow_dup);
    self
  }

  pub fn allow_dup(&self) -> Option<&bool> {
    self.allow_dup.as_ref()
  }

  pub fn reset_allow_dup(&mut self) {
    self.allow_dup = None;
  }

  pub fn set_avscan_params(&mut self, avscan_params: ::models::JobJobAvscanParams) {
    self.avscan_params = Some(avscan_params);
  }

  pub fn with_avscan_params(mut self, avscan_params: ::models::JobJobAvscanParams) -> JobJobCreateParams {
    self.avscan_params = Some(avscan_params);
    self
  }

  pub fn avscan_params(&self) -> Option<&::models::JobJobAvscanParams> {
    self.avscan_params.as_ref()
  }

  pub fn reset_avscan_params(&mut self) {
    self.avscan_params = None;
  }

  pub fn set_changelistcreate_params(&mut self, changelistcreate_params: ::models::JobJobChangelistcreateParams) {
    self.changelistcreate_params = Some(changelistcreate_params);
  }

  pub fn with_changelistcreate_params(mut self, changelistcreate_params: ::models::JobJobChangelistcreateParams) -> JobJobCreateParams {
    self.changelistcreate_params = Some(changelistcreate_params);
    self
  }

  pub fn changelistcreate_params(&self) -> Option<&::models::JobJobChangelistcreateParams> {
    self.changelistcreate_params.as_ref()
  }

  pub fn reset_changelistcreate_params(&mut self) {
    self.changelistcreate_params = None;
  }

  pub fn set_domainmark_params(&mut self, domainmark_params: ::models::JobJobDomainmarkParams) {
    self.domainmark_params = Some(domainmark_params);
  }

  pub fn with_domainmark_params(mut self, domainmark_params: ::models::JobJobDomainmarkParams) -> JobJobCreateParams {
    self.domainmark_params = Some(domainmark_params);
    self
  }

  pub fn domainmark_params(&self) -> Option<&::models::JobJobDomainmarkParams> {
    self.domainmark_params.as_ref()
  }

  pub fn reset_domainmark_params(&mut self) {
    self.domainmark_params = None;
  }

  pub fn set_paths(&mut self, paths: Vec<String>) {
    self.paths = Some(paths);
  }

  pub fn with_paths(mut self, paths: Vec<String>) -> JobJobCreateParams {
    self.paths = Some(paths);
    self
  }

  pub fn paths(&self) -> Option<&Vec<String>> {
    self.paths.as_ref()
  }

  pub fn reset_paths(&mut self) {
    self.paths = None;
  }

  pub fn set_policy(&mut self, policy: String) {
    self.policy = Some(policy);
  }

  pub fn with_policy(mut self, policy: String) -> JobJobCreateParams {
    self.policy = Some(policy);
    self
  }

  pub fn policy(&self) -> Option<&String> {
    self.policy.as_ref()
  }

  pub fn reset_policy(&mut self) {
    self.policy = None;
  }

  pub fn set_prepair_params(&mut self, prepair_params: ::models::JobJobPrepairParams) {
    self.prepair_params = Some(prepair_params);
  }

  pub fn with_prepair_params(mut self, prepair_params: ::models::JobJobPrepairParams) -> JobJobCreateParams {
    self.prepair_params = Some(prepair_params);
    self
  }

  pub fn prepair_params(&self) -> Option<&::models::JobJobPrepairParams> {
    self.prepair_params.as_ref()
  }

  pub fn reset_prepair_params(&mut self) {
    self.prepair_params = None;
  }

  pub fn set_priority(&mut self, priority: i32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: i32) -> JobJobCreateParams {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&i32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_smartpoolstree_params(&mut self, smartpoolstree_params: ::models::JobJobSmartpoolstreeParams) {
    self.smartpoolstree_params = Some(smartpoolstree_params);
  }

  pub fn with_smartpoolstree_params(mut self, smartpoolstree_params: ::models::JobJobSmartpoolstreeParams) -> JobJobCreateParams {
    self.smartpoolstree_params = Some(smartpoolstree_params);
    self
  }

  pub fn smartpoolstree_params(&self) -> Option<&::models::JobJobSmartpoolstreeParams> {
    self.smartpoolstree_params.as_ref()
  }

  pub fn reset_smartpoolstree_params(&mut self) {
    self.smartpoolstree_params = None;
  }

  pub fn set_snaprevert_params(&mut self, snaprevert_params: ::models::JobJobSnaprevertParams) {
    self.snaprevert_params = Some(snaprevert_params);
  }

  pub fn with_snaprevert_params(mut self, snaprevert_params: ::models::JobJobSnaprevertParams) -> JobJobCreateParams {
    self.snaprevert_params = Some(snaprevert_params);
    self
  }

  pub fn snaprevert_params(&self) -> Option<&::models::JobJobSnaprevertParams> {
    self.snaprevert_params.as_ref()
  }

  pub fn reset_snaprevert_params(&mut self) {
    self.snaprevert_params = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> JobJobCreateParams {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



