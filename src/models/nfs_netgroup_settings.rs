/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NfsNetgroupSettings {
  /// To-disk backup interval for the netgroup cache.
  #[serde(rename = "bgwrite")]
  bgwrite: Option<i32>,
  /// Time between updates of netgroups in the cache.
  #[serde(rename = "expiration")]
  expiration: Option<i32>,
  /// Length of time an un-accessed netgroup remains in the cache.
  #[serde(rename = "lifetime")]
  lifetime: Option<i32>,
  /// Retry interval for netgroup updates if the remote provider is unresponsive.
  #[serde(rename = "retry")]
  retry: Option<i32>
}

impl NfsNetgroupSettings {
  pub fn new() -> NfsNetgroupSettings {
    NfsNetgroupSettings {
      bgwrite: None,
      expiration: None,
      lifetime: None,
      retry: None
    }
  }

  pub fn set_bgwrite(&mut self, bgwrite: i32) {
    self.bgwrite = Some(bgwrite);
  }

  pub fn with_bgwrite(mut self, bgwrite: i32) -> NfsNetgroupSettings {
    self.bgwrite = Some(bgwrite);
    self
  }

  pub fn bgwrite(&self) -> Option<&i32> {
    self.bgwrite.as_ref()
  }

  pub fn reset_bgwrite(&mut self) {
    self.bgwrite = None;
  }

  pub fn set_expiration(&mut self, expiration: i32) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: i32) -> NfsNetgroupSettings {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&i32> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

  pub fn set_lifetime(&mut self, lifetime: i32) {
    self.lifetime = Some(lifetime);
  }

  pub fn with_lifetime(mut self, lifetime: i32) -> NfsNetgroupSettings {
    self.lifetime = Some(lifetime);
    self
  }

  pub fn lifetime(&self) -> Option<&i32> {
    self.lifetime.as_ref()
  }

  pub fn reset_lifetime(&mut self) {
    self.lifetime = None;
  }

  pub fn set_retry(&mut self, retry: i32) {
    self.retry = Some(retry);
  }

  pub fn with_retry(mut self, retry: i32) -> NfsNetgroupSettings {
    self.retry = Some(retry);
    self
  }

  pub fn retry(&self) -> Option<&i32> {
    self.retry.as_ref()
  }

  pub fn reset_retry(&mut self) {
    self.retry = None;
  }

}



