/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HdfsSettingsSettings {
  /// Ambari metrics collector
  #[serde(rename = "ambari_metrics_collector")]
  ambari_metrics_collector: Option<String>,
  /// NameNode of Ambari server
  #[serde(rename = "ambari_namenode")]
  ambari_namenode: Option<String>,
  /// Ambari server
  #[serde(rename = "ambari_server")]
  ambari_server: Option<String>,
  /// Type of authentication for HDFS protocol.
  #[serde(rename = "authentication_mode")]
  authentication_mode: Option<String>,
  /// Encryption algorithm to use for data transfer (if any)
  #[serde(rename = "data_transfer_cipher")]
  data_transfer_cipher: Option<String>,
  /// Block size (size=2**value) reported by HDFS server.
  #[serde(rename = "default_block_size")]
  default_block_size: Option<i32>,
  /// Checksum type reported by HDFS server.
  #[serde(rename = "default_checksum_type")]
  default_checksum_type: Option<String>,
  /// ODP stack repository version number
  #[serde(rename = "odp_version")]
  odp_version: Option<String>,
  /// HDFS root directory
  #[serde(rename = "root_directory")]
  root_directory: Option<String>,
  /// Enable or disable the HDFS service.
  #[serde(rename = "service")]
  service: Option<bool>,
  /// Enable or disable WebHDFS
  #[serde(rename = "webhdfs_enabled")]
  webhdfs_enabled: Option<bool>
}

impl HdfsSettingsSettings {
  pub fn new() -> HdfsSettingsSettings {
    HdfsSettingsSettings {
      ambari_metrics_collector: None,
      ambari_namenode: None,
      ambari_server: None,
      authentication_mode: None,
      data_transfer_cipher: None,
      default_block_size: None,
      default_checksum_type: None,
      odp_version: None,
      root_directory: None,
      service: None,
      webhdfs_enabled: None
    }
  }

  pub fn set_ambari_metrics_collector(&mut self, ambari_metrics_collector: String) {
    self.ambari_metrics_collector = Some(ambari_metrics_collector);
  }

  pub fn with_ambari_metrics_collector(mut self, ambari_metrics_collector: String) -> HdfsSettingsSettings {
    self.ambari_metrics_collector = Some(ambari_metrics_collector);
    self
  }

  pub fn ambari_metrics_collector(&self) -> Option<&String> {
    self.ambari_metrics_collector.as_ref()
  }

  pub fn reset_ambari_metrics_collector(&mut self) {
    self.ambari_metrics_collector = None;
  }

  pub fn set_ambari_namenode(&mut self, ambari_namenode: String) {
    self.ambari_namenode = Some(ambari_namenode);
  }

  pub fn with_ambari_namenode(mut self, ambari_namenode: String) -> HdfsSettingsSettings {
    self.ambari_namenode = Some(ambari_namenode);
    self
  }

  pub fn ambari_namenode(&self) -> Option<&String> {
    self.ambari_namenode.as_ref()
  }

  pub fn reset_ambari_namenode(&mut self) {
    self.ambari_namenode = None;
  }

  pub fn set_ambari_server(&mut self, ambari_server: String) {
    self.ambari_server = Some(ambari_server);
  }

  pub fn with_ambari_server(mut self, ambari_server: String) -> HdfsSettingsSettings {
    self.ambari_server = Some(ambari_server);
    self
  }

  pub fn ambari_server(&self) -> Option<&String> {
    self.ambari_server.as_ref()
  }

  pub fn reset_ambari_server(&mut self) {
    self.ambari_server = None;
  }

  pub fn set_authentication_mode(&mut self, authentication_mode: String) {
    self.authentication_mode = Some(authentication_mode);
  }

  pub fn with_authentication_mode(mut self, authentication_mode: String) -> HdfsSettingsSettings {
    self.authentication_mode = Some(authentication_mode);
    self
  }

  pub fn authentication_mode(&self) -> Option<&String> {
    self.authentication_mode.as_ref()
  }

  pub fn reset_authentication_mode(&mut self) {
    self.authentication_mode = None;
  }

  pub fn set_data_transfer_cipher(&mut self, data_transfer_cipher: String) {
    self.data_transfer_cipher = Some(data_transfer_cipher);
  }

  pub fn with_data_transfer_cipher(mut self, data_transfer_cipher: String) -> HdfsSettingsSettings {
    self.data_transfer_cipher = Some(data_transfer_cipher);
    self
  }

  pub fn data_transfer_cipher(&self) -> Option<&String> {
    self.data_transfer_cipher.as_ref()
  }

  pub fn reset_data_transfer_cipher(&mut self) {
    self.data_transfer_cipher = None;
  }

  pub fn set_default_block_size(&mut self, default_block_size: i32) {
    self.default_block_size = Some(default_block_size);
  }

  pub fn with_default_block_size(mut self, default_block_size: i32) -> HdfsSettingsSettings {
    self.default_block_size = Some(default_block_size);
    self
  }

  pub fn default_block_size(&self) -> Option<&i32> {
    self.default_block_size.as_ref()
  }

  pub fn reset_default_block_size(&mut self) {
    self.default_block_size = None;
  }

  pub fn set_default_checksum_type(&mut self, default_checksum_type: String) {
    self.default_checksum_type = Some(default_checksum_type);
  }

  pub fn with_default_checksum_type(mut self, default_checksum_type: String) -> HdfsSettingsSettings {
    self.default_checksum_type = Some(default_checksum_type);
    self
  }

  pub fn default_checksum_type(&self) -> Option<&String> {
    self.default_checksum_type.as_ref()
  }

  pub fn reset_default_checksum_type(&mut self) {
    self.default_checksum_type = None;
  }

  pub fn set_odp_version(&mut self, odp_version: String) {
    self.odp_version = Some(odp_version);
  }

  pub fn with_odp_version(mut self, odp_version: String) -> HdfsSettingsSettings {
    self.odp_version = Some(odp_version);
    self
  }

  pub fn odp_version(&self) -> Option<&String> {
    self.odp_version.as_ref()
  }

  pub fn reset_odp_version(&mut self) {
    self.odp_version = None;
  }

  pub fn set_root_directory(&mut self, root_directory: String) {
    self.root_directory = Some(root_directory);
  }

  pub fn with_root_directory(mut self, root_directory: String) -> HdfsSettingsSettings {
    self.root_directory = Some(root_directory);
    self
  }

  pub fn root_directory(&self) -> Option<&String> {
    self.root_directory.as_ref()
  }

  pub fn reset_root_directory(&mut self) {
    self.root_directory = None;
  }

  pub fn set_service(&mut self, service: bool) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: bool) -> HdfsSettingsSettings {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&bool> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

  pub fn set_webhdfs_enabled(&mut self, webhdfs_enabled: bool) {
    self.webhdfs_enabled = Some(webhdfs_enabled);
  }

  pub fn with_webhdfs_enabled(mut self, webhdfs_enabled: bool) -> HdfsSettingsSettings {
    self.webhdfs_enabled = Some(webhdfs_enabled);
    self
  }

  pub fn webhdfs_enabled(&self) -> Option<&bool> {
    self.webhdfs_enabled.as_ref()
  }

  pub fn reset_webhdfs_enabled(&mut self) {
    self.webhdfs_enabled = None;
  }

}



