/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterPatchPatchesPatch {
  /// A long comment about the patch.
  #[serde(rename = "comment")]
  comment: Option<String>,
  /// Other patches that this patch conflicts with.
  #[serde(rename = "conflicts")]
  conflicts: Option<Vec<String>>,
  /// Other patches that this patch depends on.
  #[serde(rename = "dependencies")]
  dependencies: Option<Vec<String>>,
  /// A short description of the patch.
  #[serde(rename = "description")]
  description: Option<String>,
  /// The files contained in this patch.
  #[serde(rename = "files")]
  files: Option<Vec<::models::ClusterPatchPatchesPatchFile>>,
  /// A unique identifier for the patch.
  #[serde(rename = "id")]
  id: Option<String>,
  /// The name of the patch.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The nodes that this patch is installed on.
  #[serde(rename = "nodes")]
  nodes: Option<Vec<i32>>,
  /// Describes the reboot requirements
  #[serde(rename = "reboot")]
  reboot: Option<String>,
  /// The services affected during the patch deployment
  #[serde(rename = "services")]
  services: Option<Vec<::models::ClusterPatchPatchesPatchService>>,
  /// The intallation status of this patch on the cluster.
  #[serde(rename = "status")]
  status: Option<String>
}

impl ClusterPatchPatchesPatch {
  pub fn new() -> ClusterPatchPatchesPatch {
    ClusterPatchPatchesPatch {
      comment: None,
      conflicts: None,
      dependencies: None,
      description: None,
      files: None,
      id: None,
      name: None,
      nodes: None,
      reboot: None,
      services: None,
      status: None
    }
  }

  pub fn set_comment(&mut self, comment: String) {
    self.comment = Some(comment);
  }

  pub fn with_comment(mut self, comment: String) -> ClusterPatchPatchesPatch {
    self.comment = Some(comment);
    self
  }

  pub fn comment(&self) -> Option<&String> {
    self.comment.as_ref()
  }

  pub fn reset_comment(&mut self) {
    self.comment = None;
  }

  pub fn set_conflicts(&mut self, conflicts: Vec<String>) {
    self.conflicts = Some(conflicts);
  }

  pub fn with_conflicts(mut self, conflicts: Vec<String>) -> ClusterPatchPatchesPatch {
    self.conflicts = Some(conflicts);
    self
  }

  pub fn conflicts(&self) -> Option<&Vec<String>> {
    self.conflicts.as_ref()
  }

  pub fn reset_conflicts(&mut self) {
    self.conflicts = None;
  }

  pub fn set_dependencies(&mut self, dependencies: Vec<String>) {
    self.dependencies = Some(dependencies);
  }

  pub fn with_dependencies(mut self, dependencies: Vec<String>) -> ClusterPatchPatchesPatch {
    self.dependencies = Some(dependencies);
    self
  }

  pub fn dependencies(&self) -> Option<&Vec<String>> {
    self.dependencies.as_ref()
  }

  pub fn reset_dependencies(&mut self) {
    self.dependencies = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ClusterPatchPatchesPatch {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_files(&mut self, files: Vec<::models::ClusterPatchPatchesPatchFile>) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: Vec<::models::ClusterPatchPatchesPatchFile>) -> ClusterPatchPatchesPatch {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&Vec<::models::ClusterPatchPatchesPatchFile>> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ClusterPatchPatchesPatch {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ClusterPatchPatchesPatch {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_nodes(&mut self, nodes: Vec<i32>) {
    self.nodes = Some(nodes);
  }

  pub fn with_nodes(mut self, nodes: Vec<i32>) -> ClusterPatchPatchesPatch {
    self.nodes = Some(nodes);
    self
  }

  pub fn nodes(&self) -> Option<&Vec<i32>> {
    self.nodes.as_ref()
  }

  pub fn reset_nodes(&mut self) {
    self.nodes = None;
  }

  pub fn set_reboot(&mut self, reboot: String) {
    self.reboot = Some(reboot);
  }

  pub fn with_reboot(mut self, reboot: String) -> ClusterPatchPatchesPatch {
    self.reboot = Some(reboot);
    self
  }

  pub fn reboot(&self) -> Option<&String> {
    self.reboot.as_ref()
  }

  pub fn reset_reboot(&mut self) {
    self.reboot = None;
  }

  pub fn set_services(&mut self, services: Vec<::models::ClusterPatchPatchesPatchService>) {
    self.services = Some(services);
  }

  pub fn with_services(mut self, services: Vec<::models::ClusterPatchPatchesPatchService>) -> ClusterPatchPatchesPatch {
    self.services = Some(services);
    self
  }

  pub fn services(&self) -> Option<&Vec<::models::ClusterPatchPatchesPatchService>> {
    self.services.as_ref()
  }

  pub fn reset_services(&mut self) {
    self.services = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> ClusterPatchPatchesPatch {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

}



