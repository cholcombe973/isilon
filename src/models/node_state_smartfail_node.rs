/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStateSmartfailNode {
  /// This node is dead (dead_devs).
  #[serde(rename = "dead")]
  dead: Option<bool>,
  /// This node is down (down_devs).
  #[serde(rename = "down")]
  down: Option<bool>,
  /// Error message, if the HTTP status returned from this node was not 200.
  #[serde(rename = "error")]
  error: Option<String>,
  /// Node ID of the node reporting this information.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// This node is in the cluster (all_devs).
  #[serde(rename = "in_cluster")]
  in_cluster: Option<bool>,
  /// Logical node number of the node reporting this information.
  #[serde(rename = "lnn")]
  lnn: Option<i32>,
  /// This node is readonly (ro_devs).
  #[serde(rename = "readonly")]
  readonly: Option<bool>,
  /// This node is shutdown readonly (down_devs).
  #[serde(rename = "shutdown_readonly")]
  shutdown_readonly: Option<bool>,
  /// This node is smartfailed (soft_devs).
  #[serde(rename = "smartfailed")]
  smartfailed: Option<bool>,
  /// Status of the HTTP response from this node if not 200.  If 200, this field does not appear.
  #[serde(rename = "status")]
  status: Option<i32>
}

impl NodeStateSmartfailNode {
  pub fn new() -> NodeStateSmartfailNode {
    NodeStateSmartfailNode {
      dead: None,
      down: None,
      error: None,
      id: None,
      in_cluster: None,
      lnn: None,
      readonly: None,
      shutdown_readonly: None,
      smartfailed: None,
      status: None
    }
  }

  pub fn set_dead(&mut self, dead: bool) {
    self.dead = Some(dead);
  }

  pub fn with_dead(mut self, dead: bool) -> NodeStateSmartfailNode {
    self.dead = Some(dead);
    self
  }

  pub fn dead(&self) -> Option<&bool> {
    self.dead.as_ref()
  }

  pub fn reset_dead(&mut self) {
    self.dead = None;
  }

  pub fn set_down(&mut self, down: bool) {
    self.down = Some(down);
  }

  pub fn with_down(mut self, down: bool) -> NodeStateSmartfailNode {
    self.down = Some(down);
    self
  }

  pub fn down(&self) -> Option<&bool> {
    self.down.as_ref()
  }

  pub fn reset_down(&mut self) {
    self.down = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> NodeStateSmartfailNode {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> NodeStateSmartfailNode {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_in_cluster(&mut self, in_cluster: bool) {
    self.in_cluster = Some(in_cluster);
  }

  pub fn with_in_cluster(mut self, in_cluster: bool) -> NodeStateSmartfailNode {
    self.in_cluster = Some(in_cluster);
    self
  }

  pub fn in_cluster(&self) -> Option<&bool> {
    self.in_cluster.as_ref()
  }

  pub fn reset_in_cluster(&mut self) {
    self.in_cluster = None;
  }

  pub fn set_lnn(&mut self, lnn: i32) {
    self.lnn = Some(lnn);
  }

  pub fn with_lnn(mut self, lnn: i32) -> NodeStateSmartfailNode {
    self.lnn = Some(lnn);
    self
  }

  pub fn lnn(&self) -> Option<&i32> {
    self.lnn.as_ref()
  }

  pub fn reset_lnn(&mut self) {
    self.lnn = None;
  }

  pub fn set_readonly(&mut self, readonly: bool) {
    self.readonly = Some(readonly);
  }

  pub fn with_readonly(mut self, readonly: bool) -> NodeStateSmartfailNode {
    self.readonly = Some(readonly);
    self
  }

  pub fn readonly(&self) -> Option<&bool> {
    self.readonly.as_ref()
  }

  pub fn reset_readonly(&mut self) {
    self.readonly = None;
  }

  pub fn set_shutdown_readonly(&mut self, shutdown_readonly: bool) {
    self.shutdown_readonly = Some(shutdown_readonly);
  }

  pub fn with_shutdown_readonly(mut self, shutdown_readonly: bool) -> NodeStateSmartfailNode {
    self.shutdown_readonly = Some(shutdown_readonly);
    self
  }

  pub fn shutdown_readonly(&self) -> Option<&bool> {
    self.shutdown_readonly.as_ref()
  }

  pub fn reset_shutdown_readonly(&mut self) {
    self.shutdown_readonly = None;
  }

  pub fn set_smartfailed(&mut self, smartfailed: bool) {
    self.smartfailed = Some(smartfailed);
  }

  pub fn with_smartfailed(mut self, smartfailed: bool) -> NodeStateSmartfailNode {
    self.smartfailed = Some(smartfailed);
    self
  }

  pub fn smartfailed(&self) -> Option<&bool> {
    self.smartfailed.as_ref()
  }

  pub fn reset_smartfailed(&mut self) {
    self.smartfailed = None;
  }

  pub fn set_status(&mut self, status: i32) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: i32) -> NodeStateSmartfailNode {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&i32> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

}



