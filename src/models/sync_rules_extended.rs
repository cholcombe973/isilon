/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SyncRulesExtended {
  /// Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
  #[serde(rename = "resume")]
  resume: Option<String>,
  #[serde(rename = "rules")]
  rules: Vec<::models::SyncRuleExtendedExtended>,
  /// Total number of items available.
  #[serde(rename = "total")]
  total: i32
}

impl SyncRulesExtended {
  pub fn new(rules: Vec<::models::SyncRuleExtendedExtended>, total: i32) -> SyncRulesExtended {
    SyncRulesExtended {
      resume: None,
      rules: rules,
      total: total
    }
  }

  pub fn set_resume(&mut self, resume: String) {
    self.resume = Some(resume);
  }

  pub fn with_resume(mut self, resume: String) -> SyncRulesExtended {
    self.resume = Some(resume);
    self
  }

  pub fn resume(&self) -> Option<&String> {
    self.resume.as_ref()
  }

  pub fn reset_resume(&mut self) {
    self.resume = None;
  }

  pub fn set_rules(&mut self, rules: Vec<::models::SyncRuleExtendedExtended>) {
    self.rules = rules;
  }

  pub fn with_rules(mut self, rules: Vec<::models::SyncRuleExtendedExtended>) -> SyncRulesExtended {
    self.rules = rules;
    self
  }

  pub fn rules(&self) -> &Vec<::models::SyncRuleExtendedExtended> {
    &self.rules
  }


  pub fn set_total(&mut self, total: i32) {
    self.total = total;
  }

  pub fn with_total(mut self, total: i32) -> SyncRulesExtended {
    self.total = total;
    self
  }

  pub fn total(&self) -> &i32 {
    &self.total
  }


}



