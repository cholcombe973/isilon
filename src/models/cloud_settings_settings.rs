/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudSettingsSettings {
  /// The default filepool policy values for cloudpools.
  #[serde(rename = "cloud_policy_defaults")]
  cloud_policy_defaults: Option<::models::CloudSettingsSettingsCloudPolicyDefaults>,
  /// Coefficients in the quadratic function for determining the rest period between successive archive attempts.
  #[serde(rename = "retry_coefficient_archive")]
  retry_coefficient_archive: Option<String>,
  /// Coefficients in the quadratic function for determining the rest period between successive cache invalidation attempts.
  #[serde(rename = "retry_coefficient_cache_invalidation")]
  retry_coefficient_cache_invalidation: Option<String>,
  /// Coefficients in the quadratic function for determining the rest period between successive cloud garbage collection attempts.
  #[serde(rename = "retry_coefficient_cloud_garbage_collection")]
  retry_coefficient_cloud_garbage_collection: Option<String>,
  /// Coefficients in the quadratic function for determining the rest period between successive local garbage collection attempts.
  #[serde(rename = "retry_coefficient_local_garbage_collection")]
  retry_coefficient_local_garbage_collection: Option<String>,
  /// Coefficients in the quadratic function for determining the rest period between successive read ahead attempts.
  #[serde(rename = "retry_coefficient_read_ahead")]
  retry_coefficient_read_ahead: Option<String>,
  /// Coefficients in the quadratic function for determining the rest period between successive recall attempts.
  #[serde(rename = "retry_coefficient_recall")]
  retry_coefficient_recall: Option<String>,
  /// Coefficients in the quadratic function for determining the rest period between successive writeback attempts.
  #[serde(rename = "retry_coefficient_writeback")]
  retry_coefficient_writeback: Option<String>,
  /// Amount of time to wait between successive file archive operations.
  #[serde(rename = "sleep_timeout_archive")]
  sleep_timeout_archive: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>,
  /// Amount of time to wait between successive file cache_invalidation operations.
  #[serde(rename = "sleep_timeout_cache_invalidation")]
  sleep_timeout_cache_invalidation: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>,
  /// Amount of time to wait between successive file cloud garbage collection operations.
  #[serde(rename = "sleep_timeout_cloud_garbage_collection")]
  sleep_timeout_cloud_garbage_collection: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>,
  /// Amount of time to wait between successive file local garbage collection operations.
  #[serde(rename = "sleep_timeout_local_garbage_collection")]
  sleep_timeout_local_garbage_collection: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>,
  /// Amount of time to wait between successive file read ahead operations.
  #[serde(rename = "sleep_timeout_read_ahead")]
  sleep_timeout_read_ahead: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>,
  /// Amount of time to wait between successive file recall operations.
  #[serde(rename = "sleep_timeout_recall")]
  sleep_timeout_recall: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>,
  /// Amount of time to wait between successive file writeback operations.
  #[serde(rename = "sleep_timeout_writeback")]
  sleep_timeout_writeback: Option<::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection>
}

impl CloudSettingsSettings {
  pub fn new() -> CloudSettingsSettings {
    CloudSettingsSettings {
      cloud_policy_defaults: None,
      retry_coefficient_archive: None,
      retry_coefficient_cache_invalidation: None,
      retry_coefficient_cloud_garbage_collection: None,
      retry_coefficient_local_garbage_collection: None,
      retry_coefficient_read_ahead: None,
      retry_coefficient_recall: None,
      retry_coefficient_writeback: None,
      sleep_timeout_archive: None,
      sleep_timeout_cache_invalidation: None,
      sleep_timeout_cloud_garbage_collection: None,
      sleep_timeout_local_garbage_collection: None,
      sleep_timeout_read_ahead: None,
      sleep_timeout_recall: None,
      sleep_timeout_writeback: None
    }
  }

  pub fn set_cloud_policy_defaults(&mut self, cloud_policy_defaults: ::models::CloudSettingsSettingsCloudPolicyDefaults) {
    self.cloud_policy_defaults = Some(cloud_policy_defaults);
  }

  pub fn with_cloud_policy_defaults(mut self, cloud_policy_defaults: ::models::CloudSettingsSettingsCloudPolicyDefaults) -> CloudSettingsSettings {
    self.cloud_policy_defaults = Some(cloud_policy_defaults);
    self
  }

  pub fn cloud_policy_defaults(&self) -> Option<&::models::CloudSettingsSettingsCloudPolicyDefaults> {
    self.cloud_policy_defaults.as_ref()
  }

  pub fn reset_cloud_policy_defaults(&mut self) {
    self.cloud_policy_defaults = None;
  }

  pub fn set_retry_coefficient_archive(&mut self, retry_coefficient_archive: String) {
    self.retry_coefficient_archive = Some(retry_coefficient_archive);
  }

  pub fn with_retry_coefficient_archive(mut self, retry_coefficient_archive: String) -> CloudSettingsSettings {
    self.retry_coefficient_archive = Some(retry_coefficient_archive);
    self
  }

  pub fn retry_coefficient_archive(&self) -> Option<&String> {
    self.retry_coefficient_archive.as_ref()
  }

  pub fn reset_retry_coefficient_archive(&mut self) {
    self.retry_coefficient_archive = None;
  }

  pub fn set_retry_coefficient_cache_invalidation(&mut self, retry_coefficient_cache_invalidation: String) {
    self.retry_coefficient_cache_invalidation = Some(retry_coefficient_cache_invalidation);
  }

  pub fn with_retry_coefficient_cache_invalidation(mut self, retry_coefficient_cache_invalidation: String) -> CloudSettingsSettings {
    self.retry_coefficient_cache_invalidation = Some(retry_coefficient_cache_invalidation);
    self
  }

  pub fn retry_coefficient_cache_invalidation(&self) -> Option<&String> {
    self.retry_coefficient_cache_invalidation.as_ref()
  }

  pub fn reset_retry_coefficient_cache_invalidation(&mut self) {
    self.retry_coefficient_cache_invalidation = None;
  }

  pub fn set_retry_coefficient_cloud_garbage_collection(&mut self, retry_coefficient_cloud_garbage_collection: String) {
    self.retry_coefficient_cloud_garbage_collection = Some(retry_coefficient_cloud_garbage_collection);
  }

  pub fn with_retry_coefficient_cloud_garbage_collection(mut self, retry_coefficient_cloud_garbage_collection: String) -> CloudSettingsSettings {
    self.retry_coefficient_cloud_garbage_collection = Some(retry_coefficient_cloud_garbage_collection);
    self
  }

  pub fn retry_coefficient_cloud_garbage_collection(&self) -> Option<&String> {
    self.retry_coefficient_cloud_garbage_collection.as_ref()
  }

  pub fn reset_retry_coefficient_cloud_garbage_collection(&mut self) {
    self.retry_coefficient_cloud_garbage_collection = None;
  }

  pub fn set_retry_coefficient_local_garbage_collection(&mut self, retry_coefficient_local_garbage_collection: String) {
    self.retry_coefficient_local_garbage_collection = Some(retry_coefficient_local_garbage_collection);
  }

  pub fn with_retry_coefficient_local_garbage_collection(mut self, retry_coefficient_local_garbage_collection: String) -> CloudSettingsSettings {
    self.retry_coefficient_local_garbage_collection = Some(retry_coefficient_local_garbage_collection);
    self
  }

  pub fn retry_coefficient_local_garbage_collection(&self) -> Option<&String> {
    self.retry_coefficient_local_garbage_collection.as_ref()
  }

  pub fn reset_retry_coefficient_local_garbage_collection(&mut self) {
    self.retry_coefficient_local_garbage_collection = None;
  }

  pub fn set_retry_coefficient_read_ahead(&mut self, retry_coefficient_read_ahead: String) {
    self.retry_coefficient_read_ahead = Some(retry_coefficient_read_ahead);
  }

  pub fn with_retry_coefficient_read_ahead(mut self, retry_coefficient_read_ahead: String) -> CloudSettingsSettings {
    self.retry_coefficient_read_ahead = Some(retry_coefficient_read_ahead);
    self
  }

  pub fn retry_coefficient_read_ahead(&self) -> Option<&String> {
    self.retry_coefficient_read_ahead.as_ref()
  }

  pub fn reset_retry_coefficient_read_ahead(&mut self) {
    self.retry_coefficient_read_ahead = None;
  }

  pub fn set_retry_coefficient_recall(&mut self, retry_coefficient_recall: String) {
    self.retry_coefficient_recall = Some(retry_coefficient_recall);
  }

  pub fn with_retry_coefficient_recall(mut self, retry_coefficient_recall: String) -> CloudSettingsSettings {
    self.retry_coefficient_recall = Some(retry_coefficient_recall);
    self
  }

  pub fn retry_coefficient_recall(&self) -> Option<&String> {
    self.retry_coefficient_recall.as_ref()
  }

  pub fn reset_retry_coefficient_recall(&mut self) {
    self.retry_coefficient_recall = None;
  }

  pub fn set_retry_coefficient_writeback(&mut self, retry_coefficient_writeback: String) {
    self.retry_coefficient_writeback = Some(retry_coefficient_writeback);
  }

  pub fn with_retry_coefficient_writeback(mut self, retry_coefficient_writeback: String) -> CloudSettingsSettings {
    self.retry_coefficient_writeback = Some(retry_coefficient_writeback);
    self
  }

  pub fn retry_coefficient_writeback(&self) -> Option<&String> {
    self.retry_coefficient_writeback.as_ref()
  }

  pub fn reset_retry_coefficient_writeback(&mut self) {
    self.retry_coefficient_writeback = None;
  }

  pub fn set_sleep_timeout_archive(&mut self, sleep_timeout_archive: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_archive = Some(sleep_timeout_archive);
  }

  pub fn with_sleep_timeout_archive(mut self, sleep_timeout_archive: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_archive = Some(sleep_timeout_archive);
    self
  }

  pub fn sleep_timeout_archive(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_archive.as_ref()
  }

  pub fn reset_sleep_timeout_archive(&mut self) {
    self.sleep_timeout_archive = None;
  }

  pub fn set_sleep_timeout_cache_invalidation(&mut self, sleep_timeout_cache_invalidation: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_cache_invalidation = Some(sleep_timeout_cache_invalidation);
  }

  pub fn with_sleep_timeout_cache_invalidation(mut self, sleep_timeout_cache_invalidation: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_cache_invalidation = Some(sleep_timeout_cache_invalidation);
    self
  }

  pub fn sleep_timeout_cache_invalidation(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_cache_invalidation.as_ref()
  }

  pub fn reset_sleep_timeout_cache_invalidation(&mut self) {
    self.sleep_timeout_cache_invalidation = None;
  }

  pub fn set_sleep_timeout_cloud_garbage_collection(&mut self, sleep_timeout_cloud_garbage_collection: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_cloud_garbage_collection = Some(sleep_timeout_cloud_garbage_collection);
  }

  pub fn with_sleep_timeout_cloud_garbage_collection(mut self, sleep_timeout_cloud_garbage_collection: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_cloud_garbage_collection = Some(sleep_timeout_cloud_garbage_collection);
    self
  }

  pub fn sleep_timeout_cloud_garbage_collection(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_cloud_garbage_collection.as_ref()
  }

  pub fn reset_sleep_timeout_cloud_garbage_collection(&mut self) {
    self.sleep_timeout_cloud_garbage_collection = None;
  }

  pub fn set_sleep_timeout_local_garbage_collection(&mut self, sleep_timeout_local_garbage_collection: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_local_garbage_collection = Some(sleep_timeout_local_garbage_collection);
  }

  pub fn with_sleep_timeout_local_garbage_collection(mut self, sleep_timeout_local_garbage_collection: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_local_garbage_collection = Some(sleep_timeout_local_garbage_collection);
    self
  }

  pub fn sleep_timeout_local_garbage_collection(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_local_garbage_collection.as_ref()
  }

  pub fn reset_sleep_timeout_local_garbage_collection(&mut self) {
    self.sleep_timeout_local_garbage_collection = None;
  }

  pub fn set_sleep_timeout_read_ahead(&mut self, sleep_timeout_read_ahead: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_read_ahead = Some(sleep_timeout_read_ahead);
  }

  pub fn with_sleep_timeout_read_ahead(mut self, sleep_timeout_read_ahead: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_read_ahead = Some(sleep_timeout_read_ahead);
    self
  }

  pub fn sleep_timeout_read_ahead(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_read_ahead.as_ref()
  }

  pub fn reset_sleep_timeout_read_ahead(&mut self) {
    self.sleep_timeout_read_ahead = None;
  }

  pub fn set_sleep_timeout_recall(&mut self, sleep_timeout_recall: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_recall = Some(sleep_timeout_recall);
  }

  pub fn with_sleep_timeout_recall(mut self, sleep_timeout_recall: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_recall = Some(sleep_timeout_recall);
    self
  }

  pub fn sleep_timeout_recall(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_recall.as_ref()
  }

  pub fn reset_sleep_timeout_recall(&mut self) {
    self.sleep_timeout_recall = None;
  }

  pub fn set_sleep_timeout_writeback(&mut self, sleep_timeout_writeback: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) {
    self.sleep_timeout_writeback = Some(sleep_timeout_writeback);
  }

  pub fn with_sleep_timeout_writeback(mut self, sleep_timeout_writeback: ::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection) -> CloudSettingsSettings {
    self.sleep_timeout_writeback = Some(sleep_timeout_writeback);
    self
  }

  pub fn sleep_timeout_writeback(&self) -> Option<&::models::CloudSettingsSettingsSleepTimeoutCloudGarbageCollection> {
    self.sleep_timeout_writeback.as_ref()
  }

  pub fn reset_sleep_timeout_writeback(&mut self) {
    self.sleep_timeout_writeback = None;
  }

}



