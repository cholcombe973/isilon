/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NdmpContextsBackupContext {
  /// Context ID
  #[serde(rename = "context_id")]
  context_id: Option<String>,
  /// Unique display id.
  #[serde(rename = "id")]
  id: Option<String>,
  /// The directory of the backup. This is not applicable to restore contexts.
  #[serde(rename = "path")]
  path: Option<String>,
  /// Snapshot ID reserved for the context. This is not applicable to restore contexts.
  #[serde(rename = "snapid")]
  snapid: Option<i32>,
  /// Context creation time
  #[serde(rename = "start_time")]
  start_time: Option<i32>,
  /// Whether the context is active.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The number of sessions in the context
  #[serde(rename = "total_sessions")]
  total_sessions: Option<i32>,
  /// Type of context; It can be bre, backup, and restore
  #[serde(rename = "type")]
  _type: Option<String>
}

impl NdmpContextsBackupContext {
  pub fn new() -> NdmpContextsBackupContext {
    NdmpContextsBackupContext {
      context_id: None,
      id: None,
      path: None,
      snapid: None,
      start_time: None,
      status: None,
      total_sessions: None,
      _type: None
    }
  }

  pub fn set_context_id(&mut self, context_id: String) {
    self.context_id = Some(context_id);
  }

  pub fn with_context_id(mut self, context_id: String) -> NdmpContextsBackupContext {
    self.context_id = Some(context_id);
    self
  }

  pub fn context_id(&self) -> Option<&String> {
    self.context_id.as_ref()
  }

  pub fn reset_context_id(&mut self) {
    self.context_id = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> NdmpContextsBackupContext {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> NdmpContextsBackupContext {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_snapid(&mut self, snapid: i32) {
    self.snapid = Some(snapid);
  }

  pub fn with_snapid(mut self, snapid: i32) -> NdmpContextsBackupContext {
    self.snapid = Some(snapid);
    self
  }

  pub fn snapid(&self) -> Option<&i32> {
    self.snapid.as_ref()
  }

  pub fn reset_snapid(&mut self) {
    self.snapid = None;
  }

  pub fn set_start_time(&mut self, start_time: i32) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: i32) -> NdmpContextsBackupContext {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&i32> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> NdmpContextsBackupContext {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_total_sessions(&mut self, total_sessions: i32) {
    self.total_sessions = Some(total_sessions);
  }

  pub fn with_total_sessions(mut self, total_sessions: i32) -> NdmpContextsBackupContext {
    self.total_sessions = Some(total_sessions);
    self
  }

  pub fn total_sessions(&self) -> Option<&i32> {
    self.total_sessions.as_ref()
  }

  pub fn reset_total_sessions(&mut self) {
    self.total_sessions = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with_type(mut self, _type: String) -> NdmpContextsBackupContext {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset_type(&mut self) {
    self._type = None;
  }

}



