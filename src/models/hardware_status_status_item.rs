/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HardwareStatusStatusItem {
  /// The ID of this upgrade.
  #[serde(rename = "id")]
  id: String,
  /// Name of the upgrading pool.
  #[serde(rename = "nodepool_name")]
  nodepool_name: Option<String>,
  /// The lnns of the nodes in the pool that haven't been upgraded yet.
  #[serde(rename = "unupgraded_lnns")]
  unupgraded_lnns: Vec<i32>,
  /// The type of upgrade this is.
  #[serde(rename = "upgrade_type")]
  upgrade_type: String,
  /// The lnns of the nodes in the pool that have been successsfully upgraded.
  #[serde(rename = "upgraded_lnns")]
  upgraded_lnns: Vec<i32>
}

impl HardwareStatusStatusItem {
  pub fn new(id: String, unupgraded_lnns: Vec<i32>, upgrade_type: String, upgraded_lnns: Vec<i32>) -> HardwareStatusStatusItem {
    HardwareStatusStatusItem {
      id: id,
      nodepool_name: None,
      unupgraded_lnns: unupgraded_lnns,
      upgrade_type: upgrade_type,
      upgraded_lnns: upgraded_lnns
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> HardwareStatusStatusItem {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_nodepool_name(&mut self, nodepool_name: String) {
    self.nodepool_name = Some(nodepool_name);
  }

  pub fn with_nodepool_name(mut self, nodepool_name: String) -> HardwareStatusStatusItem {
    self.nodepool_name = Some(nodepool_name);
    self
  }

  pub fn nodepool_name(&self) -> Option<&String> {
    self.nodepool_name.as_ref()
  }

  pub fn reset_nodepool_name(&mut self) {
    self.nodepool_name = None;
  }

  pub fn set_unupgraded_lnns(&mut self, unupgraded_lnns: Vec<i32>) {
    self.unupgraded_lnns = unupgraded_lnns;
  }

  pub fn with_unupgraded_lnns(mut self, unupgraded_lnns: Vec<i32>) -> HardwareStatusStatusItem {
    self.unupgraded_lnns = unupgraded_lnns;
    self
  }

  pub fn unupgraded_lnns(&self) -> &Vec<i32> {
    &self.unupgraded_lnns
  }


  pub fn set_upgrade_type(&mut self, upgrade_type: String) {
    self.upgrade_type = upgrade_type;
  }

  pub fn with_upgrade_type(mut self, upgrade_type: String) -> HardwareStatusStatusItem {
    self.upgrade_type = upgrade_type;
    self
  }

  pub fn upgrade_type(&self) -> &String {
    &self.upgrade_type
  }


  pub fn set_upgraded_lnns(&mut self, upgraded_lnns: Vec<i32>) {
    self.upgraded_lnns = upgraded_lnns;
  }

  pub fn with_upgraded_lnns(mut self, upgraded_lnns: Vec<i32>) -> HardwareStatusStatusItem {
    self.upgraded_lnns = upgraded_lnns;
    self
  }

  pub fn upgraded_lnns(&self) -> &Vec<i32> {
    &self.upgraded_lnns
  }


}



