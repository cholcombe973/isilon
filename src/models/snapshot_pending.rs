/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotPending {
  #[serde(rename = "pending")]
  pending: Option<Vec<::models::SnapshotPendingPendingItem>>,
  /// Resume token value to use in subsequent calls for continuation.
  #[serde(rename = "resume")]
  resume: Option<String>
}

impl SnapshotPending {
  pub fn new() -> SnapshotPending {
    SnapshotPending {
      pending: None,
      resume: None
    }
  }

  pub fn set_pending(&mut self, pending: Vec<::models::SnapshotPendingPendingItem>) {
    self.pending = Some(pending);
  }

  pub fn with_pending(mut self, pending: Vec<::models::SnapshotPendingPendingItem>) -> SnapshotPending {
    self.pending = Some(pending);
    self
  }

  pub fn pending(&self) -> Option<&Vec<::models::SnapshotPendingPendingItem>> {
    self.pending.as_ref()
  }

  pub fn reset_pending(&mut self) {
    self.pending = None;
  }

  pub fn set_resume(&mut self, resume: String) {
    self.resume = Some(resume);
  }

  pub fn with_resume(mut self, resume: String) -> SnapshotPending {
    self.resume = Some(resume);
    self
  }

  pub fn resume(&self) -> Option<&String> {
    self.resume.as_ref()
  }

  pub fn reset_resume(&mut self) {
    self.resume = None;
  }

}



