/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CompatibilitiesSsdActiveItem {
  /// Do not create ssd compatibility, only assess if creation is possible.
  #[serde(rename = "assess")]
  assess: Option<bool>,
  /// The node class of the desired ssd compatibility
  #[serde(rename = "class_1")]
  class_1: String,
  /// The optional second node class to turn on ssd compatibility
  #[serde(rename = "class_2")]
  class_2: Option<String>,
  /// Is this SSD Compatibility Count Compatible.
  #[serde(rename = "count")]
  count: Option<bool>
}

impl CompatibilitiesSsdActiveItem {
  pub fn new(class_1: String) -> CompatibilitiesSsdActiveItem {
    CompatibilitiesSsdActiveItem {
      assess: None,
      class_1: class_1,
      class_2: None,
      count: None
    }
  }

  pub fn set_assess(&mut self, assess: bool) {
    self.assess = Some(assess);
  }

  pub fn with_assess(mut self, assess: bool) -> CompatibilitiesSsdActiveItem {
    self.assess = Some(assess);
    self
  }

  pub fn assess(&self) -> Option<&bool> {
    self.assess.as_ref()
  }

  pub fn reset_assess(&mut self) {
    self.assess = None;
  }

  pub fn set_class_1(&mut self, class_1: String) {
    self.class_1 = class_1;
  }

  pub fn with_class_1(mut self, class_1: String) -> CompatibilitiesSsdActiveItem {
    self.class_1 = class_1;
    self
  }

  pub fn class_1(&self) -> &String {
    &self.class_1
  }


  pub fn set_class_2(&mut self, class_2: String) {
    self.class_2 = Some(class_2);
  }

  pub fn with_class_2(mut self, class_2: String) -> CompatibilitiesSsdActiveItem {
    self.class_2 = Some(class_2);
    self
  }

  pub fn class_2(&self) -> Option<&String> {
    self.class_2.as_ref()
  }

  pub fn reset_class_2(&mut self) {
    self.class_2 = None;
  }

  pub fn set_count(&mut self, count: bool) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: bool) -> CompatibilitiesSsdActiveItem {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&bool> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

}



