/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudSettingsSettingsCloudPolicyDefaultsCache {
  /// Specifies cache expiration.
  #[serde(rename = "expiration")]
  expiration: Option<i32>,
  /// Specifies cache read ahead type.
  #[serde(rename = "read_ahead")]
  read_ahead: Option<String>,
  /// Specifies cache type.
  #[serde(rename = "type")]
  _type: Option<String>
}

impl CloudSettingsSettingsCloudPolicyDefaultsCache {
  pub fn new() -> CloudSettingsSettingsCloudPolicyDefaultsCache {
    CloudSettingsSettingsCloudPolicyDefaultsCache {
      expiration: None,
      read_ahead: None,
      _type: None
    }
  }

  pub fn set_expiration(&mut self, expiration: i32) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: i32) -> CloudSettingsSettingsCloudPolicyDefaultsCache {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&i32> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

  pub fn set_read_ahead(&mut self, read_ahead: String) {
    self.read_ahead = Some(read_ahead);
  }

  pub fn with_read_ahead(mut self, read_ahead: String) -> CloudSettingsSettingsCloudPolicyDefaultsCache {
    self.read_ahead = Some(read_ahead);
    self
  }

  pub fn read_ahead(&self) -> Option<&String> {
    self.read_ahead.as_ref()
  }

  pub fn reset_read_ahead(&mut self) {
    self.read_ahead = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> CloudSettingsSettingsCloudPolicyDefaultsCache {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



