/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SnapshotPendingPendingItem {
  /// The system supplied unique ID used for sorting and paging.
  #[serde(rename = "id")]
  id: String,
  /// The /ifs path that will snapshotted.
  #[serde(rename = "path")]
  path: String,
  /// The name of the schedule used to create this snapshot.
  #[serde(rename = "schedule")]
  schedule: String,
  /// The system snapshot name formed from the schedule formate.
  #[serde(rename = "snapshot")]
  snapshot: String,
  /// The Unix Epoch time the snapshot will be created.
  #[serde(rename = "time")]
  time: i32
}

impl SnapshotPendingPendingItem {
  pub fn new(id: String, path: String, schedule: String, snapshot: String, time: i32) -> SnapshotPendingPendingItem {
    SnapshotPendingPendingItem {
      id: id,
      path: path,
      schedule: schedule,
      snapshot: snapshot,
      time: time
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> SnapshotPendingPendingItem {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> SnapshotPendingPendingItem {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_schedule(&mut self, schedule: String) {
    self.schedule = schedule;
  }

  pub fn with_schedule(mut self, schedule: String) -> SnapshotPendingPendingItem {
    self.schedule = schedule;
    self
  }

  pub fn schedule(&self) -> &String {
    &self.schedule
  }


  pub fn set_snapshot(&mut self, snapshot: String) {
    self.snapshot = snapshot;
  }

  pub fn with_snapshot(mut self, snapshot: String) -> SnapshotPendingPendingItem {
    self.snapshot = snapshot;
    self
  }

  pub fn snapshot(&self) -> &String {
    &self.snapshot
  }


  pub fn set_time(&mut self, time: i32) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i32) -> SnapshotPendingPendingItem {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i32 {
    &self.time
  }


}



