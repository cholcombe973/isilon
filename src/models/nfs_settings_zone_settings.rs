/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NfsSettingsZoneSettings {
  /// If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.
  #[serde(rename = "nfsv4_allow_numeric_ids")]
  nfsv4_allow_numeric_ids: Option<bool>,
  /// Specifies the domain or realm through which users and groups are associated.
  #[serde(rename = "nfsv4_domain")]
  nfsv4_domain: Option<String>,
  /// If true, sends owners and groups without a domain name.
  #[serde(rename = "nfsv4_no_domain")]
  nfsv4_no_domain: Option<bool>,
  /// If true, sends UIDs and GIDs without a domain name.
  #[serde(rename = "nfsv4_no_domain_uids")]
  nfsv4_no_domain_uids: Option<bool>,
  /// If true, sends owners and groups as UIDs and GIDs.
  #[serde(rename = "nfsv4_no_names")]
  nfsv4_no_names: Option<bool>,
  /// If true, replaces the owner or group domain with an NFS domain name.
  #[serde(rename = "nfsv4_replace_domain")]
  nfsv4_replace_domain: Option<bool>,
  /// Specifies the access zones in which these settings apply.
  #[serde(rename = "zone")]
  zone: Option<String>
}

impl NfsSettingsZoneSettings {
  pub fn new() -> NfsSettingsZoneSettings {
    NfsSettingsZoneSettings {
      nfsv4_allow_numeric_ids: None,
      nfsv4_domain: None,
      nfsv4_no_domain: None,
      nfsv4_no_domain_uids: None,
      nfsv4_no_names: None,
      nfsv4_replace_domain: None,
      zone: None
    }
  }

  pub fn set_nfsv4_allow_numeric_ids(&mut self, nfsv4_allow_numeric_ids: bool) {
    self.nfsv4_allow_numeric_ids = Some(nfsv4_allow_numeric_ids);
  }

  pub fn with_nfsv4_allow_numeric_ids(mut self, nfsv4_allow_numeric_ids: bool) -> NfsSettingsZoneSettings {
    self.nfsv4_allow_numeric_ids = Some(nfsv4_allow_numeric_ids);
    self
  }

  pub fn nfsv4_allow_numeric_ids(&self) -> Option<&bool> {
    self.nfsv4_allow_numeric_ids.as_ref()
  }

  pub fn reset_nfsv4_allow_numeric_ids(&mut self) {
    self.nfsv4_allow_numeric_ids = None;
  }

  pub fn set_nfsv4_domain(&mut self, nfsv4_domain: String) {
    self.nfsv4_domain = Some(nfsv4_domain);
  }

  pub fn with_nfsv4_domain(mut self, nfsv4_domain: String) -> NfsSettingsZoneSettings {
    self.nfsv4_domain = Some(nfsv4_domain);
    self
  }

  pub fn nfsv4_domain(&self) -> Option<&String> {
    self.nfsv4_domain.as_ref()
  }

  pub fn reset_nfsv4_domain(&mut self) {
    self.nfsv4_domain = None;
  }

  pub fn set_nfsv4_no_domain(&mut self, nfsv4_no_domain: bool) {
    self.nfsv4_no_domain = Some(nfsv4_no_domain);
  }

  pub fn with_nfsv4_no_domain(mut self, nfsv4_no_domain: bool) -> NfsSettingsZoneSettings {
    self.nfsv4_no_domain = Some(nfsv4_no_domain);
    self
  }

  pub fn nfsv4_no_domain(&self) -> Option<&bool> {
    self.nfsv4_no_domain.as_ref()
  }

  pub fn reset_nfsv4_no_domain(&mut self) {
    self.nfsv4_no_domain = None;
  }

  pub fn set_nfsv4_no_domain_uids(&mut self, nfsv4_no_domain_uids: bool) {
    self.nfsv4_no_domain_uids = Some(nfsv4_no_domain_uids);
  }

  pub fn with_nfsv4_no_domain_uids(mut self, nfsv4_no_domain_uids: bool) -> NfsSettingsZoneSettings {
    self.nfsv4_no_domain_uids = Some(nfsv4_no_domain_uids);
    self
  }

  pub fn nfsv4_no_domain_uids(&self) -> Option<&bool> {
    self.nfsv4_no_domain_uids.as_ref()
  }

  pub fn reset_nfsv4_no_domain_uids(&mut self) {
    self.nfsv4_no_domain_uids = None;
  }

  pub fn set_nfsv4_no_names(&mut self, nfsv4_no_names: bool) {
    self.nfsv4_no_names = Some(nfsv4_no_names);
  }

  pub fn with_nfsv4_no_names(mut self, nfsv4_no_names: bool) -> NfsSettingsZoneSettings {
    self.nfsv4_no_names = Some(nfsv4_no_names);
    self
  }

  pub fn nfsv4_no_names(&self) -> Option<&bool> {
    self.nfsv4_no_names.as_ref()
  }

  pub fn reset_nfsv4_no_names(&mut self) {
    self.nfsv4_no_names = None;
  }

  pub fn set_nfsv4_replace_domain(&mut self, nfsv4_replace_domain: bool) {
    self.nfsv4_replace_domain = Some(nfsv4_replace_domain);
  }

  pub fn with_nfsv4_replace_domain(mut self, nfsv4_replace_domain: bool) -> NfsSettingsZoneSettings {
    self.nfsv4_replace_domain = Some(nfsv4_replace_domain);
    self
  }

  pub fn nfsv4_replace_domain(&self) -> Option<&bool> {
    self.nfsv4_replace_domain.as_ref()
  }

  pub fn reset_nfsv4_replace_domain(&mut self) {
    self.nfsv4_replace_domain = None;
  }

  pub fn set_zone(&mut self, zone: String) {
    self.zone = Some(zone);
  }

  pub fn with_zone(mut self, zone: String) -> NfsSettingsZoneSettings {
    self.zone = Some(zone);
    self
  }

  pub fn zone(&self) -> Option<&String> {
    self.zone.as_ref()
  }

  pub fn reset_zone(&mut self) {
    self.zone = None;
  }

}



