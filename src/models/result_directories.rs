/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResultDirectories {
  /// User attribute count.
  #[serde(rename = "attribute_count")]
  attribute_count: i32,
  /// Directory depth.
  #[serde(rename = "dir_depth")]
  dir_depth: i32,
  /// Disk usage for current directory.
  #[serde(rename = "dir_usage")]
  dir_usage: ::models::ResultDirectoriesTotalUsage,
  /// Directory path information from root to current directory.
  #[serde(rename = "path_parts")]
  path_parts: Vec<String>,
  /// Disk usage from root.
  #[serde(rename = "total_usage")]
  total_usage: ::models::ResultDirectoriesTotalUsage,
  /// Disk usage for all of immediate children of the current directory.
  #[serde(rename = "usage_data")]
  usage_data: Vec<::models::ResultDirectoriesUsageDataItem>
}

impl ResultDirectories {
  pub fn new(attribute_count: i32, dir_depth: i32, dir_usage: ::models::ResultDirectoriesTotalUsage, path_parts: Vec<String>, total_usage: ::models::ResultDirectoriesTotalUsage, usage_data: Vec<::models::ResultDirectoriesUsageDataItem>) -> ResultDirectories {
    ResultDirectories {
      attribute_count: attribute_count,
      dir_depth: dir_depth,
      dir_usage: dir_usage,
      path_parts: path_parts,
      total_usage: total_usage,
      usage_data: usage_data
    }
  }

  pub fn set_attribute_count(&mut self, attribute_count: i32) {
    self.attribute_count = attribute_count;
  }

  pub fn with_attribute_count(mut self, attribute_count: i32) -> ResultDirectories {
    self.attribute_count = attribute_count;
    self
  }

  pub fn attribute_count(&self) -> &i32 {
    &self.attribute_count
  }


  pub fn set_dir_depth(&mut self, dir_depth: i32) {
    self.dir_depth = dir_depth;
  }

  pub fn with_dir_depth(mut self, dir_depth: i32) -> ResultDirectories {
    self.dir_depth = dir_depth;
    self
  }

  pub fn dir_depth(&self) -> &i32 {
    &self.dir_depth
  }


  pub fn set_dir_usage(&mut self, dir_usage: ::models::ResultDirectoriesTotalUsage) {
    self.dir_usage = dir_usage;
  }

  pub fn with_dir_usage(mut self, dir_usage: ::models::ResultDirectoriesTotalUsage) -> ResultDirectories {
    self.dir_usage = dir_usage;
    self
  }

  pub fn dir_usage(&self) -> &::models::ResultDirectoriesTotalUsage {
    &self.dir_usage
  }


  pub fn set_path_parts(&mut self, path_parts: Vec<String>) {
    self.path_parts = path_parts;
  }

  pub fn with_path_parts(mut self, path_parts: Vec<String>) -> ResultDirectories {
    self.path_parts = path_parts;
    self
  }

  pub fn path_parts(&self) -> &Vec<String> {
    &self.path_parts
  }


  pub fn set_total_usage(&mut self, total_usage: ::models::ResultDirectoriesTotalUsage) {
    self.total_usage = total_usage;
  }

  pub fn with_total_usage(mut self, total_usage: ::models::ResultDirectoriesTotalUsage) -> ResultDirectories {
    self.total_usage = total_usage;
    self
  }

  pub fn total_usage(&self) -> &::models::ResultDirectoriesTotalUsage {
    &self.total_usage
  }


  pub fn set_usage_data(&mut self, usage_data: Vec<::models::ResultDirectoriesUsageDataItem>) {
    self.usage_data = usage_data;
  }

  pub fn with_usage_data(mut self, usage_data: Vec<::models::ResultDirectoriesUsageDataItem>) -> ResultDirectories {
    self.usage_data = usage_data;
    self
  }

  pub fn usage_data(&self) -> &Vec<::models::ResultDirectoriesUsageDataItem> {
    &self.usage_data
  }


}



