/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsAclsAclPolicySettings {
  /// Access checks (chmod, chown).
  #[serde(rename = "access")]
  access: Option<String>,
  /// Displayed mode bits.
  #[serde(rename = "calcmode")]
  calcmode: Option<String>,
  /// Approximate group mode bits when ACL exists.
  #[serde(rename = "calcmode_group")]
  calcmode_group: Option<String>,
  /// Approximate owner mode bits when ACL exists.
  #[serde(rename = "calcmode_owner")]
  calcmode_owner: Option<String>,
  /// chmod on files with existing ACLs.
  #[serde(rename = "chmod")]
  chmod: Option<String>,
  /// chmod (007) on files with existing ACLs.
  #[serde(rename = "chmod_007")]
  chmod_007: Option<String>,
  /// ACLs created on directories by UNIX chmod.
  #[serde(rename = "chmod_inheritable")]
  chmod_inheritable: Option<String>,
  /// chown/chgrp on files with existing ACLs.
  #[serde(rename = "chown")]
  chown: Option<String>,
  /// ACL creation over SMB.
  #[serde(rename = "create_over_smb")]
  create_over_smb: Option<String>,
  ///  Read only DOS attribute.
  #[serde(rename = "dos_attr")]
  dos_attr: Option<String>,
  /// Group owner inheritance.
  #[serde(rename = "group_owner_inheritance")]
  group_owner_inheritance: Option<String>,
  /// Treatment of 'rwx' permissions.
  #[serde(rename = "rwx")]
  rwx: Option<String>,
  /// Synthetic 'deny' ACEs.
  #[serde(rename = "synthetic_denies")]
  synthetic_denies: Option<String>,
  /// Access check (utimes)
  #[serde(rename = "utimes")]
  utimes: Option<String>
}

impl SettingsAclsAclPolicySettings {
  pub fn new() -> SettingsAclsAclPolicySettings {
    SettingsAclsAclPolicySettings {
      access: None,
      calcmode: None,
      calcmode_group: None,
      calcmode_owner: None,
      chmod: None,
      chmod_007: None,
      chmod_inheritable: None,
      chown: None,
      create_over_smb: None,
      dos_attr: None,
      group_owner_inheritance: None,
      rwx: None,
      synthetic_denies: None,
      utimes: None
    }
  }

  pub fn set_access(&mut self, access: String) {
    self.access = Some(access);
  }

  pub fn with_access(mut self, access: String) -> SettingsAclsAclPolicySettings {
    self.access = Some(access);
    self
  }

  pub fn access(&self) -> Option<&String> {
    self.access.as_ref()
  }

  pub fn reset_access(&mut self) {
    self.access = None;
  }

  pub fn set_calcmode(&mut self, calcmode: String) {
    self.calcmode = Some(calcmode);
  }

  pub fn with_calcmode(mut self, calcmode: String) -> SettingsAclsAclPolicySettings {
    self.calcmode = Some(calcmode);
    self
  }

  pub fn calcmode(&self) -> Option<&String> {
    self.calcmode.as_ref()
  }

  pub fn reset_calcmode(&mut self) {
    self.calcmode = None;
  }

  pub fn set_calcmode_group(&mut self, calcmode_group: String) {
    self.calcmode_group = Some(calcmode_group);
  }

  pub fn with_calcmode_group(mut self, calcmode_group: String) -> SettingsAclsAclPolicySettings {
    self.calcmode_group = Some(calcmode_group);
    self
  }

  pub fn calcmode_group(&self) -> Option<&String> {
    self.calcmode_group.as_ref()
  }

  pub fn reset_calcmode_group(&mut self) {
    self.calcmode_group = None;
  }

  pub fn set_calcmode_owner(&mut self, calcmode_owner: String) {
    self.calcmode_owner = Some(calcmode_owner);
  }

  pub fn with_calcmode_owner(mut self, calcmode_owner: String) -> SettingsAclsAclPolicySettings {
    self.calcmode_owner = Some(calcmode_owner);
    self
  }

  pub fn calcmode_owner(&self) -> Option<&String> {
    self.calcmode_owner.as_ref()
  }

  pub fn reset_calcmode_owner(&mut self) {
    self.calcmode_owner = None;
  }

  pub fn set_chmod(&mut self, chmod: String) {
    self.chmod = Some(chmod);
  }

  pub fn with_chmod(mut self, chmod: String) -> SettingsAclsAclPolicySettings {
    self.chmod = Some(chmod);
    self
  }

  pub fn chmod(&self) -> Option<&String> {
    self.chmod.as_ref()
  }

  pub fn reset_chmod(&mut self) {
    self.chmod = None;
  }

  pub fn set_chmod_007(&mut self, chmod_007: String) {
    self.chmod_007 = Some(chmod_007);
  }

  pub fn with_chmod_007(mut self, chmod_007: String) -> SettingsAclsAclPolicySettings {
    self.chmod_007 = Some(chmod_007);
    self
  }

  pub fn chmod_007(&self) -> Option<&String> {
    self.chmod_007.as_ref()
  }

  pub fn reset_chmod_007(&mut self) {
    self.chmod_007 = None;
  }

  pub fn set_chmod_inheritable(&mut self, chmod_inheritable: String) {
    self.chmod_inheritable = Some(chmod_inheritable);
  }

  pub fn with_chmod_inheritable(mut self, chmod_inheritable: String) -> SettingsAclsAclPolicySettings {
    self.chmod_inheritable = Some(chmod_inheritable);
    self
  }

  pub fn chmod_inheritable(&self) -> Option<&String> {
    self.chmod_inheritable.as_ref()
  }

  pub fn reset_chmod_inheritable(&mut self) {
    self.chmod_inheritable = None;
  }

  pub fn set_chown(&mut self, chown: String) {
    self.chown = Some(chown);
  }

  pub fn with_chown(mut self, chown: String) -> SettingsAclsAclPolicySettings {
    self.chown = Some(chown);
    self
  }

  pub fn chown(&self) -> Option<&String> {
    self.chown.as_ref()
  }

  pub fn reset_chown(&mut self) {
    self.chown = None;
  }

  pub fn set_create_over_smb(&mut self, create_over_smb: String) {
    self.create_over_smb = Some(create_over_smb);
  }

  pub fn with_create_over_smb(mut self, create_over_smb: String) -> SettingsAclsAclPolicySettings {
    self.create_over_smb = Some(create_over_smb);
    self
  }

  pub fn create_over_smb(&self) -> Option<&String> {
    self.create_over_smb.as_ref()
  }

  pub fn reset_create_over_smb(&mut self) {
    self.create_over_smb = None;
  }

  pub fn set_dos_attr(&mut self, dos_attr: String) {
    self.dos_attr = Some(dos_attr);
  }

  pub fn with_dos_attr(mut self, dos_attr: String) -> SettingsAclsAclPolicySettings {
    self.dos_attr = Some(dos_attr);
    self
  }

  pub fn dos_attr(&self) -> Option<&String> {
    self.dos_attr.as_ref()
  }

  pub fn reset_dos_attr(&mut self) {
    self.dos_attr = None;
  }

  pub fn set_group_owner_inheritance(&mut self, group_owner_inheritance: String) {
    self.group_owner_inheritance = Some(group_owner_inheritance);
  }

  pub fn with_group_owner_inheritance(mut self, group_owner_inheritance: String) -> SettingsAclsAclPolicySettings {
    self.group_owner_inheritance = Some(group_owner_inheritance);
    self
  }

  pub fn group_owner_inheritance(&self) -> Option<&String> {
    self.group_owner_inheritance.as_ref()
  }

  pub fn reset_group_owner_inheritance(&mut self) {
    self.group_owner_inheritance = None;
  }

  pub fn set_rwx(&mut self, rwx: String) {
    self.rwx = Some(rwx);
  }

  pub fn with_rwx(mut self, rwx: String) -> SettingsAclsAclPolicySettings {
    self.rwx = Some(rwx);
    self
  }

  pub fn rwx(&self) -> Option<&String> {
    self.rwx.as_ref()
  }

  pub fn reset_rwx(&mut self) {
    self.rwx = None;
  }

  pub fn set_synthetic_denies(&mut self, synthetic_denies: String) {
    self.synthetic_denies = Some(synthetic_denies);
  }

  pub fn with_synthetic_denies(mut self, synthetic_denies: String) -> SettingsAclsAclPolicySettings {
    self.synthetic_denies = Some(synthetic_denies);
    self
  }

  pub fn synthetic_denies(&self) -> Option<&String> {
    self.synthetic_denies.as_ref()
  }

  pub fn reset_synthetic_denies(&mut self) {
    self.synthetic_denies = None;
  }

  pub fn set_utimes(&mut self, utimes: String) {
    self.utimes = Some(utimes);
  }

  pub fn with_utimes(mut self, utimes: String) -> SettingsAclsAclPolicySettings {
    self.utimes = Some(utimes);
    self
  }

  pub fn utimes(&self) -> Option<&String> {
    self.utimes.as_ref()
  }

  pub fn reset_utimes(&mut self) {
    self.utimes = None;
  }

}



