/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HardwareFcport {
  /// The unique display id
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "rate")]
  rate: Option<String>,
  /// State of the port
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "topology")]
  topology: Option<String>,
  /// World wide node name of the port
  #[serde(rename = "wwnn")]
  wwnn: Option<String>,
  /// World wide port name of the port
  #[serde(rename = "wwpn")]
  wwpn: Option<String>
}

impl HardwareFcport {
  pub fn new() -> HardwareFcport {
    HardwareFcport {
      id: None,
      rate: None,
      state: None,
      topology: None,
      wwnn: None,
      wwpn: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> HardwareFcport {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_rate(&mut self, rate: String) {
    self.rate = Some(rate);
  }

  pub fn with_rate(mut self, rate: String) -> HardwareFcport {
    self.rate = Some(rate);
    self
  }

  pub fn rate(&self) -> Option<&String> {
    self.rate.as_ref()
  }

  pub fn reset_rate(&mut self) {
    self.rate = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> HardwareFcport {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_topology(&mut self, topology: String) {
    self.topology = Some(topology);
  }

  pub fn with_topology(mut self, topology: String) -> HardwareFcport {
    self.topology = Some(topology);
    self
  }

  pub fn topology(&self) -> Option<&String> {
    self.topology.as_ref()
  }

  pub fn reset_topology(&mut self) {
    self.topology = None;
  }

  pub fn set_wwnn(&mut self, wwnn: String) {
    self.wwnn = Some(wwnn);
  }

  pub fn with_wwnn(mut self, wwnn: String) -> HardwareFcport {
    self.wwnn = Some(wwnn);
    self
  }

  pub fn wwnn(&self) -> Option<&String> {
    self.wwnn.as_ref()
  }

  pub fn reset_wwnn(&mut self) {
    self.wwnn = None;
  }

  pub fn set_wwpn(&mut self, wwpn: String) {
    self.wwpn = Some(wwpn);
  }

  pub fn with_wwpn(mut self, wwpn: String) -> HardwareFcport {
    self.wwpn = Some(wwpn);
    self
  }

  pub fn wwpn(&self) -> Option<&String> {
    self.wwpn.as_ref()
  }

  pub fn reset_wwpn(&mut self) {
    self.wwpn = None;
  }

}



