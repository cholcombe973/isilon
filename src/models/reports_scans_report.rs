/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReportsScansReport {
  /// The number of bytes sent to the virus definition server to be scanned.
  #[serde(rename = "bytes_sent")]
  bytes_sent: Option<i32>,
  /// The length of time the job ran for.
  #[serde(rename = "duration")]
  duration: Option<i32>,
  #[serde(rename = "end")]
  end: Option<i32>,
  /// The number of files scanned.
  #[serde(rename = "files")]
  files: Option<i32>,
  /// A unique identifier for the report.
  #[serde(rename = "id")]
  id: Option<String>,
  /// The number of infections found.
  #[serde(rename = "infections")]
  infections: Option<i32>,
  #[serde(rename = "job_id")]
  job_id: Option<i32>,
  /// The id of the policy that this scan job executed.
  #[serde(rename = "policy_id")]
  policy_id: Option<String>,
  /// The cumulative size of the files scanned.
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "start")]
  start: Option<i32>,
  /// The state of the job.
  #[serde(rename = "status")]
  status: Option<String>
}

impl ReportsScansReport {
  pub fn new() -> ReportsScansReport {
    ReportsScansReport {
      bytes_sent: None,
      duration: None,
      end: None,
      files: None,
      id: None,
      infections: None,
      job_id: None,
      policy_id: None,
      size: None,
      start: None,
      status: None
    }
  }

  pub fn set_bytes_sent(&mut self, bytes_sent: i32) {
    self.bytes_sent = Some(bytes_sent);
  }

  pub fn with_bytes_sent(mut self, bytes_sent: i32) -> ReportsScansReport {
    self.bytes_sent = Some(bytes_sent);
    self
  }

  pub fn bytes_sent(&self) -> Option<&i32> {
    self.bytes_sent.as_ref()
  }

  pub fn reset_bytes_sent(&mut self) {
    self.bytes_sent = None;
  }

  pub fn set_duration(&mut self, duration: i32) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i32) -> ReportsScansReport {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i32> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_end(&mut self, end: i32) {
    self.end = Some(end);
  }

  pub fn with_end(mut self, end: i32) -> ReportsScansReport {
    self.end = Some(end);
    self
  }

  pub fn end(&self) -> Option<&i32> {
    self.end.as_ref()
  }

  pub fn reset_end(&mut self) {
    self.end = None;
  }

  pub fn set_files(&mut self, files: i32) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: i32) -> ReportsScansReport {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&i32> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ReportsScansReport {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_infections(&mut self, infections: i32) {
    self.infections = Some(infections);
  }

  pub fn with_infections(mut self, infections: i32) -> ReportsScansReport {
    self.infections = Some(infections);
    self
  }

  pub fn infections(&self) -> Option<&i32> {
    self.infections.as_ref()
  }

  pub fn reset_infections(&mut self) {
    self.infections = None;
  }

  pub fn set_job_id(&mut self, job_id: i32) {
    self.job_id = Some(job_id);
  }

  pub fn with_job_id(mut self, job_id: i32) -> ReportsScansReport {
    self.job_id = Some(job_id);
    self
  }

  pub fn job_id(&self) -> Option<&i32> {
    self.job_id.as_ref()
  }

  pub fn reset_job_id(&mut self) {
    self.job_id = None;
  }

  pub fn set_policy_id(&mut self, policy_id: String) {
    self.policy_id = Some(policy_id);
  }

  pub fn with_policy_id(mut self, policy_id: String) -> ReportsScansReport {
    self.policy_id = Some(policy_id);
    self
  }

  pub fn policy_id(&self) -> Option<&String> {
    self.policy_id.as_ref()
  }

  pub fn reset_policy_id(&mut self) {
    self.policy_id = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> ReportsScansReport {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_start(&mut self, start: i32) {
    self.start = Some(start);
  }

  pub fn with_start(mut self, start: i32) -> ReportsScansReport {
    self.start = Some(start);
    self
  }

  pub fn start(&self) -> Option<&i32> {
    self.start.as_ref()
  }

  pub fn reset_start(&mut self) {
    self.start = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> ReportsScansReport {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

}



