/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotaQuota {
  /// If true, SMB shares using the quota directory see the quota thresholds as share size.
  #[serde(rename = "container")]
  container: Option<bool>,
  /// True if the quota provides enforcement, otherwise a accounting quota.
  #[serde(rename = "enforced")]
  enforced: Option<bool>,
  /// If false and the quota is linked, attempt to unlink.
  #[serde(rename = "linked")]
  linked: Option<bool>,
  /// 
  #[serde(rename = "thresholds")]
  thresholds: Option<::models::QuotaQuotaThresholds>,
  /// If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).
  #[serde(rename = "thresholds_include_overhead")]
  thresholds_include_overhead: Option<bool>
}

impl QuotaQuota {
  pub fn new() -> QuotaQuota {
    QuotaQuota {
      container: None,
      enforced: None,
      linked: None,
      thresholds: None,
      thresholds_include_overhead: None
    }
  }

  pub fn set_container(&mut self, container: bool) {
    self.container = Some(container);
  }

  pub fn with_container(mut self, container: bool) -> QuotaQuota {
    self.container = Some(container);
    self
  }

  pub fn container(&self) -> Option<&bool> {
    self.container.as_ref()
  }

  pub fn reset_container(&mut self) {
    self.container = None;
  }

  pub fn set_enforced(&mut self, enforced: bool) {
    self.enforced = Some(enforced);
  }

  pub fn with_enforced(mut self, enforced: bool) -> QuotaQuota {
    self.enforced = Some(enforced);
    self
  }

  pub fn enforced(&self) -> Option<&bool> {
    self.enforced.as_ref()
  }

  pub fn reset_enforced(&mut self) {
    self.enforced = None;
  }

  pub fn set_linked(&mut self, linked: bool) {
    self.linked = Some(linked);
  }

  pub fn with_linked(mut self, linked: bool) -> QuotaQuota {
    self.linked = Some(linked);
    self
  }

  pub fn linked(&self) -> Option<&bool> {
    self.linked.as_ref()
  }

  pub fn reset_linked(&mut self) {
    self.linked = None;
  }

  pub fn set_thresholds(&mut self, thresholds: ::models::QuotaQuotaThresholds) {
    self.thresholds = Some(thresholds);
  }

  pub fn with_thresholds(mut self, thresholds: ::models::QuotaQuotaThresholds) -> QuotaQuota {
    self.thresholds = Some(thresholds);
    self
  }

  pub fn thresholds(&self) -> Option<&::models::QuotaQuotaThresholds> {
    self.thresholds.as_ref()
  }

  pub fn reset_thresholds(&mut self) {
    self.thresholds = None;
  }

  pub fn set_thresholds_include_overhead(&mut self, thresholds_include_overhead: bool) {
    self.thresholds_include_overhead = Some(thresholds_include_overhead);
  }

  pub fn with_thresholds_include_overhead(mut self, thresholds_include_overhead: bool) -> QuotaQuota {
    self.thresholds_include_overhead = Some(thresholds_include_overhead);
    self
  }

  pub fn thresholds_include_overhead(&self) -> Option<&bool> {
    self.thresholds_include_overhead.as_ref()
  }

  pub fn reset_thresholds_include_overhead(&mut self) {
    self.thresholds_include_overhead = None;
  }

}



