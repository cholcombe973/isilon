/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NamespaceAccessPoints {
  #[serde(rename = "namespaces")]
  namespaces: Option<Vec<::models::NamespaceAccessPointsNamespaces>>,
  #[serde(rename = "versions")]
  versions: Option<Vec<String>>
}

impl NamespaceAccessPoints {
  pub fn new() -> NamespaceAccessPoints {
    NamespaceAccessPoints {
      namespaces: None,
      versions: None
    }
  }

  pub fn set_namespaces(&mut self, namespaces: Vec<::models::NamespaceAccessPointsNamespaces>) {
    self.namespaces = Some(namespaces);
  }

  pub fn with_namespaces(mut self, namespaces: Vec<::models::NamespaceAccessPointsNamespaces>) -> NamespaceAccessPoints {
    self.namespaces = Some(namespaces);
    self
  }

  pub fn namespaces(&self) -> Option<&Vec<::models::NamespaceAccessPointsNamespaces>> {
    self.namespaces.as_ref()
  }

  pub fn reset_namespaces(&mut self) {
    self.namespaces = None;
  }

  pub fn set_versions(&mut self, versions: Vec<String>) {
    self.versions = Some(versions);
  }

  pub fn with_versions(mut self, versions: Vec<String>) -> NamespaceAccessPoints {
    self.versions = Some(versions);
    self
  }

  pub fn versions(&self) -> Option<&Vec<String>> {
    self.versions.as_ref()
  }

  pub fn reset_versions(&mut self) {
    self.versions = None;
  }

}



