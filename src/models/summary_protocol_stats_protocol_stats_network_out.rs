/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryProtocolStatsProtocolStatsNetworkOut {
  /// Network output errors per-second
  #[serde(rename = "errors_per_sec")]
  errors_per_sec: f32,
  /// Network output megabytes per-second
  #[serde(rename = "megabytes_per_sec")]
  megabytes_per_sec: f32,
  /// Network output packets per-second
  #[serde(rename = "packets_per_sec")]
  packets_per_sec: f32
}

impl SummaryProtocolStatsProtocolStatsNetworkOut {
  pub fn new(errors_per_sec: f32, megabytes_per_sec: f32, packets_per_sec: f32) -> SummaryProtocolStatsProtocolStatsNetworkOut {
    SummaryProtocolStatsProtocolStatsNetworkOut {
      errors_per_sec: errors_per_sec,
      megabytes_per_sec: megabytes_per_sec,
      packets_per_sec: packets_per_sec
    }
  }

  pub fn set_errors_per_sec(&mut self, errors_per_sec: f32) {
    self.errors_per_sec = errors_per_sec;
  }

  pub fn with_errors_per_sec(mut self, errors_per_sec: f32) -> SummaryProtocolStatsProtocolStatsNetworkOut {
    self.errors_per_sec = errors_per_sec;
    self
  }

  pub fn errors_per_sec(&self) -> &f32 {
    &self.errors_per_sec
  }


  pub fn set_megabytes_per_sec(&mut self, megabytes_per_sec: f32) {
    self.megabytes_per_sec = megabytes_per_sec;
  }

  pub fn with_megabytes_per_sec(mut self, megabytes_per_sec: f32) -> SummaryProtocolStatsProtocolStatsNetworkOut {
    self.megabytes_per_sec = megabytes_per_sec;
    self
  }

  pub fn megabytes_per_sec(&self) -> &f32 {
    &self.megabytes_per_sec
  }


  pub fn set_packets_per_sec(&mut self, packets_per_sec: f32) {
    self.packets_per_sec = packets_per_sec;
  }

  pub fn with_packets_per_sec(mut self, packets_per_sec: f32) -> SummaryProtocolStatsProtocolStatsNetworkOut {
    self.packets_per_sec = packets_per_sec;
    self
  }

  pub fn packets_per_sec(&self) -> &f32 {
    &self.packets_per_sec
  }


}



