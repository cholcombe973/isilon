/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeStatusNodePowersuppliesSupply {
  /// Which node chassis is this power supply in.
  #[serde(rename = "chassis")]
  chassis: Option<i32>,
  /// The current firmware revision of this power supply.
  #[serde(rename = "firmware")]
  firmware: Option<String>,
  /// Is this power supply in a failure state.
  #[serde(rename = "good")]
  good: Option<String>,
  /// Identifying index for this power supply.
  #[serde(rename = "id")]
  id: i32,
  /// Complete identifying string for this power supply.
  #[serde(rename = "name")]
  name: Option<String>,
  /// A descriptive status string for this power supply.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The type of this power supply.
  #[serde(rename = "type")]
  _type: Option<String>
}

impl NodeStatusNodePowersuppliesSupply {
  pub fn new(id: i32) -> NodeStatusNodePowersuppliesSupply {
    NodeStatusNodePowersuppliesSupply {
      chassis: None,
      firmware: None,
      good: None,
      id: id,
      name: None,
      status: None,
      _type: None
    }
  }

  pub fn set_chassis(&mut self, chassis: i32) {
    self.chassis = Some(chassis);
  }

  pub fn with_chassis(mut self, chassis: i32) -> NodeStatusNodePowersuppliesSupply {
    self.chassis = Some(chassis);
    self
  }

  pub fn chassis(&self) -> Option<&i32> {
    self.chassis.as_ref()
  }

  pub fn reset_chassis(&mut self) {
    self.chassis = None;
  }

  pub fn set_firmware(&mut self, firmware: String) {
    self.firmware = Some(firmware);
  }

  pub fn with_firmware(mut self, firmware: String) -> NodeStatusNodePowersuppliesSupply {
    self.firmware = Some(firmware);
    self
  }

  pub fn firmware(&self) -> Option<&String> {
    self.firmware.as_ref()
  }

  pub fn reset_firmware(&mut self) {
    self.firmware = None;
  }

  pub fn set_good(&mut self, good: String) {
    self.good = Some(good);
  }

  pub fn with_good(mut self, good: String) -> NodeStatusNodePowersuppliesSupply {
    self.good = Some(good);
    self
  }

  pub fn good(&self) -> Option<&String> {
    self.good.as_ref()
  }

  pub fn reset_good(&mut self) {
    self.good = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> NodeStatusNodePowersuppliesSupply {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NodeStatusNodePowersuppliesSupply {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> NodeStatusNodePowersuppliesSupply {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with_type(mut self, _type: String) -> NodeStatusNodePowersuppliesSupply {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset_type(&mut self) {
    self._type = None;
  }

}



