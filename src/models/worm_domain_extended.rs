/* 
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WormDomainExtended {
  /// Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.
  #[serde(rename = "autocommit_offset")]
  autocommit_offset: Option<i32>,
  #[serde(rename = "default_retention")]
  default_retention: Option<String>,
  #[serde(rename = "max_retention")]
  max_retention: Option<String>,
  #[serde(rename = "min_retention")]
  min_retention: Option<String>,
  /// Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.
  #[serde(rename = "override_date")]
  override_date: Option<i32>,
  /// When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.
  #[serde(rename = "privileged_delete")]
  privileged_delete: String,
  /// Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.
  #[serde(rename = "type")]
  _type: String,
  /// Specifies the system-assigned ID for the protection domain.
  #[serde(rename = "id")]
  id: i32,
  /// True if OneFS is still in the process of creating this domain and is unable to prevent files from being modified or deleted. If false, indicates that the domain is fully created and is able to prevent files from being modified or deleted.
  #[serde(rename = "incomplete")]
  incomplete: bool,
  /// Specifies the logical inode number (LIN) for the root of this domain.
  #[serde(rename = "lin")]
  lin: i32,
  /// Specifies the maximum amount of time, in seconds, that a file in this domain will be protected. This setting will override the retention period of any file committed with a longer retention period. If this parameter is set to null, an infinite length retention period is set.
  #[serde(rename = "max_modifies")]
  max_modifies: i32,
  /// Specifies the root path of this domain. Files in this directory and all sub-directories will be protected.
  #[serde(rename = "path")]
  path: String,
  /// Specifies the number of times this domain has been modified and the number of times the attributes for the domain have changed. A SmartLock domain can be modified a fixed number of times as defined by the 'max_modifies' parameter.
  #[serde(rename = "total_modifies")]
  total_modifies: i32
}

impl WormDomainExtended {
  pub fn new(privileged_delete: String, _type: String, id: i32, incomplete: bool, lin: i32, max_modifies: i32, path: String, total_modifies: i32) -> WormDomainExtended {
    WormDomainExtended {
      autocommit_offset: None,
      default_retention: None,
      max_retention: None,
      min_retention: None,
      override_date: None,
      privileged_delete: privileged_delete,
      _type: _type,
      id: id,
      incomplete: incomplete,
      lin: lin,
      max_modifies: max_modifies,
      path: path,
      total_modifies: total_modifies
    }
  }

  pub fn set_autocommit_offset(&mut self, autocommit_offset: i32) {
    self.autocommit_offset = Some(autocommit_offset);
  }

  pub fn with_autocommit_offset(mut self, autocommit_offset: i32) -> WormDomainExtended {
    self.autocommit_offset = Some(autocommit_offset);
    self
  }

  pub fn autocommit_offset(&self) -> Option<&i32> {
    self.autocommit_offset.as_ref()
  }

  pub fn reset_autocommit_offset(&mut self) {
    self.autocommit_offset = None;
  }

  pub fn set_default_retention(&mut self, default_retention: String) {
    self.default_retention = Some(default_retention);
  }

  pub fn with_default_retention(mut self, default_retention: String) -> WormDomainExtended {
    self.default_retention = Some(default_retention);
    self
  }

  pub fn default_retention(&self) -> Option<&String> {
    self.default_retention.as_ref()
  }

  pub fn reset_default_retention(&mut self) {
    self.default_retention = None;
  }

  pub fn set_max_retention(&mut self, max_retention: String) {
    self.max_retention = Some(max_retention);
  }

  pub fn with_max_retention(mut self, max_retention: String) -> WormDomainExtended {
    self.max_retention = Some(max_retention);
    self
  }

  pub fn max_retention(&self) -> Option<&String> {
    self.max_retention.as_ref()
  }

  pub fn reset_max_retention(&mut self) {
    self.max_retention = None;
  }

  pub fn set_min_retention(&mut self, min_retention: String) {
    self.min_retention = Some(min_retention);
  }

  pub fn with_min_retention(mut self, min_retention: String) -> WormDomainExtended {
    self.min_retention = Some(min_retention);
    self
  }

  pub fn min_retention(&self) -> Option<&String> {
    self.min_retention.as_ref()
  }

  pub fn reset_min_retention(&mut self) {
    self.min_retention = None;
  }

  pub fn set_override_date(&mut self, override_date: i32) {
    self.override_date = Some(override_date);
  }

  pub fn with_override_date(mut self, override_date: i32) -> WormDomainExtended {
    self.override_date = Some(override_date);
    self
  }

  pub fn override_date(&self) -> Option<&i32> {
    self.override_date.as_ref()
  }

  pub fn reset_override_date(&mut self) {
    self.override_date = None;
  }

  pub fn set_privileged_delete(&mut self, privileged_delete: String) {
    self.privileged_delete = privileged_delete;
  }

  pub fn with_privileged_delete(mut self, privileged_delete: String) -> WormDomainExtended {
    self.privileged_delete = privileged_delete;
    self
  }

  pub fn privileged_delete(&self) -> &String {
    &self.privileged_delete
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> WormDomainExtended {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> WormDomainExtended {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_incomplete(&mut self, incomplete: bool) {
    self.incomplete = incomplete;
  }

  pub fn with_incomplete(mut self, incomplete: bool) -> WormDomainExtended {
    self.incomplete = incomplete;
    self
  }

  pub fn incomplete(&self) -> &bool {
    &self.incomplete
  }


  pub fn set_lin(&mut self, lin: i32) {
    self.lin = lin;
  }

  pub fn with_lin(mut self, lin: i32) -> WormDomainExtended {
    self.lin = lin;
    self
  }

  pub fn lin(&self) -> &i32 {
    &self.lin
  }


  pub fn set_max_modifies(&mut self, max_modifies: i32) {
    self.max_modifies = max_modifies;
  }

  pub fn with_max_modifies(mut self, max_modifies: i32) -> WormDomainExtended {
    self.max_modifies = max_modifies;
    self
  }

  pub fn max_modifies(&self) -> &i32 {
    &self.max_modifies
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> WormDomainExtended {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_total_modifies(&mut self, total_modifies: i32) {
    self.total_modifies = total_modifies;
  }

  pub fn with_total_modifies(mut self, total_modifies: i32) -> WormDomainExtended {
    self.total_modifies = total_modifies;
    self
  }

  pub fn total_modifies(&self) -> &i32 {
    &self.total_modifies
  }


}



